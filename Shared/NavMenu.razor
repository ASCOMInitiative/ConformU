@inject ILogger<App> logger
@inject IJSRuntime JsRuntime
@inject ConformConfiguration configuration
@inject IResizeListener resizeListener
@inject ConformLogger conformLogger

<div class="top-row pl-4 navbar navbar-dark">

    @if (configuration.Settings.OperationInProgress)@* Operation is in progress *@
    {
        @if (IsSmall)@* Operation in progress and screen is small *@
        {
            <span class="navbar-brand">Conform Universal</span> <span style="text-align:left; color: yellow"><b>Operation in progress</b></span>
        }
        else @* Operation in progress and normal screen *@
        {
            <span class="navbar-brand" style="width: 100%; text-align: center">Conform Universal</span>
        }
    }
    else @* No operation is in progress *@
    {
        @if (IsSmall)@* No operation and screen is small *@
        {
            <span class="navbar-brand">Conform Universal</span>
        }
        else @* No operation and screen is normal *@
        {
            <span class="navbar-brand" style="width: 100%; text-align: center">Conform Universal</span>
        }
    }

    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

@if (configuration.Settings.OperationInProgress)
{
    @* Only display the Operation in progress status in the navigation menu when running on a large screen. On small screens it appear in the title area *@
    @if (!IsSmall)
    {
        <div style="margin-top: 80px;text-align:center">
            <p style="color:yellow"><b> Operation in progress</b></p>
        </div>
    }
}
else
{
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
                <NavLink class="nav-link" href="/DeviceSelection" Match="NavLinkMatch.All">
                    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Select Device
                </NavLink>
                <NavLink class="nav-link" href="/Setup" Match="NavLinkMatch.All">
                    <span class="oi oi-zoom-in" aria-hidden="true"></span> Device Setup
                </NavLink>
                <NavLink class="nav-link" href="/Settings" Match="NavLinkMatch.All">
                    <span class="oi oi-wrench" aria-hidden="true"></span> Settings
                </NavLink>
                <NavLink class="nav-link" href="/Help" Match="NavLinkMatch.All">
                    <span class="oi oi-question-mark" aria-hidden="true"></span> Help
                </NavLink>
            </li>
        </ul>

    </div>
}
<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />

@code {
    bool IsSmall = false;

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private int lastWindowWidth = 0;
    private int lastWindowHeight = 0;

    /// <summary>
    /// Event handler for page initialised event
    /// </summary>
    /// <remarks>Hook up an event handler to redisplay the page header whenever the configuraiton is changed. </remarks>
    protected override void OnInitialized()
    {
        configuration.ConfigurationChanged += OnConfigurationChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            resizeListener.OnResized += WindowResized;
        }
    }

    // This method will be called when the window resizes.
    async void WindowResized(object _, BrowserWindowSize window)
    {
        try
        {
            // Ensure that we aren't flooded with messages when window dimensions haven't changed.
            if ((window.Height != lastWindowHeight) | (window.Width != lastWindowWidth))
            {
                conformLogger.LogMessage("Navmenu.WindowResized", MessageLevel.Debug, $"Window resized - Browser height: {window.Height}, Browser width: {window.Height}");
                lastWindowHeight = window.Height;
                lastWindowWidth = window.Width;
            }
            await InvokeAsync(StateHasChanged); // Display the updated log on the screen - invoke required because this event handler method could be called by any thread
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("SetScreenLogRows", $"Exception: \r\n{ex}");
        }
    }



    /// <summary>
    /// Event hander called when the configuration is changed
    /// </summary>
    /// <param name="caller"></param>
    /// <param name="args"></param>
    private void OnConfigurationChanged(object caller, EventArgs args)
    {
        // Collapse the nav menu if an operation has been started
        if (configuration.Settings.OperationInProgress) collapseNavMenu = true;
        // Refresh the UI according to new state
        InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}
