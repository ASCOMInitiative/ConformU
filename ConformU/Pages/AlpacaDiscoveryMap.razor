@page "/AlpacaDiscoveryPage"
@implements IDisposable
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@inject ConformStateManager state
@using System.Threading
@using ASCOM.Alpaca.Discovery
@using Blazorise.TreeView
@using System.Reflection;

<h2 style=@statusVisible>Alpaca Discovery Map</h2>
<div>

    <RadzenButton Id="StartButton" Click=@(async args => await StartDiscovery("Starting test")) Text="Discover" Style="margin-bottom: 20px; margin-right: 20px; width: 150px" Disabled=@configuration.Settings.OperationInProgress />
    <RadzenButton Click=@(args => StopTest("Stopping test")) Text="Stop" Style="margin-bottom: 20px; width: 150px" Disabled=@(!configuration.Settings.OperationInProgress) />
</div>

<div style=@statusVisible>
    <RadzenTextBox Id="Status" Style="width: 100%; margin-bottom:20px; margin-right:20px" @bind-Value=@statusMessage />
</div>

<div class="col" style="margin-bottom: 16px; width: 100%">
    <h4>Discovered Alpaca Devices</h4>
    <TreeView Nodes="alpacaDevices"
              GetChildNodes="@(item => item.Children)"
              HasChildNodes="@(item => item.Children?.Any() == true)">
        <NodeContent>@context.Text</NodeContent>
    </TreeView>
</div>

<div class="col" style="margin-bottom: 16px; width: 100%">
    <h4>Available ASCOM Devices</h4>
    <TreeView Nodes="ascomDevices"
              GetChildNodes="@(item => item.Children)"
              HasChildNodes="@(item => item.Children?.Any() == true)">
        <NodeContent>@context.Text</NodeContent>
    </TreeView>
</div>

@* Only show the unrecognised device types message if there are such devices *@
@if (nonStandardDevices.Count > 0)
{
    <div class="col" style="margin-bottom: 16px; width: 100%">
        <h4>UNRECOGNISED ASCOM DEVICE TYPES - THESE ARE NOT VALID AND SHOULD BE REMOVED</h4>
        <TreeView Nodes="nonStandardDevices"
              GetChildNodes="@(item => item.Children)"
              HasChildNodes="@(item => item.Children?.Any() == true)">
            <NodeContent>@context.Text</NodeContent>
        </TreeView>
    </div>
}

@code {

    List<BlazoriseTreeItem> alpacaDevices = new() { new BlazoriseTreeItem() { Text = "None" } };
    List<BlazoriseTreeItem> ascomDevices = new() { new BlazoriseTreeItem() { Text = "None" } };
    List<BlazoriseTreeItem> nonStandardDevices = new() { new BlazoriseTreeItem() { Text = "None" } };

    private string statusVisible = "display: initial";
    private bool disposedValue;
    object statusLockObject = new object();
    string statusMessage = "";

    // Task and cancellation support
    Task discoverytask;
    CancellationTokenSource cancellationTokenSource;
    CancellationToken cancelConformToken;

    AlpacaConfiguration alpacaConfiguration;

    protected override async void OnInitialized()
    {
        alpacaConfiguration = configuration.Settings.AlpacaConfiguration;

        await StartDiscovery("Initialise");
    }

    async Task StartDiscovery(string buttonName)
    {
        try
        {
            alpacaDevices = new();
            ascomDevices = new();
            nonStandardDevices = new();
            //using NetworkLogger listener = new NetworkLogger(conformLogger); // Enable this to include socket and http debug messages from the .NET runtime.

            // Set the operation in progress flag and refresh state throughout the page and navigation menu.
            configuration.Settings.OperationInProgress = true;
            state.RaiseUiHasChangedEvent();
            await InvokeAsync(() => { StateHasChanged(); });

            // Create a task cancellation token source and cancellation token

            using (cancellationTokenSource = new CancellationTokenSource())
            {
                cancelConformToken = cancellationTokenSource.Token;

                try
                {
                    List<BlazoriseTreeItem> discoveredAlpacaDevices = new();
                    List<BlazoriseTreeItem> discoveredAscomDevices = new();
                    List<BlazoriseTreeItem> discoveredNonStandardDevices = new();

                    SetStatusMessage("Discovery started");

                    // Create a task to run the conformance test
                    discoverytask = new Task(() =>
                    {
                        try
                        {
                            using (AlpacaDiscovery alpacaDiscovery = new AlpacaDiscovery(configuration.Settings.AlpacaConfiguration.StrictCasing, configuration.Settings.TraceDiscovery ? conformLogger : null, Globals.USER_AGENT_PRODUCT_NAME, Assembly.GetExecutingAssembly().GetName().Version.ToString())) // Create a discovery component with or without logging
                            {
                                // Start the discovery process
                                alpacaDiscovery.StartDiscovery(alpacaConfiguration.NumberOfDiscoveryPolls,
                                    (int)(alpacaConfiguration.DiscoveryPollInterval * 1000),
                                    alpacaConfiguration.DiscoveryPort,
                                    alpacaConfiguration.DiscoveryDuration,
                                    alpacaConfiguration.DiscoveryResolveName,
                                    alpacaConfiguration.DiscoveryUseIpV4,
                                    alpacaConfiguration.DiscoveryUseIpV6,
                                    alpacaConfiguration.AccessServiceType);

                                // Wait for discovery to complete
                                do
                                {
                                    Thread.Sleep(100);
                                } while (!alpacaDiscovery.DiscoveryComplete & !cancellationTokenSource.IsCancellationRequested);

                                // Process each Alpaca device in turn
                                foreach (AlpacaDevice alpacaDevice in alpacaDiscovery.GetAlpacaDevices())
                                {
                                    string alpacaDeviceString = $"\"Found: {$"{alpacaDevice.IpAddress}:{alpacaDevice.Port.ToString().PadRight(6)}".PadRight(40)} {alpacaDevice.ServerName,-15} {alpacaDevice.Manufacturer,-15} {alpacaDevice.ManufacturerVersion,-20} {alpacaDevice.Location}\"";

                                    // Create a node for the Alpaca device and add sub-nodes for th device's details
                                    BlazoriseTreeItem alpacaDeviceItem = new() { Text = $"{alpacaDevice.ServerName} on host {alpacaDevice.HostName} ({alpacaDevice.IpAddress}:{alpacaDevice.Port})" };
                                    List<BlazoriseTreeItem> deviceDescription = new();
                                    deviceDescription.Add(new BlazoriseTreeItem() { Text = $"Manufacturer: {alpacaDevice.Manufacturer}" });
                                    deviceDescription.Add(new BlazoriseTreeItem() { Text = $"Version: {alpacaDevice.ManufacturerVersion}" });
                                    deviceDescription.Add(new BlazoriseTreeItem() { Text = $"Location: {alpacaDevice.Location}" });

                                    // Add the discovered ASCOM devices to the main list of ASCOM devices
                                    List<BlazoriseTreeItem> ascomDevices = new();
                                    List<BlazoriseTreeItem> nonStandardDevices = new();

                                    foreach (AscomDevice ascomDevice in alpacaDevice.AscomDevices(null))
                                    {
                                        // Provide appropriate descriptions for ASCOM and non-ASCOM device types

                                        if (ascomDevice.AscomDeviceType is null) // This is not an ASCOM device type
                                        {
                                            nonStandardDevices.Add(new BlazoriseTreeItem() { Text = $"{ascomDevice.NonAscomDeviceType} Device: {ascomDevice.AscomDeviceName} - Alpaca device number: {ascomDevice.AlpacaDeviceNumber} - Alpaca Unique ID: {ascomDevice.UniqueId}" });
                                        }
                                        else // This is an ASCOM device type
                                        {
                                            ascomDevices.Add(new BlazoriseTreeItem() { Text = $"ASCOM {ascomDevice.AscomDeviceType} Device: {ascomDevice.AscomDeviceName} - Alpaca device number: {ascomDevice.AlpacaDeviceNumber} - Alpaca Unique ID: {ascomDevice.UniqueId}" });
                                        }
                                    }

                                    //Add a node to display this Alpaca device's ASCOM devices
                                    deviceDescription.Add(new BlazoriseTreeItem() { Text = "Available ASCOM Devices", Children = ascomDevices });

                                    //Add a node to display this Alpaca device's non-standard devices
                                    if (nonStandardDevices.Count > 0) deviceDescription.Add(new BlazoriseTreeItem() { Text = "UNRECOGNISED ASCOM DEVICE TYPES - THESE ARE NOT VALID AND SHOULD BE REMOVED", Children = nonStandardDevices });

                                    // Add the ASCOM device descriptions to the Alpaca device description
                                    alpacaDeviceItem.Children = deviceDescription;

                                    // Add the Alpaca device to the overall list of Alpaca devices
                                    discoveredAlpacaDevices.Add(alpacaDeviceItem);
                                }

                                // Create a list of Unique devices
                                IEnumerable<AscomDevice> uniqueAscomDevices = alpacaDiscovery.GetAscomDevices(null).Distinct(new AscomDeviceComparer());

                                foreach (AscomDevice uniqueAscomDevice in uniqueAscomDevices)
                                {
                                    IEnumerable<AscomDevice> sameDevices = alpacaDiscovery.GetAscomDevices(null).Where<AscomDevice>(x => x.UniqueId == uniqueAscomDevice.UniqueId);
                                    List<BlazoriseTreeItem> sameDevicesListItems = new();

                                    foreach (AscomDevice ad in sameDevices)
                                    {
                                        sameDevicesListItems.Add(new BlazoriseTreeItem() { Text = $"Found at {ad.HostName} ({ad.IpAddress}:{ad.IpPort}) - {ad.AscomDeviceType} {ad.AlpacaDeviceNumber}" });
                                    }

                                    if (uniqueAscomDevice.AscomDeviceType is null) // This is a non-standard device so add it to the non-standard deviecs list
                                    {
                                        discoveredNonStandardDevices.Add(new BlazoriseTreeItem() { Text = $"{uniqueAscomDevice.AscomDeviceName} (UniqueID: {uniqueAscomDevice.UniqueId})", Children = sameDevicesListItems });
                                    }
                                    else // This is a standard device so add it to the ASCOM devices list
                                    {
                                        discoveredAscomDevices.Add(new BlazoriseTreeItem() { Text = $"{uniqueAscomDevice.AscomDeviceName} (UniqueID: {uniqueAscomDevice.UniqueId})", Children = sameDevicesListItems });
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            try { conformLogger.LogMessage("DiscoveryTask", MessageLevel.Error, $"{ex}"); } catch (Exception) { throw; }

                        }
                    }, cancelConformToken);

                    conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Starting conformance test");

                    // Start the discovery task
                    discoverytask.Start();
                    conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Conformance test started OK");

                    // Wait for the task to complete.
                    conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Awaiting conformance task completion");
                    await discoverytask;

                    if (discoveredAlpacaDevices.Count == 0) discoveredAlpacaDevices.Add(new BlazoriseTreeItem() { Text = "None" });
                    if (discoveredAscomDevices.Count == 0) discoveredAscomDevices.Add(new BlazoriseTreeItem() { Text = "None" });

                    alpacaDevices = discoveredAlpacaDevices;
                    ascomDevices = discoveredAscomDevices;
                    nonStandardDevices = discoveredNonStandardDevices;

                    conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Conformance task completed");
                    SetStatusMessage("Discovery complete");
                }
                finally
                {
                    conformLogger.LogMessage("StartTest", "Finally code has run.");
                }
            }

            GC.Collect();
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Discovery error: {ex.Message} - See ConforumU log for details.");
            try { conformLogger.LogMessage("ALPACAMAP.RAZOR-StartTest", MessageLevel.Error, $"{ex}"); } catch (Exception) { throw; }
            try { Console.WriteLine($"ALPACAMAP.RAZOR-StartTest Exception: {ex}"); } catch (Exception) { throw; }
        }
        finally
        {
            configuration.Settings.OperationInProgress = false;
            state.RaiseUiHasChangedEvent();
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    void StopTest(string buttonName)
    {
        cancellationTokenSource.Cancel(); // Cancel the Conform run
    }

    /// <summary>
    /// Event handler for messages returned from the tester
    /// </summary>
    public void SetStatusMessage(string message)
    {
        lock (statusLockObject)
        {
            statusMessage = $"{message}";  // Add the new log message to the screen display
            InvokeAsync(StateHasChanged); // Display the updated log on the screen - invoke required because this event handler method could be called by any thread
        }
    }

    #region Dispose support

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
            }

            disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    #endregion

}
