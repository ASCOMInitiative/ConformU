@page "/Help"
@using System.Reflection
@using ASCOM.Common
@using ASCOM.Common.Alpaca

<h2>Help</h2>

<h4 style="margin-top: 20px">ConformU Version @assemblyVersion</h4>
<p>(c) Peter Simpson (ASCOM Initiative) 2021-2022</p>

<p style="margin-top: 20px">For support please post on the <a href="https://ascomtalk.groups.io/g/Developer" target="_blank">ASCOM Developer Support Forum</a></p>

<h4 style="margin-top: 40px">ASCOM Interface Conformance</h4>
<p>
    Conform Universal is a client application for both Windows COM drivers and Alpaca devices that assesses their behaviour for conformance with requirements given in the relevant ASCOM Interface specification. 
    Responses to both expected (happy path) and unexpected (unhappy path) inputs are assessed.
</p>
<h5>How to check ASCOM Interface Conformance</h5>
<p>
    First select a device through the <b>Select Device</b> page and then use the <b>Home</b> page to test compliance.
</p>

<h4 style="margin-top: 40px">Alpaca Protocol Conformance</h4>
<p>
    The Alpaca protocol uses HTTP and REST to communicate with a device that implements one of the ASCOM device interfaces. The protocol specifies command and
    parameter names, together with correct casing, which are required for proper execution. The <b>Check Alpaca Protocol</b> test confirms that an Alpaca device is compliant with Alpaca requirements, 
    including correct reporting of missing parameters and handling of commands and parameters that are incorrectly cased..
</p>
<p>
    The Alpaca protocol check does not attempt to confirm that a device is conformant with ASCOM interface specification requirements, you can use the Home page check for this. Instead, its purpose is to confirm that 
    Alpaca command reception and happy / unhappy Alpaca path responses are as expected. 
</p>
<p>
    Unlike the <b>Home</b> page ASCOM device conformance check, the Alpaca check is designed to change device state as little as possible e.g. telescope
    devices are commanded to move to their current co-ordinates and focusers are commanded to move to their current position. For some operations state change is unavoidable, such as when parking a scope or dome, but
    these cases have been reduced as far as possible.
</p>
<h5>How to check Alpaca protocol use</h5>
<p>
    First select a device through the <b>Select Device</b> page and then use the <b>Check Alpaca Protocol</b> page to test compliance.
</p>

<h4 style="margin-top: 40px">Command line parameters</h4>
<p>
    The following command line parameters are supported to override application default behaviour. If you wish to use Conform Universal as a command line tool, without a GUI,
    use the <b>--commandline</b> parameter together with any other override parameters that you need
</p>
<p>
    <table id="commandline">
        <tr>
            <th style="width:390px">Parameter</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><tt>--commandline</tt></td>
            <td>Run as a command line application with no graphical interface using the same settings as the GUI application.</td>
        </tr>
        <tr>
            <td><tt>--settings FullyQualifiedFilename</tt></td>
            <td>Fully qualified file name of the application settings file to use. Omit or leave blank to use the settings configured through the GUI.</td>
        </tr>
        <tr>
            <td><tt>--logfilepath FullyQualifiedLogfilePath</tt></td>
            <td>Fully qualified path to the log file folder. Omit or leave blank to use the default logging settings, which create a new folder each day.</td>
        </tr>
        <tr>
            <td><tt>--logfile filename </tt></td>
            <td>
                If filename has no directory/folder component it will be appended to the log file path to create the fully qualified log file name. If filename is fully qualified, any logfilepath parameter will be ignored.
                Omit or leave blank to use automatic file naming, where the file name will be based on the file creation time.
            </td>
        </tr>
        <tr>
            <td><tt>--resultsfile FullyQualifiedFilename</tt></td>
            <td>Fully qualified file name of the machine readable JSON results file. Omit or leave blank to use the default GUI behaviour.</td>
        </tr>
        <tr>
            <td><tt>--debugdiscovery</tt></td>
            <td>Write discovery debug information to the log.</td>
        </tr>
        <tr>
            <td><tt>--debugstartup</tt></td>
            <td>Write start-up debug information to the log.</td>
        </tr>
        <tr>
            <td><tt>--help</tt></td>
            <td>Display a help screen</td>
        </tr>
        <tr>
            <td><tt>--version</tt></td>
            <td>Display version information</td>
        </tr>
    </table>
</p>

<h4 style="margin-top: 40px">Settings file enum values</h4>
<p>
    When manually editing the settings file please be aware that the settings listed below are converted to enum values within the application and must have one of the values in the <b>Possible Values</b> list.
    Any casing is accepted but misspelling will result in the file being reported as corrupt.
</p>
<p>
    <table id="commandline">
        <tr>
            <th style="width:390px">Setting</th>
            <th>Possible Values</th>
        </tr>
        <tr>
            <td><tt>DeviceType</tt></td>
            <td>@string.Join(", ",Enum.GetNames(typeof(DeviceTypes)))</td>
        </tr>
        <tr>
            <td><tt>AlpacaDevice:AscomDeviceType</tt></td>
            <td>@string.Join(", ",Enum.GetNames(typeof(DeviceTypes)))</td>
        </tr>
        <tr>
            <td><tt>AlpacaDevice:ServiceType</tt></td>
            <td>@string.Join(", ",Enum.GetNames(typeof(ServiceType)))</td>
        </tr>
        <tr>
            <td><tt>AlpacaConfiguration:AccessServiceType</tt></td>
            <td>@string.Join(", ",Enum.GetNames(typeof(ServiceType)))</td>
        </tr>
        <tr>
            <td><tt>AlpacaConfiguration:ImageArrayTransferType</tt></td>
            <td>@string.Join(", ",Enum.GetNames(typeof(ImageArrayTransferType)))</td>
        </tr>
        <tr>
            <td><tt>ComConfiguration:ComAccessMechanic</tt></td>
            <td>@string.Join(", ",Enum.GetNames(typeof(ComAccessMechanic)))</td>
        </tr>
    </table>
</p>


@code
{
    string assemblyVersion;

    protected override void OnInitialized()
    {
        assemblyVersion = $"{Update.ConformuVersionDisplayString})";
    }

}