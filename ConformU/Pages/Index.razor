@page "/"
@implements IDisposable
@using System.Threading
@inject BrowserResizeService listener
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@inject IJSRuntime JS
@using ASCOM.Common
@using Microsoft.Extensions.Configuration
@using System.Reflection;
@using Semver;
@inject IConfiguration Configuration
@* Radzen notification service to enable pop-up alerts *@
@inject NotificationService notificationService
@inject NavigationManager UriHelper

<h2 style="display: @statusVisible">Welcome to Conform Universal!</h2>

<div>
    <RadzenButton Id="StartButton" Click=@(args => StartTest("Starting test")) Text="Start" Style="margin-bottom: 20px; margin-right: 20px; width: 130px" IsBusy=@configuration.Settings.OperationInProgress />
    <RadzenButton Id="StopButton" Click=@(args => StopTest("Stopping test")) Text="Stop" Style="margin-bottom: 20px; margin-right: 20px; width: 130px" Disabled=@(!configuration.Settings.OperationInProgress) />
    <RadzenButton Id="ConfigureButton" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click=@(args => GoToSelectionPage("ConfigureButton")) Text="Select Device" Style="margin-bottom: 10px; margin-right: 10px; width: 130px;" Disabled=@configuration.Settings.OperationInProgress />
</div>

<h4>Conform Log</h4>
<RadzenTextArea Id="ConformLog" Style="line-height: 18px; padding-bottom: 0px" Name="ScreenLog" @bind-Value=@screenLog Rows="@screenLogRows" Cols="250" ReadOnly=true />

<div style="display :@statusVisible">
    <RadzenTextBox Id="Status" Style="width: 100%; margin-bottom:20px; margin-right:20px; margin-top:8px" @bind-Value=@statusMessage />
</div>

@code {
    private string statusVisible = "initial";
    private bool disposedValue;
    int screenLogRows = 10;
    string screenLog;
    object screenLogLockObject = new object();
    object statusLockObject = new object();
    private string deviceDescription = "";
    string statusMessage="";

    ConformanceTestManager tester;

    // Task and cancellation support
    Task conformanceTestTask;
    CancellationTokenSource cancellationTokenSource;
    CancellationToken cancelConformToken;

    protected override void OnInitialized()
    {
        conformLogger.Debug = configuration.Settings.Debug;
        configuration.UiHasChanged += OnUiHasChanged;
        conformLogger.LogMessage("Index.OnInitialized", MessageLevel.Debug, $"Before Task.Run");

        if (configuration.Settings.DeviceTechnology == DeviceTechnology.Alpaca)
        {
            deviceDescription = $"Alpaca {configuration.Settings.DeviceType.GetValueOrDefault(DeviceTypes.Telescope)}: {configuration.Settings.DeviceName} ({configuration.Settings.AlpacaDevice.HostName}:{configuration.Settings.AlpacaDevice.IpPort} - Device {configuration.Settings.AlpacaDevice.AlpacaDeviceNumber})";
        }
        else
        {
            deviceDescription = $"COM {configuration.Settings.DeviceType.GetValueOrDefault(DeviceTypes.Telescope)}: {configuration.Settings.DeviceName}";
        }

        screenLog = configuration.Status;

        switch (configuration.Settings.DeviceType)
        {
            case DeviceTypes.Dome:
                screenLog += $"\r\n\r\nTo protect your equipment and the dome that is controlled by this driver:";
                screenLog += $"\r\n1. The shutter will not open until enabled on the Dome tab in the Settings page. (Currently {(configuration.Settings.DomeOpenShutter? "ENABLED" : "DISABLED")}.)";
                screenLog += $"\r\n1. A stabilisation delay is added after each movement. (Currently {configuration.Settings.DomeStabilisationWaitTime} seconds.)";
                screenLog += $"\r\n   The delay can also be changed on the Dome tab in the Settings page.";
                break;

            case DeviceTypes.Switch:
                screenLog += $"\r\n\r\nTo protect the equipment that is controlled by this Switch driver:";
                screenLog += $"\r\n1. Write tests are disabled until enabled on the Switch tab in the Settings page. (Currently {(configuration.Settings.SwitchEnableSet?"ENABLED":"DISABLED")}.)";
                string readDelay = $"{Convert.ToDouble(configuration.Settings.SwitchReadDelay) / 1000.0:0.0}";
                string writeDelay = $"{Convert.ToDouble(configuration.Settings.SwitchWriteDelay) / 1000.0:0.0}";
                screenLog += $"\r\n2. Delays of {readDelay} second{(readDelay == "1.0" ? "" : "s")} (read) and {writeDelay} second{(writeDelay == "1.0" ? "" : "s")} (write) will be added after each operation.";
                screenLog += $"\r\n   The delays can also be changed on the Switch tab in the Settings page.";
                break;

            default:
                break;
        }

        statusMessage = $"Version {Update.ConformuVersionDisplayString}";
        statusMessage += $"        Running as a {(Environment.Is64BitProcess ? "64bit" : "32bit")} application on {(Environment.Is64BitOperatingSystem? "64bit" : "32bit")} {Environment.OSVersion}";

        // Validate that the application SEMVER string is valid
        if (SemVersion.TryParse(Update.ConformuVersion, SemVersionStyles.AllowV, out SemVersion currentversion))
        {

        }
        else
        {
            screenLog += $"\r\n\r\nINVALID PRODUCT VERSION: {Update.ConformuVersion}";
        }

        conformLogger.LogMessage("Index.OnInitialized", MessageLevel.Debug, $"End");
    }

    void GoToSelectionPage(string buttonName)
    {
        UriHelper.NavigateTo("/DeviceSelection");
    }

    public async void OnUiHasChanged(object sender, EventArgs e)
    {
        await ResizeLogWindow();
    }


    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.Init(JS);
            listener.OnResize += WindowResized;
            await ResizeLogWindow();
        }
    }

    async void StartTest(string buttonName)
    {
        try
        {
            // Set the operation in progress flag and refresh state throughout the page and navigation menu.
            configuration.Settings.OperationInProgress = true;
            configuration.RaiseUiHasChangedEvent();
            StateHasChanged();

            // Validate the supplied configuration and only start if there are no settings issues
            string validationMessage = configuration.Validate();
            if (!string.IsNullOrEmpty(validationMessage)) // There is a configuration issue so present an error message
            {
                // Find the current position of the start button in the viewport
                BoundingClientRectangle result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "StartButton");
                int x = (int)(result.Left);
                int y = (int)(result.Top) + 100;

                // Display the error message left aligned and below the start button
                ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Test Device", Detail = $"Cannot start test: {validationMessage}", Duration = 4000 });

                return;
            }

            // Setting have validated OK so start the test

            // Create a task cancellation token source and cancellation token

            using (cancellationTokenSource = new CancellationTokenSource())
            {
                cancelConformToken = cancellationTokenSource.Token;

                // Create a test manager instance to oversee the test
                using (tester = new ConformanceTestManager(configuration, conformLogger, cancelConformToken))
                {
                    try
                    {
                        conformLogger.MessageLogChanged += OutputChanged;
                        conformLogger.StatusChanged += StatusChanged;
                        conformLogger.Debug = configuration.Settings.Debug;

                        // Clear the screen log
                        screenLog = "";

                        // Create a task to run the conformance test
                        conformanceTestTask = new Task(() =>
                        {
                            try
                            {
                                tester.TestDevice();
                            }
                            catch (Exception ex)
                            {
                                conformLogger.LogMessage("StartTest", MessageLevel.Error, $"Exception: \r\n {ex}");
                            }

                        }, cancelConformToken);

                        // Start the conformance test task
                        conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Starting conformance test");
                        conformanceTestTask.Start();
                        conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Conformance test started OK");

                        // Wait for the task to complete.
                        conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Awaiting conformance task completion");
                        await conformanceTestTask;
                        conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Conformance task completed");

                        tester.Dispose();
                    }
                    finally
                    {
                        conformLogger.MessageLogChanged -= OutputChanged;
                        conformLogger.StatusChanged -= StatusChanged;
                    }
                }
            }
            await JS.InvokeVoidAsync("ScrollToBottom", "ConformLog");
            conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Scroll to bottom completed");

            GC.Collect();
        }
        catch (Exception ex)
        {
            try { conformLogger.LogMessage("INDEX.RAZOR-StartTest", MessageLevel.Error, $"{ex}"); } catch (Exception) { throw; }
            try { Console.WriteLine($"INDEX.RAZOR-StartTest Exception: {ex}"); } catch (Exception) { throw; }
        }
        finally
        {
            configuration.Settings.OperationInProgress = false;
            configuration.RaiseUiHasChangedEvent();
            StateHasChanged();
            try
            {
                await JS.InvokeVoidAsync("ScrollToBottom", "ConformLog");

            }
            catch { }
        }
    }

    void StopTest(string buttonName)
    {
        if (tester is not null)
        {
            conformLogger.LogMessage("StopClick", MessageLevel.Info, $"STOPPING TESTER");
            cancellationTokenSource.Cancel(); // Cancel the Conform run
        }
    }

    /// <summary>
    /// Event handler for messages returned from the tester
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    async public void OutputChanged(object sender, MessageEventArgs e)
    {
        try
        {
            lock (screenLogLockObject)
            {
                screenLog += $"{e.Message}\r\n";  // Add the new log message to the screen display
            }
            await InvokeAsync(StateHasChanged);
            await JS.InvokeVoidAsync("ScrollToBottom", "ConformLog");
        }
        catch { }
    }

    /// <summary>
    /// Event handler for messages returned from the tester
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    public void StatusChanged(object sender, MessageEventArgs e)
    {
        lock (statusLockObject)
        {
            statusMessage = $"{e.Message}";  // Add the new log message to the screen display

            InvokeAsync(StateHasChanged); // Display the updated log on the screen - invoke required because this event handler method could be called by any thread
        }
    }

    #region Log textarea - resize support

    async Task ResizeLogWindow()
    {
        try
        {
            BoundingClientRectangle browserWindowSize = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingWindowRect");
            BrowserWindowSize blazorProWindowSize = new();
            blazorProWindowSize.Width = (int)browserWindowSize.Width;
            blazorProWindowSize.Height = (int)browserWindowSize.Height;

            //conformLogger.LogMessage("ResizeLogWindow", MessageLevel.Debug, $"Width: {blazorProWindowSize.Width}, Height: {blazorProWindowSize.Height}");
            WindowResized(new object(), blazorProWindowSize);
            //conformLogger.LogMessage("ResizeLogWindow", MessageLevel.Debug, $"Method completed");
        }
        catch { }
    }

    // This method will be called when the window resizes.
    // It is ONLY called when the user stops dragging the window's edge. (It is already throttled to protect your app from performance nightmares)
    async void WindowResized(object _, BrowserWindowSize window)
    {
        try
        {
            // Get the browsers's width / height
            // Find the current position of the Conform log text area in the viewport
            BoundingClientRectangle result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "ConformLog");
            if (result is not null)
            {
                screenLogRows = Convert.ToInt32(((Convert.ToDouble(window.Height) - result.Top) / 18.0)) - 5;

                // Hide the status field at small heights
                if (window.Height < 600)
                {
                    statusVisible = "none";
                    screenLogRows += 3;
                }
                else
                {
                    statusVisible = "initial";
                }

                string browser = "";
                browser = await JS.InvokeAsync<string>(identifier: "IdentifyBrowser");

                if (browser.Contains("Firefox", StringComparison.InvariantCultureIgnoreCase)) screenLogRows -= 1;

                //conformLogger.LogMessage("SetScreenLogRows", MessageLevel.Debug, $"Window width: {window.Width}, Window.height: {window.Height}, LogTop: {result.Top}, LogHeight: {result.Height}, ScreenLogRows: {screenLogRows}, Browser: {browser}");
                await InvokeAsync(StateHasChanged); // Display the updated log on the screen - invoke required because this event handler method could be called by any thread
            }

            else
            {
                conformLogger.LogMessage("SetScreenLogRows", MessageLevel.Debug, $"BoundingClientRectangle is NULL - No action taken.");
            }
        }
        catch
        {
            // conformLogger.LogMessage("SetScreenLogRows", $"Exception: \r\n{ex}");
        }
    }

    #endregion

    #region Dispose support

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                listener.OnResize -= WindowResized;
                configuration.UiHasChanged -= OnUiHasChanged;
            }

            disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put clean-up code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    #endregion

    private async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

}
