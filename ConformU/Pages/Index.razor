@page "/"
@implements IDisposable
@using System.Threading
@using ASCOM.Common
@using Semver;
@using System.Security.Principal;
@inject BrowserResizeService _listener
@inject ConformLogger _conformLogger
@inject ConformConfiguration _configuration
@inject ConformStateManager _state
@inject NavigationManager _uriHelper
@inject IJSRuntime JS
@* Radzen services to enable pop-up alerts  and dialogues *@
@inject NotificationService _notificationService
@inject DialogService _dialogService

<h2 style="display: @statusVisible">Welcome to Conform Universal!</h2>

<div>
    <RadzenButton Id="StartButton" Click=@(args => StartTest()) Text="Start" Style="margin-bottom: 20px; margin-right: 20px; width: 130px" IsBusy=@_configuration.Settings.OperationInProgress />
    <RadzenButton Id="StopButton" Click=@(args => StopTest()) Text="Stop" Style="margin-bottom: 20px; margin-right: 20px; width: 130px" Disabled=@(!_configuration.Settings.OperationInProgress) />
    <RadzenButton Id="ConfigureButton" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click=@(args => GoToSelectionPage("ConfigureButton")) Text="Select Device" Style="margin-bottom: 10px; margin-right: 10px; width: 130px;" Disabled=@_configuration.Settings.OperationInProgress />
</div>

<h4>Conform Log</h4>
<RadzenTextArea Id="ConformLog" Style="line-height: 18px; padding-bottom: 0px" Name="_state.ScreenLog" @bind-Value=@_state.ScreenLog Rows="@screenLogRows" Cols="250" ReadOnly=true />

<div style="display :@statusVisible">
    <RadzenTextBox Id="Status" Style="width: 100%; margin-bottom:20px; margin-right:20px; margin-top:8px" @bind-Value=@statusMessage />
</div>

@code {
    private string statusVisible = "initial";
    private bool disposedValue;
    int screenLogRows = 10;
    //string _state.ScreenLog;
    object screenLogLockObject = new object();
    object statusLockObject = new object();
    private string deviceDescription = "";
    string statusMessage = "";

    ConformanceTestManager tester;

    // Task and cancellation support
    Task conformanceTestTask;
    CancellationTokenSource cancellationTokenSource;
    CancellationToken cancelConformToken;

    protected override async void OnInitialized()
    {
        _conformLogger.Debug = _configuration.Settings.Debug;
        _state.UiHasChanged += OnUiHasChanged;
        _conformLogger.LogMessage("Index.OnInitialized", MessageLevel.Debug, $"Before Task.Run");

        if (_configuration.Settings.DeviceTechnology == DeviceTechnology.Alpaca)
        {
            deviceDescription = $"Alpaca {_configuration.Settings.DeviceType.GetValueOrDefault(DeviceTypes.Telescope)}: {_configuration.Settings.DeviceName} ({_configuration.Settings.AlpacaDevice.HostName}:{_configuration.Settings.AlpacaDevice.IpPort} - Device {_configuration.Settings.AlpacaDevice.AlpacaDeviceNumber})";
        }
        else
        {
            deviceDescription = $"COM {_configuration.Settings.DeviceType.GetValueOrDefault(DeviceTypes.Telescope)}: {_configuration.Settings.DeviceName}";
        }
        if (string.IsNullOrEmpty(_state.ScreenLog))
            _state.ScreenLog = _configuration.Status;

        switch (_configuration.Settings.DeviceType)
        {
            case DeviceTypes.Dome:
                _state.ScreenLog += $"\r\n\r\nTo protect your equipment and the dome that is controlled by this driver:";
                _state.ScreenLog += $"\r\n1. The shutter will not open until enabled on the Dome tab in the Settings page. (Currently {(_configuration.Settings.DomeOpenShutter ? "ENABLED" : "DISABLED")}.)";
                _state.ScreenLog += $"\r\n1. A stabilisation delay is added after each movement. (Currently {_configuration.Settings.DomeStabilisationWaitTime} seconds.)";
                _state.ScreenLog += $"\r\n   The delay can also be changed on the Dome tab in the Settings page.";
                break;

            case DeviceTypes.Switch:
                _state.ScreenLog += $"\r\n\r\nTo protect the equipment that is controlled by this Switch driver:";
                _state.ScreenLog += $"\r\n1. Write tests are disabled until enabled on the Switch tab in the Settings page. (Currently {(_configuration.Settings.SwitchEnableSet ? "ENABLED" : "DISABLED")}.)";
                string readDelay = $"{Convert.ToDouble(_configuration.Settings.SwitchReadDelay) / 1000.0:0.0}";
                string writeDelay = $"{Convert.ToDouble(_configuration.Settings.SwitchWriteDelay) / 1000.0:0.0}";
                _state.ScreenLog += $"\r\n2. Delays of {readDelay} second{(readDelay == "1.0" ? "" : "s")} (read) and {writeDelay} second{(writeDelay == "1.0" ? "" : "s")} (write) will be added after each operation.";
                _state.ScreenLog += $"\r\n   The delays can also be changed on the Switch tab in the Settings page.";
                break;

            default:
                break;
        }

        statusMessage = $"Version {Update.ConformuVersionDisplayString}";
        statusMessage += $"        Running as a {(Environment.Is64BitProcess ? "64bit" : "32bit")} application on {(Environment.Is64BitOperatingSystem ? "64bit" : "32bit")} {Environment.OSVersion}";

        // Validate that the application SEMVER string is valid
        if (SemVersion.TryParse(Update.ConformuVersion, SemVersionStyles.AllowV, out SemVersion currentversion))
        {

        }
        else
        {
            _state.ScreenLog += $"\r\n\r\nINVALID PRODUCT VERSION: {Update.ConformuVersion}";
        }

#if WINDOWS

    // Give warning message if running as ADMIN
    using (WindowsIdentity identity = WindowsIdentity.GetCurrent())
    {
    // Determine whether the user is running as admin
    WindowsPrincipal principal = new WindowsPrincipal(identity);
    if (principal.IsInRole(WindowsBuiltInRole.Administrator))
    {
    // Running as admin so show a warning message on the screen
    _state.ScreenLog += ("\r\n\r\n***** CONFORM UNIVERSAL IS RUNNING WITH ADMIN PRIVILEGE!");
    _state.ScreenLog += ("\r\n\r\n***** This increases the risk that malicious individuals will target you and cause havoc in your life.");
    _state.ScreenLog += ("\r\n***** There is no need to run Conform Universal with Admin privilege, the application is fully functional in normal user mode.");
    _state.ScreenLog += ("\r\n***** Please close the application and re-open it in normal user mode.\r\n");
    }
    }

#endif

        // Check whether the risk has already been accepted
        if (!_configuration.Settings.RiskAcknowledged) // Risk has NOT yet been accepted
        {
            // Display the risk acceptance dialogue and retrieve a bool indicating whether the risk was accepted.
            bool accceptsRisk = await Task.Run(AcceptRisk);

            // Exit the application if the risk was not accepted or update the risk flag if it was.
            if (!accceptsRisk) // Risk not accepted so exit the application
                Environment.Exit(0);
            else // Risk accepted so update the acceptance flag.
            {
                _configuration.Settings.RiskAcknowledged = true;
                _configuration.Save();
            }
        }

        _conformLogger.LogMessage("Index.OnInitialized", MessageLevel.Debug, $"End");
    }

    void GoToSelectionPage(string buttonName)
    {
        _uriHelper.NavigateTo("/DeviceSelection");
    }

    public async void OnUiHasChanged(object sender, EventArgs e)
    {
        try
        {
            await ResizeLogWindow();
        }
        catch (Exception ex)
        {
            _conformLogger.LogMessage("Index.OnUiHasChanged", MessageLevel.Error, $"Exception: {ex}.");
            throw;
        }
    }


    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            _listener.Init(JS);
            _listener.OnResize += WindowResized;
            await ResizeLogWindow();
        }
    }

    private async void StartTest()
    {
        try
        {
            // Set the operation in progress flag and refresh _state throughout the page and navigation menu.
            _configuration.Settings.OperationInProgress = true;
            _state.RaiseUiHasChangedEvent();
            StateHasChanged();

            // Validate the supplied _configuration and only start if there are no settings issues
            string validationMessage = _configuration.Validate();
            if (!string.IsNullOrEmpty(validationMessage)) // There is a _configuration issue so present an error message
            {
                // Find the current position of the start button in the viewport
                BoundingClientRectangle result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "StartButton");
                int x = (int)(result.Left);
                int y = (int)(result.Top) + 100;

                // Display the error message left aligned and below the start button
                ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Test Device", Detail = $"Cannot start test: {validationMessage}", Duration = 4000 });

                return;
            }

            // Setting have validated OK so start the test

            // Create a task cancellation token source and cancellation token

            using (cancellationTokenSource = new CancellationTokenSource())
            {
                cancelConformToken = cancellationTokenSource.Token;

                // Create a test manager instance to oversee the test
                using (tester = new ConformanceTestManager(_configuration, _conformLogger, cancellationTokenSource, cancelConformToken))
                {
                    try
                    {
                        _conformLogger.MessageLogChanged += OutputChanged;
                        _conformLogger.StatusChanged += StatusChanged;
                        _conformLogger.Debug = _configuration.Settings.Debug;

                        // Clear the screen log
                        _state.ScreenLog = "";

                        // Create a task to run the conformance test
                        conformanceTestTask = new Task(() =>
        {
    try
    {
        tester.TestDevice();
    }
    catch (Exception ex)
    {
        _conformLogger.LogMessage("StartTest", MessageLevel.Error, $"Exception: \r\n {ex}");
    }

        }, cancelConformToken);

                        // Start the conformance test task
                        _conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Starting conformance test");
                        conformanceTestTask.Start();
                        _conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Conformance test started OK");

                        // Wait for the task to complete.
                        _conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Awaiting conformance task completion");
                        await conformanceTestTask;
                        _conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Conformance task completed");

                        tester.Dispose();
                    }
                    finally
                    {
                        _conformLogger.MessageLogChanged -= OutputChanged;
                        _conformLogger.StatusChanged -= StatusChanged;
                    }
                }
            }
            await JS.InvokeVoidAsync("ScrollToBottom", "ConformLog");
            _conformLogger.LogMessage("StartTest", MessageLevel.Debug, "Scroll to bottom completed");

            GC.Collect();
        }
        catch (Exception ex)
        {
            try { _conformLogger.LogMessage("INDEX.RAZOR-StartTest", MessageLevel.Error, $"{ex}"); } catch (Exception) { throw; }
            try { Console.WriteLine($"INDEX.RAZOR-StartTest Exception: {ex}"); } catch (Exception) { throw; }
        }
        finally
        {
            _configuration.Settings.OperationInProgress = false;
            _state.RaiseUiHasChangedEvent();
            StateHasChanged();
            try
            {
                await JS.InvokeVoidAsync("ScrollToBottom", "ConformLog");

            }
            catch { }
        }
    }

    void StopTest()
    {
        if (tester is not null)
        {
            _conformLogger.LogMessage("StopClick", MessageLevel.Info, $"STOPPING TESTER");
            cancellationTokenSource.Cancel(); // Cancel the Conform run
        }
    }

    private async void ShowNotification(NotificationMessage message)
    {
        _notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task<bool> AcceptRisk()
    {
        bool? result = await _dialogService.OpenAsync("Conform Universal Safety Warning", (ds) =>

    @<RadzenStack Gap="1.5rem">
        <p style="color:red; text-align:center;font-size:x-large">
            <b>
                WARNING
            </b>
        </p>
        <p style="color:red; text-align:center;margin-top:-20px">
            <b>
                Conform will exercise your Astronomy equipment!
            </b>
        </p>
        <p style="color:red; text-align:center;margin-top:-30px">
            <b>
                You are responsible for making sure that this happens safely and doesn't damage the equipment, its environment or bystanders!
            </b>
        </p>
        <p style="color:red; text-align:center;margin-top:-30px">
            <b>
                Do not run Conform unless you are confident that you can do so safely and are able to stop the tests if necessary.
            </b>
        </p>
        <p style="text-align:center">
            <b>
                TELESCOPE and DOME: Conform assumes that telescope and dome devices can move safely to any position in the visible sky. If this is not the case you must not use Conform to test
                these devices.
            </b>
        </p>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Agree" Click="() => ds.Close(true)" Style="width: 80px;" />
            <RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
    </RadzenStack>
    );

        if (result.HasValue)
        {
            return result.Value;
        }
        else
        {
            return false;
        }
    }

    /// <summary>
    /// Event handler for messages returned from the tester
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    public async void OutputChanged(object sender, MessageEventArgs e)
    {
        try
        {
            lock (screenLogLockObject)
            {
                _state.ScreenLog += $"{e.Message}\r\n";  // Add the new log message to the screen display
            }
            await InvokeAsync(StateHasChanged);
            await JS.InvokeVoidAsync("ScrollToBottom", "ConformLog");
        }
        catch { }
    }

    /// <summary>
    /// Event handler for messages returned from the tester
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    public void StatusChanged(object sender, MessageEventArgs e)
    {
        lock (statusLockObject)
        {
            statusMessage = $"{e.Message}";  // Add the new log message to the screen display

            InvokeAsync(StateHasChanged); // Display the updated log on the screen - invoke required because this event handler method could be called by any thread
        }
    }

    #region Log textarea - resize support

    async Task ResizeLogWindow()
    {
        try
        {
            BoundingClientRectangle browserWindowSize = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingWindowRect");
            BrowserWindowSize blazorProWindowSize = new();
            blazorProWindowSize.Width = (int)browserWindowSize.Width;
            blazorProWindowSize.Height = (int)browserWindowSize.Height;

            //_conformLogger.LogMessage("ResizeLogWindow", MessageLevel.Debug, $"Width: {blazorProWindowSize.Width}, Height: {blazorProWindowSize.Height}");
            WindowResized(new object(), blazorProWindowSize);
            //_conformLogger.LogMessage("ResizeLogWindow", MessageLevel.Debug, $"Method completed");
        }
        catch { }
    }

    // This method will be called when the window resizes.
    // It is ONLY called when the user stops dragging the window's edge. (It is already throttled to protect your app from performance nightmares)
    async void WindowResized(object _, BrowserWindowSize window)
    {
        try
        {
            // Get the browsers's width / height
            // Find the current position of the Conform log text area in the viewport
            BoundingClientRectangle result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "ConformLog");
            if (result is not null)
            {
                screenLogRows = Convert.ToInt32(((Convert.ToDouble(window.Height) - result.Top) / 18.0)) - 5;

                // Hide the status field at small heights
                if (window.Height < 600)
                {
                    statusVisible = "none";
                    screenLogRows += 3;
                }
                else
                {
                    statusVisible = "initial";
                }

                string browser = "";
                browser = await JS.InvokeAsync<string>(identifier: "IdentifyBrowser");

                if (browser.Contains("Firefox", StringComparison.InvariantCultureIgnoreCase)) screenLogRows -= 1;

                //_conformLogger.LogMessage("Set_state.ScreenLogRows", MessageLevel.Debug, $"Window width: {window.Width}, Window.height: {window.Height}, LogTop: {result.Top}, LogHeight: {result.Height}, _state.ScreenLogRows: {_state.ScreenLogRows}, Browser: {browser}");
                await InvokeAsync(StateHasChanged); // Display the updated log on the screen - invoke required because this event handler method could be called by any thread
            }

            else
            {
                _conformLogger.LogMessage("screenLogRows", MessageLevel.Debug, $"BoundingClientRectangle is NULL - No action taken.");
            }
        }
        catch
        {
            // _conformLogger.LogMessage("Set_state.ScreenLogRows", $"Exception: \r\n{ex}");
        }
    }

    #endregion

    #region Dispose support

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                _listener.OnResize -= WindowResized;
                _state.UiHasChanged -= OnUiHasChanged;
            }

            disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put clean-up code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    #endregion

}
