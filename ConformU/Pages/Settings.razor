@page "/Settings"
@using ASCOM
@using ASCOM.Common.Alpaca
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@inject ConformStateManager state
@inject NotificationService notificationService

@*Title and settings reset button*@
<div class="row">
    <h2>Settings</h2>
    <RadzenButton Click=@(args => OnResetButtonClick()) Text="Reset to Defaults" Style="margin-bottom: 20px; position: absolute; right: 30px;" />
</div>

@*Status message*@
<div>
    <p style="margin-top: 20px">
        <b>Status:</b>   @status
    </p>
</div>

@*Configuration tabs*@
<RadzenTabs Change=@OnTabChange style="height: 820px;margin-top:20px; width:auto; height: auto" RenderMode="TabRenderMode.Client">
    <Tabs>

        @*Conform configuration*@
        <RadzenTabsItem Text="Conform">
            <div class="row" style="margin-top: 10px">
                <RadzenCard Style="margin-bottom: 20px; margin-right: 20px">
                    <h4 style="color: #479cc8; margin-bottom: 0;">Test Scope</h4>
                    <RadzenCheckBoxList @bind-Value=@conformanceTestScope TValue="int" Orientation="Orientation.Vertical" Change=@(args => OnConformTestScopeChange(args))>
                        <Items>
                            <RadzenCheckBoxListItem Text="Test Properties" Value="0" />
                            <RadzenCheckBoxListItem Text="Test Methods" Value="1" />
                            <RadzenCheckBoxListItem Text="Test Performance" Value="2" />
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenCard>

                <RadzenCard Style="margin-bottom:20px;margin-right: 20px">
                    <h4 style="color: #479cc8; margin-bottom: 0;">Operation</h4>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Style="margin-top:6px;" Name="CHECKFORUPDATES" @bind-Value=@checkForUpdates TValue="bool" Change=@(args =>
                                        OnCheckboxChange(args, CheckBoxConfigurationItem.UpdateCheck)) />
                        <RadzenLabel Text="Check for updates" Component="CHECKFORUPDATES" Style="margin-top:6px; margin-left: 5px;margin-right:5px;" />
                    </div>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Name="DISPLAYMETHODCALLS" @bind-Value=@displayMethodCalls TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DisplayCalls)) />
                        <RadzenLabel Text="Display method calls" Component="DISPLAYMETHODCALLS" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="ENABLEDEBUGLOGGING" @bind-Value=@enableDebugLogging TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.Debug)) />
                        <RadzenLabel Text="Debug enabled" Component="ENABLEDEBUGLOGGING" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="GOHOME" @bind-Value=@goHomeOnDeviceSelection TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.GoHomeOnDeviceSelection)) />
                        <RadzenLabel Text="Return to home page when device is selected" Component="GOHOME" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px; display:@(isWindowsOs?"Block":"None")">
                        <RadzenCheckBox Name="APPBITNESS" @bind-Value=@runAs32Bit TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.RunAs32Bit)) />
                        <RadzenLabel Text="Run as 32bit on a 64bit OS ====> Takes effect on restart" Component="APPBITNESS" Style="margin-left: 5px;" />
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; margin-top:15px; width: 6em"
                                       Format="0.0"
                        @bind-Value="waitTimeBeforeConformApplicationExits"
                                       Step="0.1"
                                       TValue="double"
                                       Min="0.1M"
                                       Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.waitTimeBeforeConformApplicationExits)) />
                        <p style="margin-left: 5px;margin-top: 10px;">
                            Time before application closes (Default: 2 Seconds)
                            <br />
                            (Changes require the application to be restarted)
                        </p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; margin-top:15px; width: 6em"
                                       Format="0"
                        @bind-Value="applicationPort"
                                       Step="1"
                                       TValue="int"
                                       Min="0M"
                                       Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ApplicationPort)) />
                        <p style="margin-left: 5px;margin-top: 10px;">
                            Application IP Port (Default: 0 = dynamic allocation)
                            <br />
                            (Changes require the application to be restarted)
                        </p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; margin-top:15px; width: 6em"
                                       Format="0"
                        @bind-Value="connectDisconnectTimeout"
                                       Step="1"
                                       TValue="int"
                                       Min="1M"
                                       Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ConnectDisconnectTimeout)) />
                        <p style="margin-left: 5px;margin-top: 20px;">
                            Device Connect / Disconnect timeout (seconds)
                        </p>
                    </div>

                </RadzenCard>

                <RadzenCard Style="margin-bottom:20px">
                    <h4 style="color: #479cc8; margin-bottom: 0;">Additional Tracing</h4>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKTRACEDISCOVERY"
                        @bind-Value=@chkTraceDiscovery
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceDiscovery)) />
                        <RadzenLabel Text="Trace discovery" Component="CHKTRACEDISCOVERY" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKTRACEALPACA"
                        @bind-Value=@chkTraceAlpacaCalls
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceAlpacaCalls)) />
                        <RadzenLabel Text="Trace Alpaca calls" Component="CHKTRACEALPACA" Style="margin-left: 5px;" />
                    </div>
                </RadzenCard>

            </div>
        </RadzenTabsItem>

        @*Alpaca and COM configuration*@
        <RadzenTabsItem Text=@alpacaAndComText>
            <div class="row" style="margin-top: 10px">
                <RadzenCard Style="width:510px; margin-left: 10px; margin-bottom: 20px;  margin-right: 20px">
                    <h4 style="color: #479cc8; margin-bottom: 0;">Alpaca Discovery and Access</h4>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKDISCOVERYENABLED" @bind-Value=@alpacaDiscoveryEnabled TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DiscoveryEnabled)) />
                        <RadzenLabel Text="Enable Alpaca discovery" Component="CHKDISCOVERYENABLED" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top: 15px">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em"
                        @bind-Value="alpacaNumberOfDiscoveryPolls"
                                       TValue="int"
                                       Min="1"
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.AlpacaNumberOfDiscoveryPolls)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Number of discovery polls (Default 1)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em "
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       Format="0.0"
                        @bind-Value="alpacaDiscoveryPollInterval"
                                       Step="0.1"
                                       TValue="double"
                                       Min="0.1M"
                                       Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.AlpacaDiscoveryPollInterval)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Interval between polls (Seconds - default 1.0)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em "
                                       Disabled=@(!alpacaDiscoveryEnabled)
                        @bind-Value="alpacaDiscoveryPort"
                                       TValue="int"
                                       Min="1"
                                       Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.AlpacaDiscoveryPort)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Alpaca discovery port (Default 32227)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em"
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       Format="0.0"
                        @bind-Value="alpacaDiscoveryDuration"
                                       Step="0.1"
                                       TValue="double"
                                       Min="0.1M"
                                       Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.AlpacaDiscoveryDuration)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Discovery duration (Seconds - default 1.0)</p>
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenDropDown @bind-Value=@alpacaServiceType
                                        Disabled=@(!alpacaDiscoveryEnabled)
                                        Style="width:8em"
                                        Data="serviceTypeOptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ServiceType"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Name="DROP1"
                                        Change=@(args => OnServiceTypeChange(args)) />
                        <RadzenLabel Text="Service type (Default HTTP)" Component="DROP1" Style="margin-left: 20px;margin-top:5px" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKUSEIPV4"
                                        Disabled=@(!alpacaDiscoveryEnabled)
                        @bind-Value=@alpacaDiscoveryUseIpV4
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV4)) />
                        <RadzenLabel Text="Use IPv4 (Default Yes)" Component="CHKUSEIPV4" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKUSEIPV6"
                                        Disabled=@(!alpacaDiscoveryEnabled)
                        @bind-Value=@alpacaDiscoveryUseIpV6
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV6)) />
                        <RadzenLabel Text="Use IPv6 (Default No)" Component="CHKUSEIPV6" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKRESOLVEDNSNAMES"
                                        Disabled=@(!alpacaDiscoveryEnabled)
                        @bind-Value=@alpacaDiscoveryResolveName
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryResolveName)) />
                        <RadzenLabel Text="Resolve DNS names (Default No)" Component="CHKRESOLVEDNSNAMES" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKSTRICTCASING"
                        @bind-Value=@strictCasing
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.StrictCasing)) />
                        <RadzenLabel Text="Use strict JSON casing (Only unset this for testing)" Component="CHKSTRICTCASING" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKUSERCERTIFICATES"
                        @bind-Value=@chkTrustUserGeneratedSslCertificates
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TrustUserGeneratedSslCertificates)) />
                        <RadzenLabel Text="Trust user generated SSL certificates." Component="CHKUSERCERTIFICATES" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenDropDown @bind-Value=@alpacaImageArrayTransferType
                                        Style="width:11em"
                                        Data="imageArrayTypeOptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ImageArrayTransferType"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Name="DROP2"
                                        Change=@(args => OnImageArrayTypeChange(args)) />
                        <RadzenLabel Text="Image array transfer type (Default JSON)" Component="DROP2" Style="margin-left: 20px;margin-top:5px" />
                    </div>
                    <p>&nbsp;</p>
                    <h4 style="color: #479cc8;">Check Alpaca Protocol</h4>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKSTRICTCHECKS" @bind-Value=@chkProtocolStrictChecks TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.ProtocolStrictChecks)) />
                        <RadzenLabel Text="Strict ID casing checks" Component="CHKSTRICTCHECKS" Style="margin-left: 20px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKTESTPRIMARYURLSTRUCTURE" @bind-Value=@chkProtocolTestPrimaryUrlStructure TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.ProtocolTestPrimaryUrlStructure)) />
                        <RadzenLabel Text="Test primary URL structure" Component="CHKTESTPRIMARYURLSTRUCTURE" Style="margin-left: 20px;" />
                    </div>


                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenDropDown @bind-Value=@protocolMessageLevel
                                        Style="width:15em"
                                        Data="protocolMessageLevels"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ProtocolMessageLevel"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Name="DROP2"
                                        Change=@(args => OnMessageLevelChange(args)) />
                        <RadzenLabel Text="Message display level" Component="DROP2" Style="margin-left: 20px;margin-top:5px" />
                    </div>



                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKSHOWSUCCESSRESPONSES" Disabled=false @bind-Value=@chkProtocolShowSuccessResponses TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.ProtocolShowSuccessResponses)) />
                        <RadzenLabel Text="Show JSON responses for OK messages" Component="CHKSHOWSUCCESSRESPONSES" Style="margin-left: 20px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHRREPORTNOTIMPLEMENTED" @bind-Value=@chkProtocolReportNotImplementedErrors TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.ProtocolReportNotImplementedErrors)) />
                        <RadzenLabel Text="Report ASCOM not implemented errors" Component="CHRREPORTNOTIMPLEMENTED" Style="margin-left: 20px;" />
                    </div>
                </RadzenCard>

                @if (OperatingSystem.IsWindows())
                {
                    <div class="row" style="margin-left: 0px">
                        <RadzenCard Visible="@isWindowsOs" Style="margin-left: 10px; width: 300px; margin-bottom: 20px;">
                            <h4 style="color: #479cc8">COM Access Mechanic</h4>
                            <RadzenDropDown @bind-Value=@comAccessMechanic
                                            Style="width:245px"
                                            Data="comAccessMechanicoptions"
                                            TextProperty="Key"
                                            ValueProperty="Value"
                                            TValue="ComAccessMechanic"
                                            AllowClear="false"
                                            Multiple="false"
                                            MaxSelectedLabels="1"
                                            Change=@(args => OnComAccessModeChange(args)) />

                        </RadzenCard>
                    </div>
                }
            </div>
        </RadzenTabsItem>

        @*Telescope configuration*@
        <RadzenTabsItem Text="Telescope">
            <div class="row">
                <RadzenCard Style="margin-left: 10px;padding-bottom:5px;margin-right: 10px;margin-bottom: 20px">
                    <h4 style="margin-top: 5px; color: #479cc8">Select which tests Conform should perform.</h4>

                    <div class="row" style="margin-top:0px;">
                        <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(true)) Text="Check all" Style="margin-left: 20px; " />
                        <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(false)) Text="Uncheck all" Style="margin-left: 20px; " />
                    </div>

                    <RadzenCheckBoxList @bind-Value=@telescopeTests
                                        Style="margin-top:10px;margin-bottom: 0px"
                                        TValue="string"
                                        Orientation="Orientation.Vertical"
                                        Change=@(args => OnTelescopeTestsChange(args))>
                        <Items>
                            @foreach (var item in settings.TelescopeTests)
                            {
                                <RadzenCheckBoxListItem Text="@item.Key" Value="@item.Key" />
                            }
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenCard>

                <RadzenCard Style="margin-left: 10px;padding-bottom:5px;margin-right: 10px;margin-bottom: 20px">
                    <h4 style="margin-top: 5px; color: #479cc8">Further configuration.</h4>
                    <div class="row">

                        <RadzenCheckBox Name="TELEFIRSTUSETESTS"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@telescopeFirstUseTests
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TelescopeFirstUseTests)) />
                        <RadzenLabel Text="Enable first time use tests (Target RA/DEC throw exceptions if not set.)"
                                     Component="TELEFIRSTUSETESTS"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="TELESCOPESLEWTOLERANCE"
                                       Style="margin-top: 20px; margin-left:20px; width: 6em"
                                       Format="0.00"
                        @bind-Value="@telescopeSlewTolerance"
                                       TValue="double"
                                       Min="0.0m"
                                       Step="0.1"
                                       Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.TelescopeSlewTolerance)) />
                        <RadzenLabel Text="Telescope slew accuracy tolerance (Default 10 arc-seconds)"
                                     Component="TELESCOPESLEWTOLERANCE"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="TELESCOPEMAXSLEWTIME"
                                       Style="margin-top: 20px;  margin-left:20px; width: 6em"
                                       Format="0"
                        @bind-Value="@telescopeMaximumSlewTime"
                                       TValue="int"
                                       Min="0"
                                       Step="1"
                                       Change=@(args => OnIntegerItemChange(args, NumericConfigurationItem.TelescopeMaximumSlewTime)) />
                        <RadzenLabel Text="Maximum time before telescope slews time out (seconds)"
                                     Component="TELESCOPEMAXSLEWTIME"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>

                    <div class="row">

                        <RadzenCheckBox Name="TELESIDEOFPIERREAD"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@chkSideOfPierRead
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.SideOfPierRead)) />
                        <RadzenLabel Text="Enable extended side of pier read tests"
                                     Component="TELESIDEOFPIERREAD"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenCheckBox Name="TELESIDEOFPIERWRITE"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@chkSideOfPierWrite
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.SideOfPierWrite)) />
                        <RadzenLabel Text="Enable extended side of pier write tests"
                                     Component="TELESIDEOFPIERWRITE"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenCheckBox Name="EXTENDEDRATEOFFSETTESTS"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@chkExtendedRateOffsetTests
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TelescopeExtendedRateOffsetTests)) />
                        <RadzenLabel Text="Enable extended rate offset tests"
                                     Component="EXTENDEDRATEOFFSETTESTS"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="RATEOFFSETTESTDURATION"
                                       Style="margin-top: 20px; margin-left:20px; width: 6em"
                                       Format="0.0"
                        @bind-Value="@telescopeRateOffsetTestDuration"
                                       TValue="double"
                                       Min="1.0m"
                                       Max="3600"
                                       Step="0.1"
                                       Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.TelescopeRateOffsetTestDuration)) />
                        <RadzenLabel Text="Extended rate offset test duration (seconds)"
                                     Component="RATEOFFSETTESTDURATION"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="RATEOFFSETTESTVALUELOW"
                                       Style="margin-top: 20px; margin-left:20px; width: 6em"
                                       Format="0.000"
                        @bind-Value="@telescopeRateOffsetTestValueLow"
                                       TValue="double"
                                       Min="0.001m"
                                       Max="9999"
                                       Step="0.1"
                                       Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.TelescopeRateOffsetTestValueLow)) />
                        <RadzenLabel Text="Extended rate offset test value low (arc-seconds per second)"
                                     Component="RATEOFFSETTESTDURATION"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="RATEOFFSETTESTVALUEHIGH"
                                       Style="margin-top: 20px; margin-left:20px; width: 6em"
                                       Format="0.000"
                                       @bind-Value="@telescopeRateOffsetTestValueHigh"
                                       TValue="double"
                                       Min="0.001m"
                                       Max="9999"
                                       Step="0.1"
                                       Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.TelescopeRateOffsetTestValueHigh)) />
                        <RadzenLabel Text="Extended rate offset test value high (arc-seconds per second)"
                                     Component="RATEOFFSETTESTDURATION"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenCheckBox Name="EXTENDEDPULSEGUIDETESTS"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@chkExtendedPulseGuideTests
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TelescopeExtendedPulseGuideTests)) />
                        <RadzenLabel Text="Enable extended guide rate tests"
                                     Component="EXTENDEDPULSEGUIDETESTS"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="TELESCOPEPULSEGUIDETOLERANCE"
                                       Style="margin-top: 20px; margin-left:20px; width: 6em"
                                       Format="0"
                        @bind-Value="@telescopePulseGuideTolerance"
                                       TValue="double"
                                       Min="1"
                                       Max="10"
                                       Step="1"
                                       Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.TelescopePulseGuideTolerance)) />
                        <RadzenLabel Text="Pulse guide movement tolerance (Default 1, Max 10 arc-seconds)."
                                     Component="TELESCOPEPULSEGUIDETOLERANCE"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenCheckBox Name="EXTENDEDMOVEAXISTESTS"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@chkExtendedMoveAxisTests
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TelescopeExtendedMoveAxisTests)) />
                        <RadzenLabel Text="Enable extended move axis tests"
                                     Component="EXTENDEDMOVEAXISTESTS"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenCheckBox Name="EXTENDEDSITETESTS"
                                        Style="margin-top:20px;margin-left:20px"
                        @bind-Value=@chkExtendedSiteTests
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TelescopeExtendedSiteTests)) />
                        <RadzenLabel Text="Enable extended Site property tests"
                                     Component="EXTENDEDSITETESTS"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                </RadzenCard>
            </div>
        </RadzenTabsItem>

        @*Camera configuration*@
        <RadzenTabsItem Text="Camera">
            <h4 style="margin-top: 10px">Exposure Settings</h4>
            <p>By default Conform will test camera imaging at all bin values reported by the camera through MaxBinX and MaxBinY. If required, the test range can be limited using the settings below.</p>

            <div style="margin-top:10px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinX" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraMaxBinX)) />
                <p style="margin-left: 20px;margin-top: 5px;">Max BinX for testing. (Zero tests all available bin values.)</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinY" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraMaxBinY)) />
                <p style="margin-left: 20px;margin-top: 5px;">Max BinY for testing. (Zero tests all available bin values.)</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" Format="0.00" @bind-Value="cameraExposureDuration" TValue="double" Min="1.0m" Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.CameraExposureDuration)) />
                <p style="margin-left: 20px;margin-top: 5px;">Test exposure duration (seconds)</p>
            </div>

            <h4 style="margin-top: 20px">First Use Tests</h4>
            <p>
                By default, Conform will test the camera assuming that it has just been started and has not taken any images.
                Uncheck the checkbox below to suppress issues flagged by these first use checks.
            </p>
            <div class="row">
                <RadzenCheckBox Name="CHKFIRSTUSETESTS"
                                Style="margin-left:20px"
                @bind-Value=@cameraFirstUseTests
                                TValue="bool"
                                Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.CameraFirstUseTests)) />
                <RadzenLabel Text="Enable first time use tests"
                             Component="CHKFIRSTUSETESTS"
                             Style="margin-left: 20px;" />
            </div>

            <h4 style="margin-top: 40px">Miscellaneous Configuration</h4>
            <div class="row">
                <RadzenCheckBox Name="CHKTESTIMAGEARRAYVARIANT"
                                Style="margin-left:20px"
                @bind-Value=@cameraTestImageArrayVariant
                                TValue="bool"
                                Change=@(args => OnBoolItemChange(args, BoolConfigurationItem.TestImageArrayVariant)) />
                <RadzenLabel Text="Test ImageArrayVariant property"
                             Component="CHKTESTIMAGEARRAYVARIANT"
                             Style="margin-left: 20px;" />
            </div>

            <div class="row" style="margin-top: 20px">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraXMax" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraXMax)) />
                <p style="margin-left: 20px;margin-top: 5px;">Maximum image X size for StartExposure tests. Set to zero to use the value determined by the camera's configuration.</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraYMax" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraYMax)) />
                <p style="margin-left: 20px;margin-top: 5px;">Maximum image Y size for StartExposure tests. Set to zero to use the value determined by the camera's configuration.</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraWaitTimeout" TValue="int" Min="1" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraWaitTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Image ready timeout (seconds)</p>
            </div>

        </RadzenTabsItem>

        @*Dome configuration*@
        <RadzenTabsItem Text="Dome">
            <h4 style="margin-top: 10px">Timeouts</h4>
            <p>These settings control how long Conform waits for actions to complete before reporting a timeout.</p>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeShutterTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeShutterTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Shutter movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeAzimuthTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeAzimuthTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Azimuth movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeAltitudeTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeAltitudeTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Altitude movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeStabilisationWaitTime" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeStabilisationWaitTime)) />
                <p style="margin-left: 20px;margin-top: 5px;">Movement stabilisation wait time</p>
            </div>

            <h4 style="margin-top: 20px">Dome Safety</h4>
            <p>By default commands to open the dome shutter will be suppressed to protect observing equipment. For a full conformance check, the dome must be permitted to open its shutter.</p>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKOPENSHUTTER" @bind-Value=@domeOpenShutter TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DomeOpenShutter)) />
                <RadzenLabel Text="Allow dome to open during testing." Component="CHKOPENSHUTTER" Style="margin-left: 5px;" />
            </div>

            <h4 style="margin-top: 40px">Miscellaneous Configuration</h4>
            <div class="row">
                <RadzenNumeric Name="DOMESLEWTOLERANCE"
                               Style="margin-left: 20px; width: 6em"
                               Format="0.00"
                @bind-Value="@domeSlewTolerance"
                               TValue="double"
                               Min="0.0m"
                               Step="0.1"
                               Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.DomeSlewtolerance)) />
                <RadzenLabel Text="Dome slew accuracy tolerance (degrees))"
                             Component="DOMESLEWTOLERANCE"
                             Style="margin-left: 20px; margin-top: 6px; margin-right: 26px" />
            </div>
        </RadzenTabsItem>

        @*Filter wheel configuration*@
        <RadzenTabsItem Text="Filter Wheel">
            <h4 style="margin-top: 10px">Timeouts</h4>
            <p>This setting controls how long Conform waits for movement to complete before reporting a timeout.</p>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="filterWheelTimeout" TValue="int" Min="1" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.FilterWheelTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Filter wheel move completion timeout (seconds).</p>
            </div>
        </RadzenTabsItem>

        @*Focuser configuration*@
        <RadzenTabsItem Text="Focuser">
            <h4 style="margin-top: 10px">Timeouts</h4>
            <p>These settings control how long Conform waits for actions to complete before reporting a timeout.</p>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="focuserTimeout" TValue="int" Min="10" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.FocuserTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Focuser move completion timeout (seconds).</p>
            </div>
            <h4 style="margin-top: 20px">Miscellaneous Configuration</h4>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="focuserMoveTolerance" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.focuserMoveTolerance)) />
                <p style="margin-left: 20px;margin-top: 5px;">± Tolerance within which a focuser move is reported as OK (Position count).</p>
            </div>
        </RadzenTabsItem>

        @*ObservingConditions configuration*@
        <RadzenTabsItem Text="ObservingConditions">
            <h4 style="margin-top: 10px">Timeouts</h4>
            <p>These settings control how long Conform waits for actions to complete before reporting a timeout.</p>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="observingConditionsMaxRetries" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ObservingConditionsMaxRetries)) />
                <p style="margin-left: 20px;margin-top: 5px;">Number of attempts to read a property when an invalid operation is reported.</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="observingConditionsRetryTime" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ObservingConditionsRetryTime)) />
                <p style="margin-left: 20px;margin-top: 5px;">Wait time between invalid operation retries.</p>
            </div>
        </RadzenTabsItem>

        @*Rotator configuration*@
        <RadzenTabsItem Text="Rotator">
            <h4 style="margin-top: 10px">Timeouts</h4>
            <p>These settings control how long Conform waits for actions to complete before reporting a timeout.</p>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="rotatorTimeout" TValue="int" Min="10" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.RotatorTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Rotator move completion timeout (seconds).</p>
            </div>
        </RadzenTabsItem>

        @*Switch configuration*@
        <RadzenTabsItem Text="Switch">
            <h4 style="margin-top: 10px">Timeouts</h4>
            <p>These settings control the maximum time to wait for an asynchrous operation to complete and how much delay is added after reading or writing a switch so that it can settle.</p>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchAsyncTimeout" TValue="int" Min="1" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchAsyncTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch asynchronous operation timeout (seconds).</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchReadDelay" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchReadDelay)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch read delay (ms).</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchWriteDelay" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchWriteDelay)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch write delay (ms).</p>
            </div>

            <h4 style="margin-top: 20px">Switch Safety</h4>
            <p>By default, switch Set tests are disabled, check this box to enable switches to be set.</p>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKSWITCHEXTENDEDTESTRANGE" @bind-Value=@switchEnableSet TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.SwitchEnableSet)) />
                <RadzenLabel Text="Allow switches to be set and changed." Component="CHKSWITCHEXTENDEDTESTRANGE" Style="margin-left: 5px;" />
            </div>

            <h4 style="margin-top: 20px">Miscellaneous Configuration</h4>
            <p>This setting controls how far Conform tests for working switches outside the configured range 1 ==> MaxSwitch. Tests will be conducted in the ranges (-XXX ==> 0) and (MaxSwitch + 1 ==> +XXX).</p>

            <div style="margin-top:0px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchExtendedNumberTestRange" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchExtendedNumberTestRange)) />
                <p style="margin-left: 20px;margin-top: 5px;">Extended switch number test range.</p>
            </div>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKSWITCHTESTOFFSETS" @bind-Value=@switchTestOffsets TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.SwitchTestOffsets)) />
                <RadzenLabel Text="Include switch offset tests." Component="CHKSWITCHTESTOFFSETS" Style="margin-left: 5px;" />
            </div>
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>
<div>
    <p style="margin-top: 20px">
        <b>Settings file:</b>   @configuration.SettingsFileName
    </p>
</div>

@code {
    private ConformU.Settings settings;

    // Conform general configuration
    private IEnumerable<int> conformanceTestScope = new List<int>() { 0, 1, 2, 3 };
    private bool checkForUpdates;
    private bool displayMethodCalls;
    private bool enableDebugLogging;
    private string alpacaAndComText;
    private bool goHomeOnDeviceSelection;
    private int applicationPort;
    private double waitTimeBeforeConformApplicationExits;
    private bool runAs32Bit;
    private List<KeyValuePair<string, ComAccessMechanic>> comAccessMechanicoptions = new()
        {
            new KeyValuePair<string, ComAccessMechanic>("Native", ComAccessMechanic.Native),
            new KeyValuePair<string, ComAccessMechanic>("Driver Access", ComAccessMechanic.DriverAccess)
        };
    private List<KeyValuePair<string, ServiceType>> serviceTypeOptions = new()
        {
            new KeyValuePair<string, ServiceType>("HTTP", ServiceType.Http),
            new KeyValuePair<string, ServiceType>("HTTPS", ServiceType.Https)
        };
    private List<KeyValuePair<string, ProtocolMessageLevel>> protocolMessageLevels = new()
        {
            new KeyValuePair<string, ProtocolMessageLevel>("Issue, Information and OK", ProtocolMessageLevel.All),
            new KeyValuePair<string, ProtocolMessageLevel>("Issue and Information", ProtocolMessageLevel.Information),
            new KeyValuePair<string, ProtocolMessageLevel>("Issue", ProtocolMessageLevel.Issue)
        };
    private bool isWindowsOs;
    private int connectDisconnectTimeout;

    // Alpaca and COM configuration
    private int alpacaNumberOfDiscoveryPolls;
    private double alpacaDiscoveryPollInterval;
    private int alpacaDiscoveryPort;
    private double alpacaDiscoveryDuration;
    public bool alpacaDiscoveryResolveName;
    public bool alpacaDiscoveryUseIpV4;
    public bool alpacaDiscoveryUseIpV6;
    private ServiceType alpacaServiceType;
    private bool alpacaDiscoveryEnabled = true;
    private bool strictCasing;
    private bool chkTraceDiscovery;
    private bool chkTraceAlpacaCalls;
    private ComAccessMechanic comAccessMechanic = ComAccessMechanic.Native;
    private bool chkProtocolShowSuccessResponses;
    private bool chkProtocolReportNotImplementedErrors;
    private bool chkProtocolTestPrimaryUrlStructure;
    private bool chkTrustUserGeneratedSslCertificates;
    private bool chkProtocolStrictChecks;
    private ProtocolMessageLevel protocolMessageLevel;

    // Camera test configuration
    private int cameraXMax;
    private int cameraYMax;
    private int cameraWaitTimeout;
    private int cameraTestMaxBinX;
    private int cameraTestMaxBinY;
    private bool cameraFirstUseTests = false;
    private bool cameraTestImageArrayVariant;
    private ImageArrayTransferType alpacaImageArrayTransferType;
    private double cameraExposureDuration;
    private List<KeyValuePair<string, ImageArrayTransferType>> imageArrayTypeOptions = new()
        {
            new KeyValuePair<string, ImageArrayTransferType>("JSON", ImageArrayTransferType.JSON),
            new KeyValuePair<string, ImageArrayTransferType>("Base64HandOff", ImageArrayTransferType.Base64HandOff),
            new KeyValuePair<string, ImageArrayTransferType>("ImageBytes", ImageArrayTransferType.ImageBytes),
            new KeyValuePair<string, ImageArrayTransferType>("Best available", ImageArrayTransferType.BestAvailable)
        };

    // Dome test configuration
    private int domeShutterTimeout;
    private int domeAzimuthTimeout;
    private int domeAltitudeTimeout;
    private int domeStabilisationWaitTime;
    private bool domeOpenShutter;
    private double domeSlewTolerance;

    // Filter wheel configuration
    private int filterWheelTimeout;

    // Focuser test configuration
    private int focuserTimeout;
    private int focuserMoveTolerance;

    // ObservingConditions test configuration
    private int observingConditionsRetryTime;
    private int observingConditionsMaxRetries;

    // Rotator test configuration
    private int rotatorTimeout;

    // Switch test configuration
    private bool switchEnableSet;
    private int switchReadDelay;
    private int switchWriteDelay;
    private int switchExtendedNumberTestRange;
    private int switchAsyncTimeout;
    private bool switchTestOffsets;

    // Telescope test configuration
    private IEnumerable<string> telescopeTests;
    private string status;
    private bool telescopeFirstUseTests = false;
    private double telescopeSlewTolerance;
    private int telescopeMaximumSlewTime;
    private bool chkSideOfPierRead;
    private bool chkSideOfPierWrite;
    private bool chkExtendedRateOffsetTests;
    private bool chkExtendedPulseGuideTests;
    private double telescopePulseGuideTolerance;
    private bool chkExtendedMoveAxisTests;
    private bool chkExtendedSiteTests;
    private double telescopeRateOffsetTestDuration;
    private double telescopeRateOffsetTestValueLow;
    private double telescopeRateOffsetTestValueHigh;

    #region Enums

    private enum NumericConfigurationItem
    {
        AlpacaNumberOfDiscoveryPolls,
        AlpacaDiscoveryPollInterval,
        AlpacaDiscoveryPort,
        AlpacaDiscoveryDuration,
        ApplicationPort,
        CameraMaxBinX,
        CameraMaxBinY,
        CameraExposureDuration,
        CameraWaitTimeout,
        CameraXMax,
        CameraYMax,
        ConnectDisconnectTimeout,
        waitTimeBeforeConformApplicationExits,
        DomeShutterTimeout,
        DomeAzimuthTimeout,
        DomeAltitudeTimeout,
        DomeSlewtolerance,
        DomeStabilisationWaitTime,
        FilterWheelTimeout,
        FocuserTimeout,
        focuserMoveTolerance,
        ObservingConditionsRetryTime,
        ObservingConditionsMaxRetries,
        RotatorTimeout,
        SwitchReadDelay,
        SwitchWriteDelay,
        SwitchAsyncTimeout,
        SwitchExtendedNumberTestRange,
        TelescopePulseGuideTolerance,
        TelescopeSlewTolerance,
        TelescopeMaximumSlewTime,
        TelescopeRateOffsetTestDuration,
        TelescopeRateOffsetTestValueLow,
        TelescopeRateOffsetTestValueHigh
    }

    private enum CheckBoxConfigurationItem
    {
        Debug,
        AlpacaDiscoveryResolveName,
        AlpacaDiscoveryUseIpV4,
        AlpacaDiscoveryUseIpV6,
        CameraFirstUseTests,
        DisplayCalls,
        DiscoveryEnabled,
        DomeOpenShutter,
        GoHomeOnDeviceSelection,
        ProtocolShowSuccessResponses,
        ProtocolReportNotImplementedErrors,
        ProtocolTestPrimaryUrlStructure,
        ProtocolStrictChecks,
        RunAs32Bit,
        SideOfPierRead,
        SideOfPierWrite,
        StrictCasing,
        SwitchEnableSet,
        SwitchTestOffsets,
        TelescopeFirstUseTests,
        TraceAlpacaCalls,
        TraceDiscovery,
        TrustUserGeneratedSslCertificates,
        TelescopeExtendedMoveAxisTests,
        TelescopeExtendedPulseGuideTests,
        TelescopeExtendedRateOffsetTests,
        TelescopeExtendedSiteTests,
        UpdateCheck,
    }

    private enum BoolConfigurationItem
    {
        TestImageArrayVariant
    }

    #endregion

    protected override void OnInitialized()
    {
        settings = configuration.Settings; // Create a shortcut to the configuration settings
        status = $"{configuration.Status}";
        SetConfiguration();

        isWindowsOs = OperatingSystem.IsWindows();

        if (isWindowsOs)
        {
            alpacaAndComText = "Alpaca and COM";
        }
        else
        {
            alpacaAndComText = "Alpaca";
        }
    }

    private void OnBoolItemChange(bool newValue, BoolConfigurationItem boolConfigurationItem)
    {
        switch (boolConfigurationItem)
        {
            case BoolConfigurationItem.TestImageArrayVariant:
                settings.CameraTestImageArrayVariant = newValue;
                break;

            default:
                throw new InvalidValueException($"OnDoubleItemChange - Unknown numeric configuration item: {boolConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void OnDoubleItemChange(double newValue, NumericConfigurationItem numericConfigurationItem)
    {
        switch (numericConfigurationItem)
        {
            case NumericConfigurationItem.AlpacaDiscoveryDuration:
                settings.AlpacaConfiguration.DiscoveryDuration = newValue;
                break;

            case NumericConfigurationItem.AlpacaDiscoveryPollInterval:
                settings.AlpacaConfiguration.DiscoveryPollInterval = newValue;
                break;

            case NumericConfigurationItem.TelescopeSlewTolerance:
                settings.TelescopeSlewTolerance = newValue;
                break;

            case NumericConfigurationItem.DomeSlewtolerance:
                settings.DomeSlewTolerance = newValue;
                break;

            case NumericConfigurationItem.CameraExposureDuration:
                settings.CameraExposureDuration = newValue;
                break;

            case NumericConfigurationItem.waitTimeBeforeConformApplicationExits:
                settings.ConnectionTimeout = newValue;
                break;

            case NumericConfigurationItem.TelescopePulseGuideTolerance:
                settings.TelescopePulseGuideTolerance = newValue;
                break;

            case NumericConfigurationItem.TelescopeRateOffsetTestDuration:
                settings.TelescopeRateOffsetTestDuration = newValue;
                break;

            case NumericConfigurationItem.TelescopeRateOffsetTestValueLow:
                settings.TelescopeRateOffsetTestLowValue = newValue;
                break;

            case NumericConfigurationItem.TelescopeRateOffsetTestValueHigh:
                settings.TelescopeRateOffsetTestHighValue = newValue;
                break;

            default:
                throw new InvalidValueException($"OnDoubleItemChange - Unknown numeric configuration item: {numericConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void OnIntegerItemChange(int newValue, NumericConfigurationItem numericConfigurationItem)
    {
        switch (numericConfigurationItem)
        {
            case NumericConfigurationItem.ApplicationPort:
                settings.ApplicationPort = newValue;
                break;

            case NumericConfigurationItem.CameraMaxBinX:
                settings.CameraMaxBinX = newValue;
                break;

            case NumericConfigurationItem.CameraMaxBinY:
                settings.CameraMaxBinY = newValue;
                break;

            case NumericConfigurationItem.DomeAltitudeTimeout:
                settings.DomeAltitudeMovementTimeout = newValue;
                break;

            case NumericConfigurationItem.DomeAzimuthTimeout:
                settings.DomeAzimuthMovementTimeout = newValue;
                break;

            case NumericConfigurationItem.DomeStabilisationWaitTime:
                settings.DomeStabilisationWaitTime = newValue;
                break;

            case NumericConfigurationItem.DomeShutterTimeout:
                settings.DomeShutterMovementTimeout = newValue;
                break;

            case NumericConfigurationItem.ObservingConditionsMaxRetries:
                settings.ObservingConditionsMaxRetries = newValue;
                break;

            case NumericConfigurationItem.ObservingConditionsRetryTime:
                settings.ObservingConditionsRetryTime = newValue;
                break;

            case NumericConfigurationItem.SwitchExtendedNumberTestRange:
                settings.SwitchExtendedNumberTestRange = newValue;
                break;

            case NumericConfigurationItem.SwitchReadDelay:
                settings.SwitchReadDelay = newValue;
                break;

            case NumericConfigurationItem.SwitchWriteDelay:
                settings.SwitchWriteDelay = newValue;
                break;

            case NumericConfigurationItem.AlpacaDiscoveryPort:
                settings.AlpacaConfiguration.DiscoveryPort = newValue;
                break;

            case NumericConfigurationItem.AlpacaNumberOfDiscoveryPolls:
                settings.AlpacaConfiguration.NumberOfDiscoveryPolls = newValue;
                break;

            case NumericConfigurationItem.TelescopeMaximumSlewTime:
                settings.TelescopeMaximumSlewTime = newValue;
                break;

            case NumericConfigurationItem.FocuserTimeout:
                settings.FocuserTimeout = newValue;
                break;

            case NumericConfigurationItem.RotatorTimeout:
                settings.RotatorTimeout = newValue;
                break;

            case NumericConfigurationItem.focuserMoveTolerance:
                settings.FocuserMoveTolerance = newValue;
                break;

            case NumericConfigurationItem.CameraXMax:
                settings.CameraXMax = newValue;
                break;

            case NumericConfigurationItem.CameraYMax:
                settings.CameraYMax = newValue;
                break;

            case NumericConfigurationItem.CameraWaitTimeout:
                settings.CameraWaitTimeout = newValue;
                break;

            case NumericConfigurationItem.FilterWheelTimeout:
                settings.FilterWheelTimeout = newValue;
                break;

            case NumericConfigurationItem.ConnectDisconnectTimeout:
                settings.ConnectDisconnectTimeout = newValue;
                break;

            case NumericConfigurationItem.SwitchAsyncTimeout:
                settings.SwitchAsyncTimeout = newValue;
                break;

            default:
                throw new InvalidValueException($"OnIntegerItemChange - Unknown numeric configuration item: {numericConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void OnCheckboxChange(bool args, CheckBoxConfigurationItem name)
    {
        switch (name)
        {
            case CheckBoxConfigurationItem.UpdateCheck:
                settings.UpdateCheck = checkForUpdates;
                break;

            case CheckBoxConfigurationItem.DisplayCalls:
                settings.DisplayMethodCalls = displayMethodCalls; ;
                break;

            case CheckBoxConfigurationItem.Debug:
                settings.Debug = enableDebugLogging;
                break;

            case CheckBoxConfigurationItem.DomeOpenShutter:
                settings.DomeOpenShutter = domeOpenShutter;
                break;

            case CheckBoxConfigurationItem.SwitchEnableSet:
                settings.SwitchEnableSet = switchEnableSet;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryResolveName:
                settings.AlpacaConfiguration.DiscoveryResolveName = alpacaDiscoveryResolveName;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV4:
                settings.AlpacaConfiguration.DiscoveryUseIpV4 = alpacaDiscoveryUseIpV4;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV6:
                settings.AlpacaConfiguration.DiscoveryUseIpV6 = alpacaDiscoveryUseIpV6;
                break;

            case CheckBoxConfigurationItem.StrictCasing:
                settings.AlpacaConfiguration.StrictCasing = strictCasing;
                break;

            case CheckBoxConfigurationItem.TraceDiscovery:
                settings.TraceDiscovery = chkTraceDiscovery;
                break;

            case CheckBoxConfigurationItem.TraceAlpacaCalls:
                settings.TraceAlpacaCalls = chkTraceAlpacaCalls;
                break;

            case CheckBoxConfigurationItem.CameraFirstUseTests:
                settings.CameraFirstUseTests = cameraFirstUseTests;
                break;

            case CheckBoxConfigurationItem.DiscoveryEnabled:
                settings.AlpacaConfiguration.DiscoveryEnabled = alpacaDiscoveryEnabled;
                break;

            case CheckBoxConfigurationItem.TelescopeFirstUseTests:
                settings.TelescopeFirstUseTests = telescopeFirstUseTests;
                break;

            case CheckBoxConfigurationItem.GoHomeOnDeviceSelection:
                settings.GoHomeOnDeviceSelected = goHomeOnDeviceSelection;
                break;

            case CheckBoxConfigurationItem.RunAs32Bit:
                settings.RunAs32Bit = runAs32Bit;
                break;

            case CheckBoxConfigurationItem.ProtocolShowSuccessResponses:
                settings.AlpacaConfiguration.ProtocolShowSuccessResponses = chkProtocolShowSuccessResponses;
                break;

            case CheckBoxConfigurationItem.ProtocolReportNotImplementedErrors:
                settings.AlpacaConfiguration.ProtocolReportNotImplementedErrors = chkProtocolReportNotImplementedErrors;
                break;

            case CheckBoxConfigurationItem.ProtocolTestPrimaryUrlStructure:
                settings.AlpacaConfiguration.ProtocolTestPrimaryUrlStructure = chkProtocolTestPrimaryUrlStructure;
                break;

            case CheckBoxConfigurationItem.TrustUserGeneratedSslCertificates:
                settings.AlpacaConfiguration.TrustUserGeneratedSslCertificates = chkTrustUserGeneratedSslCertificates;
                break;

            case CheckBoxConfigurationItem.SideOfPierRead:
                settings.TestSideOfPierRead = chkSideOfPierRead;
                break;

            case CheckBoxConfigurationItem.SideOfPierWrite:
                settings.TestSideOfPierWrite = chkSideOfPierWrite;
                break;

            case CheckBoxConfigurationItem.TelescopeExtendedRateOffsetTests:
                settings.TelescopeExtendedRateOffsetTests = chkExtendedRateOffsetTests;
                break;

            case CheckBoxConfigurationItem.TelescopeExtendedPulseGuideTests:
                settings.TelescopeExtendedPulseGuideTests = chkExtendedPulseGuideTests;
                break;

            case CheckBoxConfigurationItem.TelescopeExtendedMoveAxisTests:
                settings.TelescopeExtendedMoveAxisTests = chkExtendedMoveAxisTests;
                break;

            case CheckBoxConfigurationItem.TelescopeExtendedSiteTests:
                settings.TelescopeExtendedSiteTests = chkExtendedSiteTests;
                break;

            case CheckBoxConfigurationItem.SwitchTestOffsets:
                settings.SwitchTestOffsets = switchTestOffsets;
                break;

            case CheckBoxConfigurationItem.ProtocolStrictChecks:
                settings.AlpacaConfiguration.ProtocolStrictChecks = chkProtocolStrictChecks;
                break;

            default:
                throw new InvalidValueException($"OnCheckboxChange - Unknown checkbox name: {name}");
        }

        SaveConfiguration();
    }

    private void SetConfiguration()
    {
        List<int> newScope = new();

        // Set scope
        if (settings.TestProperties) newScope.Add(0);
        if (settings.TestMethods) newScope.Add(1);
        if (settings.TestPerformance) newScope.Add(2);
        conformanceTestScope = newScope;

        // Operation settings
        checkForUpdates = settings.UpdateCheck;
        displayMethodCalls = settings.DisplayMethodCalls;
        enableDebugLogging = settings.Debug;
        goHomeOnDeviceSelection = settings.GoHomeOnDeviceSelected;
        waitTimeBeforeConformApplicationExits = settings.ConnectionTimeout;
        applicationPort = settings.ApplicationPort;
        runAs32Bit = settings.RunAs32Bit;
        connectDisconnectTimeout = settings.ConnectDisconnectTimeout;

        // Trace settings
        chkTraceDiscovery = settings.TraceDiscovery;
        chkTraceAlpacaCalls = settings.TraceAlpacaCalls;

        // COM Settings
        comAccessMechanic = settings.ComConfiguration.ComAccessMechanic;

        // Telescope tests
        telescopeTests = new List<string>();
        foreach (KeyValuePair<string, bool> item in settings.TelescopeTests)
        {
            if (item.Value) ((List<string>)telescopeTests).Add(item.Key);
        }
        telescopeFirstUseTests = settings.TelescopeFirstUseTests;
        telescopeSlewTolerance = settings.TelescopeSlewTolerance;
        telescopeMaximumSlewTime = settings.TelescopeMaximumSlewTime;
        chkSideOfPierRead = settings.TestSideOfPierRead;
        chkSideOfPierWrite = settings.TestSideOfPierWrite;
        chkExtendedRateOffsetTests = settings.TelescopeExtendedRateOffsetTests;
        chkExtendedPulseGuideTests = settings.TelescopeExtendedPulseGuideTests;
        telescopePulseGuideTolerance = settings.TelescopePulseGuideTolerance;
        chkExtendedMoveAxisTests = settings.TelescopeExtendedMoveAxisTests;
        chkExtendedSiteTests = settings.TelescopeExtendedSiteTests;
        telescopeRateOffsetTestDuration = settings.TelescopeRateOffsetTestDuration;
        telescopeRateOffsetTestValueLow = settings.TelescopeRateOffsetTestLowValue;
        telescopeRateOffsetTestValueHigh = settings.TelescopeRateOffsetTestHighValue;

        // Camera tests
        cameraTestMaxBinX = settings.CameraMaxBinX;
        cameraTestMaxBinY = settings.CameraMaxBinY;
        cameraFirstUseTests = settings.CameraFirstUseTests;
        cameraTestImageArrayVariant = settings.CameraTestImageArrayVariant;
        cameraExposureDuration = settings.CameraExposureDuration;
        cameraXMax = settings.CameraXMax;
        cameraYMax = settings.CameraYMax;
        cameraWaitTimeout = settings.CameraWaitTimeout;

        // Dome tests
        domeShutterTimeout = settings.DomeShutterMovementTimeout;
        domeAzimuthTimeout = settings.DomeAzimuthMovementTimeout;
        domeAltitudeTimeout = settings.DomeAltitudeMovementTimeout;
        domeStabilisationWaitTime = settings.DomeStabilisationWaitTime;
        domeOpenShutter = settings.DomeOpenShutter;
        domeSlewTolerance = settings.DomeSlewTolerance;

        // Filter wheel tests
        filterWheelTimeout = settings.FilterWheelTimeout;

        // Focuser tests
        focuserTimeout = settings.FocuserTimeout;
        focuserMoveTolerance = settings.FocuserMoveTolerance;

        // ObservingConditions tests
        observingConditionsMaxRetries = settings.ObservingConditionsMaxRetries;
        observingConditionsRetryTime = settings.ObservingConditionsRetryTime;

        // Rotator tests
        rotatorTimeout = settings.RotatorTimeout;

        // Switch tests
        switchEnableSet = settings.SwitchEnableSet;
        switchExtendedNumberTestRange = settings.SwitchExtendedNumberTestRange;
        switchReadDelay = settings.SwitchReadDelay;
        switchWriteDelay = settings.SwitchWriteDelay;
        switchAsyncTimeout = settings.SwitchAsyncTimeout;
        switchTestOffsets = settings.SwitchTestOffsets;

        // Alpaca configuration
        alpacaDiscoveryEnabled = settings.AlpacaConfiguration.DiscoveryEnabled;
        alpacaDiscoveryDuration = settings.AlpacaConfiguration.DiscoveryDuration;
        alpacaDiscoveryPollInterval = settings.AlpacaConfiguration.DiscoveryPollInterval;
        alpacaDiscoveryPort = settings.AlpacaConfiguration.DiscoveryPort;
        alpacaNumberOfDiscoveryPolls = settings.AlpacaConfiguration.NumberOfDiscoveryPolls;
        alpacaDiscoveryResolveName = settings.AlpacaConfiguration.DiscoveryResolveName;
        alpacaDiscoveryUseIpV4 = settings.AlpacaConfiguration.DiscoveryUseIpV4;
        alpacaDiscoveryUseIpV6 = settings.AlpacaConfiguration.DiscoveryUseIpV6;
        alpacaServiceType = settings.AlpacaConfiguration.AccessServiceType;
        strictCasing = settings.AlpacaConfiguration.StrictCasing;
        alpacaImageArrayTransferType = settings.AlpacaConfiguration.ImageArrayTransferType;
        chkProtocolShowSuccessResponses = settings.AlpacaConfiguration.ProtocolShowSuccessResponses;
        chkProtocolReportNotImplementedErrors = settings.AlpacaConfiguration.ProtocolReportNotImplementedErrors;
        chkProtocolTestPrimaryUrlStructure = settings.AlpacaConfiguration.ProtocolTestPrimaryUrlStructure;
        chkTrustUserGeneratedSslCertificates = settings.AlpacaConfiguration.TrustUserGeneratedSslCertificates;
        chkProtocolStrictChecks = settings.AlpacaConfiguration.ProtocolStrictChecks;
        protocolMessageLevel = settings.AlpacaConfiguration.ProtocolMessageLevel;
    }

    private void SaveConfiguration()
    {
        configuration.Save();
        status = configuration.Status;
        StateHasChanged();
    }

    private async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private void OnImageArrayTypeChange(object imageArrayTransferTypeObject)
    {
        ImageArrayTransferType imageArrayTransferType = (ImageArrayTransferType)imageArrayTransferTypeObject;
        settings.AlpacaConfiguration.ImageArrayTransferType = imageArrayTransferType;
        SaveConfiguration();
    }

    private void OnServiceTypeChange(object serviceMode)
    {
        ServiceType serviceType = (ServiceType)serviceMode;
        settings.AlpacaConfiguration.AccessServiceType = serviceType;
        SaveConfiguration();
    }

    private void OnMessageLevelChange(object messageLevel)
    {
        ProtocolMessageLevel messageLevelType = (ProtocolMessageLevel)messageLevel;
        settings.AlpacaConfiguration.ProtocolMessageLevel = messageLevelType;
        SaveConfiguration();
    }

    private void OnComAccessModeChange(object accessMode)
    {
        ComAccessMechanic comMechanic = (ComAccessMechanic)accessMode;
        settings.ComConfiguration.ComAccessMechanic = comAccessMechanic;
        SaveConfiguration();
    }

    private void OnConformTestScopeChange(IEnumerable<int> scope)
    {
        List<int> newScope = new();
        bool propertiesEnabled = scope.Contains(0);
        bool methodsEnabled = scope.Contains(1);
        bool performanceEnabled = scope.Contains(2);

        if (methodsEnabled)
        {
            newScope = new List<int>() { 0, 1 };
            settings.TestProperties = true;
            settings.TestMethods = true;
        }
        else
        {
            if (propertiesEnabled)
            {
                newScope = new List<int>() { 0 };
                settings.TestProperties = true;
                settings.TestMethods = false;
            }
            else
            {
                newScope = new List<int>();
                settings.TestProperties = false;
                settings.TestMethods = false;
            }
        }

        if (performanceEnabled)
        {
            newScope.Add(2);
            settings.TestPerformance = true;
        }
        else
        {
            settings.TestPerformance = false;
        }

        scope = newScope;
        SaveConfiguration();
    }

    private void OnTelescopeTestsChange(IEnumerable<string> value)
    {
        Dictionary<string, bool> newTelescopetestValues = new();
        foreach (KeyValuePair<string, bool> item in settings.TelescopeTests)
        {
            newTelescopetestValues[item.Key] = false;
        }

        foreach (string i in value)
        {
            newTelescopetestValues[i] = true;
        }
        settings.TelescopeTests = newTelescopetestValues;
        SaveConfiguration();
    }

    private void OnResetButtonClick()
    {
        configuration.Reset();
        settings = configuration.Settings;
        status = configuration.Status;
        SetConfiguration();
        StateHasChanged();
    }

    private void OnSetTelescopeTestsButtonClick(bool state)
    {
        Dictionary<string, bool> changedTests = new();
        foreach (KeyValuePair<string, bool> item in settings.TelescopeTests)
        {
            changedTests.Add(item.Key, state);
        }
        settings.TelescopeTests = changedTests;

        SaveConfiguration();
        SetConfiguration();
        StateHasChanged();
    }

    private void OnTabChange(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

}
