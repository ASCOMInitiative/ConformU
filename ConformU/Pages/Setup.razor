@page "/Setup"
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@inject ConformStateManager state
@inject IJSRuntime jsRuntime

@using System.Threading

<h2>Device and Driver Setup</h2>


<div>

    @if (noDeviceMessageDisplay)
    {
        <div style="margin-top: 20px">
            <h4>No device has been selected.</h4>
        </div>
    }

    @if (comControlsDisplay)
    {
        <div style="margin-top: 20px">
            <h4 style="margin-bottom: 20px">COM Driver Setup</h4>
            <RadzenButton Click=@(args => SetupCom()) Text="Open Setup Dialogue" Style="width: 230px; margin-bottom:20px; margin-right:20px" Disabled=@configuration.Settings.OperationInProgress />
            <RadzenButton Click=@(args => CancelSetup()) Text="Cancel Setup" Style="width: 230px;" Disabled=@(!configuration.Settings.OperationInProgress) />
        </div>
    }

    @if (alpacaControlsDisplay)
    {
        <div style="margin-top: 20px">
            <h4 style="margin-bottom: 20px">Alpaca Device Setup</h4>
            <RadzenButton Click=@(args => SetupAlpacaMain()) Text="Main Setup Page" Style="width: 210px; margin-bottom:20px; margin-right: 20px" />
            <RadzenButton Click=@(args => SetupAlpacaDevice()) Text="Device Setup Page" Style="width: 210px" />
        </div>
    }
</div>

@code {
    bool alpacaControlsDisplay = false;
    bool comControlsDisplay = false;
    bool noDeviceMessageDisplay = false;

    CancellationTokenSource setupCancellationTokenSource;
    CancellationToken setupCancelConformToken;

    protected override void OnInitialized()
    {
        conformLogger.Debug = configuration.Settings.Debug;

        // Enable the appropriate page heading
        switch (configuration.Settings.DeviceTechnology)
        {
            case DeviceTechnology.NotSelected:
                noDeviceMessageDisplay = true;
                break;

            case DeviceTechnology.Alpaca:
                alpacaControlsDisplay = true;
                break;

            case DeviceTechnology.COM:
                comControlsDisplay = true;
                break;

            default:
                conformLogger.LogMessage("DEVICESETUP.RAZOR - OnInitialized", MessageLevel.Error, $"Invalid device technology type: {configuration.Settings.DeviceTechnology}");
                throw new ASCOM.InvalidValueException($"DriverSetupForm.razor - Invalid device technology type: {configuration.Settings.DeviceTechnology}");
        }

    }

    async void SetupAlpacaMain()
    {
        string url = "";

        state.RaiseUiHasChangedEvent();
        StateHasChanged();

        try
        {
            url = $"{configuration.Settings.AlpacaConfiguration.AccessServiceType}://{configuration.Settings.AlpacaDevice.IpAddress}:{configuration.Settings.AlpacaDevice.IpPort}/setup".ToLowerInvariant();
            conformLogger.LogMessage("SetupAlpacaMain", MessageLevel.Debug, $"URL: {url}");
            await jsRuntime.InvokeVoidAsync("open", url, "_blank");
            conformLogger.LogMessage("SetupAlpacaMain", MessageLevel.Debug, $"Returned from URL: {url}");
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("SetupAlpacaMain", MessageLevel.Error, $"Exception setting up main Alpaca device:\r\n{ex}");
        }
    }

    async void SetupAlpacaDevice()
    {
        string url = "";

        state.RaiseUiHasChangedEvent();
        StateHasChanged();

        try
        {
            url = $"{configuration.Settings.AlpacaConfiguration.AccessServiceType}://{configuration.Settings.AlpacaDevice.IpAddress}:{configuration.Settings.AlpacaDevice.IpPort}/setup/v1/{configuration.Settings.AlpacaDevice.AscomDeviceType}/{configuration.Settings.AlpacaDevice.AlpacaDeviceNumber}/setup".ToLowerInvariant();
            conformLogger.LogMessage("SetupAlpacaDevice", MessageLevel.Debug, $"URL: {url}");
            await jsRuntime.InvokeVoidAsync("open", url, "_blank");
            conformLogger.LogMessage("SetupAlpacaDevice", MessageLevel.Debug, $"Returned from URL: {url}");
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("SetupAlpacaDevice", MessageLevel.Error, $"Exception setting up Alpaca device {url}:\r\n{ex}");
        }

    }

    void CancelSetup()
    {
        conformLogger.LogMessage("CancelSetup", MessageLevel.Debug, "About to cancel setup task");
        setupCancellationTokenSource.Cancel();
        conformLogger.LogMessage("CancelSetup", MessageLevel.Debug, $"Setup task cancelled IsCancellationRequested: {setupCancelConformToken.IsCancellationRequested}");
    }

    async void SetupCom()
    {
        try
        {
            configuration.Settings.OperationInProgress = true;
            state.RaiseUiHasChangedEvent();
            StateHasChanged();

            conformLogger.Debug = configuration.Settings.Debug;

            // Create a task cancellation token source and cancellation token
            setupCancellationTokenSource = new CancellationTokenSource();
            setupCancelConformToken = setupCancellationTokenSource.Token;
            setupCancelConformToken.ThrowIfCancellationRequested();
            CancellationToken taskCancellationToken = setupCancellationTokenSource.Token;

            using (ConformanceTestManager testManager = new(configuration, conformLogger, setupCancellationTokenSource, setupCancelConformToken))
            {
                // Create a task to run the conformance test
                Task conformanceTest = new Task(() =>
                {
                    try
                    {
                        testManager.SetupDialog();
                    }
                    catch (Exception ex)
                    {
                        conformLogger.LogMessage("StartTest", MessageLevel.Error, $"Exception: \r\n {ex}");
                    }

                }, taskCancellationToken);

                conformLogger.LogMessage("SetupCom", MessageLevel.Debug, "Starting conformance test");
                // Start the conformance test task
                conformanceTest.Start();
                conformLogger.LogMessage("SetupCom", MessageLevel.Debug, "Conformance test started OK");

                // Wait for the task to complete.
                conformLogger.LogMessage("SetupCom", MessageLevel.Debug, "Awaiting conformance task completion");
                await conformanceTest;
                conformLogger.LogMessage("SetupCom", MessageLevel.Debug, "Conformance task completed");

            }
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("SetupCom", MessageLevel.Error, $"Exception setting up COM driver {configuration.Settings.ComDevice.DisplayName} ({configuration.Settings.ComDevice.ProgId}):\r\n{ex}");
        }
        finally
        {
            // Renable the button and remove operationin progress status
            configuration.Settings.OperationInProgress = false;
            state.RaiseUiHasChangedEvent();
            StateHasChanged();
        }
    }

}
