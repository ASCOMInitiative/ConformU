@using ASCOM.Common

@implements IDisposable

@inherits LayoutComponentBase
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@inject ConformStateManager state

@* Top level page layout including page header at top and navigation bar at left *@
<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <div class="top-row px-4">
        <span>Current device -&nbsp;</span><span><b style="color: #0366d6">@deviceName &nbsp;</b></span><span>(@deviceTechnology @deviceType @((deviceTechnology == DeviceTechnology.Alpaca) ? alpacaDeviceNumber : ""))</span>
        <a href="https://ascom-standards.org" target="_blank">ASCOM Initiative</a>
    </div>

    <div class="content px-4">
        @Body
    </div>
</div>

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

@code
{
    bool disposedValue;

    private string deviceName;
    private DeviceTypes deviceType;
    private DeviceTechnology deviceTechnology;
    private int alpacaDeviceNumber;

    /// <summary>
    /// Event handler for page initialised event
    /// </summary>
    /// <remarks>Hook up an event handler to redisplay the page header whenever the configuration is changed. </remarks>
    protected override void OnInitialized()
    {
        state.UiHasChanged += OnUiChanged;
        SetDisplayVariables();
    }

    /// <summary>
    /// Event hander called when the configuration is changed
    /// </summary>
    /// <param name="caller"></param>
    /// <param name="args"></param>
    private async void OnUiChanged(object caller, EventArgs args)
    {
        try
        {
            //conformLogger.LogMessage("MainLayout.OnUiChanged", MessageLevel.Debug,$"Method called");
            SetDisplayVariables();
            await InvokeAsync(StateHasChanged);
            //conformLogger.LogMessage("MainLayout.OnUiChanged", MessageLevel.Debug, $"Method completed");
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("MainLayout.OnUiChanged", MessageLevel.Error, $"Exception: {ex}.");
            throw;
        }
    }

    private void SetDisplayVariables()
    {
        if (configuration.Settings.DeviceTechnology == DeviceTechnology.Alpaca)
        {
            deviceName = $"{configuration.Settings.DeviceName} - {configuration.Settings.AlpacaDevice.HostName}:{configuration.Settings.AlpacaDevice.IpPort}";
            alpacaDeviceNumber = configuration.Settings.AlpacaDevice.AlpacaDeviceNumber;
        }
        else
        {
            deviceName = configuration.Settings.DeviceName;
        }
        deviceType = configuration.Settings.DeviceType.GetValueOrDefault(DeviceTypes.Telescope);
        deviceTechnology = configuration.Settings.DeviceTechnology;

    }

    #region Dispose support

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                state.UiHasChanged -= OnUiChanged;
            }

            disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put clean-up code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    #endregion


}