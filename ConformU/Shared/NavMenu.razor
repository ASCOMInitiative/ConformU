@inject ILogger<App> logger
@inject IJSRuntime JsRuntime
@inject ConformConfiguration configuration
@inject BrowserResizeService resizeListener
@inject ConformLogger conformLogger
@inject IJSRuntime JS
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">

    @if (configuration.Settings.OperationInProgress)@* Operation is in progress *@
    {
        @if (IsSmall)@* Operation in progress and screen is small *@
        {
            <span class="navbar-brand">Conform Universal</span>

            <span style="text-align:left; color: yellow"><b>Operation in progress</b></span>
        }
        else @* Operation in progress and normal screen *@
        {
            <span class="navbar-brand" style="width: 100%; text-align: center">Conform Universal</span>
        }

    }
    else @* No operation is in progress *@
    {
        @if (IsSmall)@* No operation and screen is small *@
        {
            <span class="navbar-brand" style="text-align: left">Conform Universal</span>
        }
        else @* No operation and screen is normal *@
        {
            <span class="navbar-brand" style="width: 100%; text-align: center">Conform Universal</span>
        }
    }

    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

@if (configuration.Settings.OperationInProgress)
{
    @* Only display the Operation in progress status in the navigation menu when running on a large screen. On small screens it appear in the title area *@
    @if (!IsSmall)
    {
        <div style="margin-top: 80px;text-align:center">
            <p style="color:yellow"><b>Operation in progress</b></p>
        </div>
    }
}
else
{
    @* No operation running so display the main navigation menu *@
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
                <NavLink class="nav-link" href="/DeviceSelection" Match="NavLinkMatch.All">
                    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Select Device
                </NavLink>
                <NavLink class="nav-link" href="/Setup" Match="NavLinkMatch.All">
                    <span class="oi oi-zoom-in" aria-hidden="true"></span> Device Setup
                </NavLink>
                <NavLink class="nav-link" href="/AlpacaDiscoveryPage" Match="NavLinkMatch.All">
                    <span class="oi oi-camera-slr" aria-hidden="true"></span> Alpaca Discovery Map
                </NavLink>
                <NavLink class="nav-link" href="/DiscoveryDiagnostics" Match="NavLinkMatch.All">
                    <span class="oi oi-loop" aria-hidden="true"></span> Discovery Diagnostics
                </NavLink>
                <NavLink class="nav-link" href="/CheckAlpacaProtocol" Match="NavLinkMatch.All" >
                    <span class="oi oi-bug" aria-hidden="true"></span> Check Alpaca Protocol
                </NavLink>
                @if (Update.UpdateAvailable())
                {
                    <NavLink class="nav-link" href="/AppUpdates" style="color:yellow;" Match="NavLinkMatch.All">
                        <span class="oi oi-cloud-download" aria-hidden="true" style="color:yellow;"></span> Update available
                    </NavLink>
                }
                else
                {
                    <NavLink class="nav-link" href="/AppUpdates" Match="NavLinkMatch.All">
                        <span class="oi oi-cloud-download" aria-hidden="true"></span> Check for updates
                    </NavLink>
                }
                <NavLink class="nav-link" href="/Settings" Match="NavLinkMatch.All">
                    <span class="oi oi-wrench" aria-hidden="true"></span> Settings
                </NavLink>
                <NavLink class="nav-link" href="/Help" Match="NavLinkMatch.All">
                    <span class="oi oi-question-mark" aria-hidden="true"></span> Help
                </NavLink>
            </li>
        </ul>

    </div>
}

@code {
    bool IsSmall;
    bool disposedValue;

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    /// <summary>
    /// Event handler for page initialised event
    /// </summary>
    /// <remarks>Hook up an event handler to redisplay the page header whenever the configuraiton is changed. </remarks>
    protected override void OnInitialized()
    {
        configuration.UiHasChanged += OnUiChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            resizeListener.OnResize += WindowResized;
        }
    }

    // This method will be called when the window resizes.
    private async void WindowResized(object _, BrowserWindowSize window)
    {
        try
        {
            IsSmall = Globals.IsSmall(window.Width, window.Height);//window.Width < Globals.UI_SMALL_TRANSITION_SIZE;
                                                                   //conformLogger.LogMessage("Navmenu.WindowResized", MessageLevel.Debug, $"IsSmall: {IsSmall}, Window width: {window.Width}, Window height: {window.Height}, Operation in progress: {configuration.Settings.OperationInProgress}");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("SetScreenLogRows", $"Exception: \r\n{ex}");
        }
    }

    /// <summary>
    /// Event hander called when the configuration is changed
    /// </summary>
    /// <param name="caller"></param>
    /// <param name="args"></param>
    private async void OnUiChanged(object caller, EventArgs args)
    {
        // Collapse the navigation menu if an operation has been started
        if (configuration.Settings.OperationInProgress) collapseNavMenu = true;

        // Refresh the UI according to new state
        try
        {
            BoundingClientRectangle browserWindowSize = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingWindowRect");
            IsSmall = Globals.IsSmall(browserWindowSize.Width, browserWindowSize.Height); //browserWindowSize.Width < Globals.UI_SMALL_TRANSITION_SIZE;
        }
        catch { }

        //conformLogger.LogMessage("Navmenu.OnConfigurationChange", MessageLevel.Debug, $"IsSmall: {IsSmall}, Window width: {browserWindowSize.Width}, Window height: {browserWindowSize.Height}, Operation in progress: {configuration.Settings.OperationInProgress}");
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        if (IsSmall) collapseNavMenu = !collapseNavMenu;
        conformLogger.LogMessage("NavMenu-ToggleNavMenu", MessageLevel.Debug, $"Collapse menu: {collapseNavMenu}");
        configuration.RaiseUiHasChangedEvent();
        conformLogger.LogMessage("NavMenu-ToggleNavMenu", MessageLevel.Debug, $"UI changed event complete");

        // Start a task that waits a short time and then fires a UI has changed event. Required to ensure that the log text area fully resizes at small widths after the nav bar has resized.
        Task.Run(DelayedUiChangedTask);
    }

    async void DelayedUiChangedTask()
    {
        conformLogger.LogMessage("NavMenu-DelayedUiChangedTask", MessageLevel.Debug, $"Delay started");
        await Task.Delay(100);
        configuration.RaiseUiHasChangedEvent();
        conformLogger.LogMessage("NavMenu-DelayedUiChangedTask", MessageLevel.Debug, $"Delayed UI changed event complete");

    }

    #region Dispose support

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                resizeListener.OnResize -= WindowResized;
            }

            disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    #endregion


}
