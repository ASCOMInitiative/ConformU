@page "/DeviceSelection"
@using ASCOM.Standard.Discovery
@using System.Net
@using AlpacaDiscovery
@using System.Threading

@* Activity logger object*@
@inject ConformLogger conformLogger
@* Shared configuration object *@
@inject ConformConfiguration configuration
@* Radzen notification service to enable pop-up alerts *@
@inject NotificationService notificationService
@* JavaScript runtime reference *@
@inject IJSRuntime JS

<h1>Device Selection</h1>

@*Select device type drop-down*@
<div class="row">

    <h3 style="padding-right: 1em">Select device type</h3>

    <RadzenDropDown Style="width:300px"
                    AllowClear="false"
                    AllowFiltering="false"
                    Data=@validAscomdDeviceTypes
                    TValue="string"
                    @bind-Value=@selectedDeviceType
                    Change=@(args => OnDeviceTypeChange(args)) />
</div>

@* Select device tabs *@
<RadzenTabs Style="height: 1000px;margin-top:20px"
            RenderMode="TabRenderMode.Server"
            @bind-value=@selectedTabNumber
            Change=@(args => OnTabChange(args))>

    <Tabs>

        @* Alpaca device search tab *@
        <RadzenTabsItem Text="Alpaca Device">

            <div class="row">

                @* Alpaca device selection radio buttons *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; height:800px; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList Orientation="Orientation.Vertical"
                                           Data=@ascomDevices
                                           TValue="AscomDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="AscomDevice"
                                           Change=@(args => OnNewAlpacaDeviceSelected(args)) />

                </RadzenCard>

                @* Alpaca discovery progress information *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; height:800px; margin-right: 20px">

                    <RadzenTextArea Style="line-height:1.3"
                                    Cols="300"
                                    Rows="40"
                                    @bind-Value=@alpacaDiscoveryProgress />

                </RadzenCard>

            </div>

            @* Alpaca search and device selection buttons *@
            <div class="row">

                <RadzenButton Style="margin-bottom: 20px; width: 150px"
                              Text="Search"
                              Click=@(args => OnAlpacaSearchClick()) />

                @* An ID is required for this button so that JavaScript can return the button's position in the viewport in order that any warning message can be positioned next to the button *@
                <RadzenButton id="SelectAlpacaButton"
                              Style="margin-bottom: 20px; margin-left:20px; width: 150px"
                              Text="Select"
                              Click=@(args => OnSelectAlpacaDeviceClick()) />

            </div>

        </RadzenTabsItem>

        @* COM device search tab *@
        <RadzenTabsItem Text="Windows COM Driver"
                        Disabled=@osIsNotWindows
                        Visible=@osIsWindows>

            <div class="row">

                @* COM device selection radio buttons *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; height:800px; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList Orientation="Orientation.Vertical"
                                           Data=@comDeviceList
                                           TValue="ComDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="ComDevice"
                                           Change=@(args => OnComDeviceChanged(args)) />
                </RadzenCard>

            </div>

            @* COMdevice selection button *@
            <RadzenButton id="SelectComButton"
                          Style="margin-bottom: 20px; width: 150px"
                          Text="Select"
                          Click=@(args => OnNewComDeviceSelected()) />

        </RadzenTabsItem>

    </Tabs>

</RadzenTabs>

@code
{
    List<string> validAscomdDeviceTypes = new() { "Telescope", "Camera", "CoverCalibrator", "Dome", "Focuser", "ObservingConditions", "Rotator", "Switch", "Video" };
    string selectedDeviceType; // One of the valid ASCOM device types above
    string alpacaDiscoveryProgress; // Text describing events happening while Alpaca discovery is underway
    AlpacaDiscovery discovery; // Alpaca discovery component
    bool osIsWindows; // OS environment type
    bool osIsNotWindows;
    int selectedTabNumber = 0; // Current tab number 0 = Alpaca, 1 = COM
    string technologyType = ConformConstants.TECHNOLOGY_ALPACA; // Is the user selecting an Alpaca or a COM device?

    List<AlpacaDeviceListItem> ascomDevices = new(); // List of discovered Alpaca devices for use in the Alpaca devices Radzen radio button list
    List<ComDeviceListItem> comDeviceList = new(); // List of COM devices for use in the Radzen COM devices radio button list

    AscomDevice selectedAlpacaDevice; // Details of the currently selected Alpaca device
    ComDevice selectedComDevice; // Details of the currently selected COM device

    #region Initialisation and Load

    protected override void OnInitialized()
    {
        // Initialise variables
        selectedDeviceType = configuration.Settings.CurrentDeviceType;
        discovery = new AlpacaDiscovery(conformLogger);
        discovery.AlpacaDevicesUpdated += AlpacaDeviceDiscovered;
        discovery.DiscoveryCompleted += AlpacaDiscoveryCompleted;

        // Define OS environment variables
        osIsWindows = OperatingSystem.IsWindows();
        osIsNotWindows = !osIsWindows;

        // Start an Alpaca discovery to populate the Alpaca device list
        StartDiscovery();
    }

    #endregion

    #region Page component event Handlers

    void OnTabChange(int tabIndex)
    {
        selectedTabNumber = tabIndex;
        conformLogger.LogMessage("OnTabChange", $"Selected new tab: {tabIndex}");

        if (tabIndex == 1)
        {
            UpdateComDevices();
        }
        StateHasChanged();

    }

    void OnDeviceTypeChange(object value)
    {
        configuration.Save();

        switch (selectedTabNumber)
        {
            case 0:
                StartDiscovery();
                break;

            case 1:
                UpdateComDevices();
                break;
        }

        StateHasChanged();

    }

    #endregion

    #region Alpaca TAB event handlers

    private void OnNewAlpacaDeviceSelected(AscomDevice value)
    {
        selectedAlpacaDevice = value;
        if (value is null) value = new AscomDevice();
        conformLogger.LogDebug("OnDeviceChanged", $"New Device selected: {value.AscomDeviceName} at {value.IpAddress}");
    }

    private void OnAlpacaSearchClick()
    {
        StartDiscovery();
    }

    private async void OnSelectAlpacaDeviceClick()
    {
        if (selectedAlpacaDevice is null)
        {
            var result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "SelectAlpacaButton");

            var x = (int)(result.Right) + 30;
            var y = (int)(result.Top) - 40;

            ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Select Device", Detail = $"No device has been selected!", Duration = 4000 });
        }
        else
        {
            conformLogger.LogDebug("OnSelectDeviceClick", $"Alpaca device selected: {technologyType}");
            configuration.Settings.CurrentDeviceName = selectedAlpacaDevice.AscomDeviceName;
            configuration.Settings.CurrentAlpacaDevice = selectedAlpacaDevice;
            configuration.Settings.CurrentDeviceType = selectedAlpacaDevice.AscomDeviceType;
        }

        technologyType = ConformConstants.TECHNOLOGY_ALPACA;
        configuration.Settings.CurrentDeviceTechnology = technologyType;
        configuration.Save();
        StateHasChanged();
    }

    #endregion

    #region COM TAB event handlers

    private async void OnNewComDeviceSelected()
    {
        if (selectedComDevice is null)
        {
            var result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "SelectComButton");

            var x = (int)(result.Right) + 30;
            var y = (int)(result.Top) - 40;

            ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Select Device", Detail = $"No device has been selected!", Duration = 4000 });
        }
        else
        {
            conformLogger.LogDebug("OnSelectDeviceClick", $"COM device selected: {technologyType}");
            configuration.Settings.CurrentDeviceName = selectedComDevice.DisplayName;
            configuration.Settings.CurrentComDevice = selectedComDevice;
            configuration.Settings.CurrentDeviceType = selectedDeviceType;
            configuration.Settings.CurrentDeviceProgId = selectedComDevice.ProgId;
        }

        technologyType = ConformConstants.TECHNOLOGY_COM;
        configuration.Settings.CurrentDeviceTechnology = technologyType;
        configuration.Save();
        StateHasChanged();
    }

    void OnComDeviceChanged(ComDevice value)
    {
        selectedComDevice = value;
        if (value is null) value = new ComDevice("Unknown", "Unknown");
        conformLogger.LogDebug("OnComDeviceChanged", $"New COM Device selected: {value.ProgId}, description: {value.DisplayName}");
    }

    #endregion

    #region Alpaca discovery event handlers

    private void AlpacaDiscoveryCompleted(object caller, EventArgs args)
    {
        conformLogger.LogDebug("AlpacaDiscoveryCompleted", $"Discovery complete");
        alpacaDiscoveryProgress += $"Discovery complete!";
        ascomDevices = new();
        foreach (AscomDevice device in discovery.GetAscomDevices(selectedDeviceType))
        {
            ascomDevices.Add(new AlpacaDeviceListItem($"{device.AscomDeviceName} ({device.IpAddress})", device));
        }
        InvokeAsync(StateHasChanged);
    }

    private void AlpacaDeviceDiscovered(object caller, EventArgs args)
    {
        List<AscomDevice> newDevices = discovery.GetAscomDevices(selectedDeviceType);
        //alpacaDiscoveryStatus = "";
        foreach (AscomDevice device in newDevices)
        {
            alpacaDiscoveryProgress += $"{device.IpAddress} {device.AscomDeviceName}\r\n";
        }
        if (newDevices.Count > 0) alpacaDiscoveryProgress += $"\r\n";
        conformLogger.LogDebug("AlpacaDeviceDiscovered", $"Found {newDevices.Count} devices.");

        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Support code

    private void UpdateComDevices()
    {
        comDeviceList.Clear();
        Dictionary<string, string> registeredDevices = ComDevices.GetRegisteredDrivers(selectedDeviceType, conformLogger);
        foreach (KeyValuePair<string, string> kvp in registeredDevices)
        {
            conformLogger.LogMessage("UpdateComDevices", $"Found device: {kvp.Key} {kvp.Value}");
            ComDevice comDevice = new ComDevice(kvp.Value, kvp.Key);
            comDeviceList.Add(new ComDeviceListItem(kvp.Value, comDevice));
        }

    }

    private async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    void StartDiscovery()
    {
        alpacaDiscoveryProgress = "Discovery started...\r\n";
        discovery.StartDiscovery(1, 1000, 32227, 1.0, false, true, false);
    }

    #endregion

}
