@page "/DeviceSelection"
@using ASCOM.Standard.Discovery
@using System.Net
@using AlpacaDiscovery
@using System.Threading
@using static ConformU.ConformConstants

@* Activity logger object*@
@inject ConformLogger conformLogger
@* Shared configuration object *@
@inject ConformConfiguration configuration
@* Radzen notification service to enable pop-up alerts *@
@inject NotificationService notificationService
@* JavaScript runtime reference *@
@inject IJSRuntime JS

<h1>Device Selection</h1>

@*Select device type drop-down*@
<div class="row">

    <h3 style="padding-right: 1em">Select device type</h3>

    <RadzenDropDown Style="width:300px"
                    AllowClear="false"
                    AllowFiltering="false"
                    Data=@validAscomdDeviceTypes
                    TValue="string"
                    @bind-Value=@selectedDeviceTypeString
                    Change=@(args => OnDeviceTypeChange(args)) />
</div>

@* Select device tabs *@
<RadzenTabs Style="height: auto; margin-top: 20px"
            RenderMode="TabRenderMode.Server"
            @bind-value=@selectedTabNumber
            Change=@(args => OnTabChange(args))>

    <Tabs>

        @* Alpaca device search tab *@
        <RadzenTabsItem Text="Alpaca Devices">

            <div class="row">

                @* Alpaca device selection radio buttons *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; min-height:120px;  height:fit-content; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList @bind-Value=@ascomDevice
                                           Orientation="Orientation.Vertical"
                                           Data=@ascomDevices
                                           TValue="AscomDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="AscomDevice"
                                           Change=@(args => OnNewAlpacaDeviceSelected(args)) />

                </RadzenCard>

                @* Alpaca discovery progress information *@
                <RadzenCard Style="width: 600px; margin-bottom: 20px; height: fit-content; margin-right: 20px">

                    <RadzenTextArea Style="line-height:1.3; height: fit-content;"
                                    Cols="300"
                                    Rows="@statusBoxHeight"
                                    @bind-Value=@alpacaDiscoveryProgress />

                </RadzenCard>

            </div>

            @* Alpaca search and device selection buttons *@
            <div class="row">

                <RadzenButton Style="margin-bottom: 20px; width: 150px; margin-left: 20px;"
                              Text="Rediscover"
                              Disabled="@discoveryInProgress"
                              Click=@(args => OnAlpacaSearchClick()) />

            </div>

        </RadzenTabsItem>

        @* COM device search tab *@
        <RadzenTabsItem Text="Windows COM Drivers"
                        Disabled=@osIsNotWindows
                        Visible=@osIsWindows>

            <div class="row">

                @* COM device selection radio buttons *@
                <RadzenCard Style="width:900px; margin-bottom: 20px; height:fit-content; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList @bind-Value=@comDevice
                                           Orientation="Orientation.Vertical"
                                           Data=@comDeviceList
                                           TValue="ComDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="ComDevice"
                                           Change=@(args => OnComDeviceChanged(args)) />
                </RadzenCard>

            </div>

        </RadzenTabsItem>

    </Tabs>

</RadzenTabs>

@code {
    AscomDevice ascomDevice;
    ComDevice comDevice;
    bool discoveryInProgress = false;
    int statusBoxHeight = 0; // Number of rows in the status box list ==> Determnines the height of the box
    List<string> validAscomdDeviceTypes = new() { DeviceType.Telescope.ToString(), DeviceType.Camera.ToString(), DeviceType.CoverCalibrator.ToString(), DeviceType.Dome.ToString(), DeviceType.FilterWheel.ToString(), DeviceType.Focuser.ToString(), DeviceType.ObservingConditions.ToString(), DeviceType.Rotator.ToString(), DeviceType.SafetyMonitor.ToString(), DeviceType.Switch.ToString(), DeviceType.Video.ToString() };
    DeviceType selectedDeviceType; // DeviceType of the selected device
    string selectedDeviceTypeString; // String representation of the currently selected DeviceType
    string alpacaDiscoveryProgress; // Text describing events happening while Alpaca discovery is underway
    AlpacaDiscovery discovery; // Alpaca discovery component
    bool osIsWindows; // OS environment type
    bool osIsNotWindows;
    int selectedTabNumber = 0; // Current tab number 0 = Alpaca, 1 = COM
    DeviceTechnology technologyType = DeviceTechnology.Alpaca; // Is the user selecting an Alpaca or a COM device?

    List<AlpacaDeviceListItem> ascomDevices = new(); // List of discovered Alpaca devices for use in the Alpaca devices Radzen radio button list
    List<ComDeviceListItem> comDeviceList = new(); // List of COM devices for use in the Radzen COM devices radio button list

    AscomDevice selectedAlpacaDevice; // Details of the currently selected Alpaca device
    ComDevice selectedComDevice; // Details of the currently selected COM device

    List<string> discoveredAlpacaDevices = new();

    #region Initialisation and Load

    protected override void OnInitialized()
    {
        // Initialise variables
        selectedDeviceType = (configuration.Settings.DeviceType == DeviceType.NoDeviceType) ? DeviceType.Telescope : configuration.Settings.DeviceType;
        selectedDeviceTypeString = selectedDeviceType.ToString();
        discovery = new AlpacaDiscovery(configuration.Settings.StrictCasing, configuration.Settings.DebugDiscovery ? conformLogger : null); // Create a discovery component with or without logging
        discovery.AlpacaDevicesUpdated += AlpacaDeviceDiscovered;
        discovery.DiscoveryCompleted += AlpacaDiscoveryCompleted;

        // Define OS environment variables
        osIsWindows = OperatingSystem.IsWindows();
        osIsNotWindows = !osIsWindows;

        // Start an Alpaca discovery to populate the Alpaca device list
        StartDiscovery();
    }

    #endregion

    #region Page component event Handlers

    void OnTabChange(int tabIndex)
    {
        selectedTabNumber = tabIndex;
        conformLogger.LogMessage("OnTabChange", $"Selected new tab: {tabIndex}");

        switch (tabIndex)
        {
            case 0:
                StartDiscovery();
                break;

            case 1:
                UpdateComDevices();
                break;
        }
        StateHasChanged();

    }

    void OnDeviceTypeChange(object value)
    {
        SaveConfiguration();

        switch (selectedTabNumber)
        {
            case 0:
                StartDiscovery();
                break;

            case 1:
                UpdateComDevices();
                break;
        }
    }

    #endregion

    #region Alpaca TAB event handlers

    private void OnNewAlpacaDeviceSelected(AscomDevice value)
    {
        try
        {
            // Update the selected device variable or initialise if there is no device
            selectedAlpacaDevice = (value is not null) ? value : new AscomDevice();
            ValidateAscomDevice(ref value);

            selectedDeviceType = Enum.Parse<DeviceType>(selectedDeviceTypeString);
            configuration.Settings.DeviceType = selectedDeviceType;

            technologyType = DeviceTechnology.Alpaca;
            configuration.Settings.DeviceTechnology = technologyType;
            conformLogger.LogDebug("OnNewAlpacaDeviceSelected", $"New {technologyType} {value.AscomDeviceType} device selected: {value.AscomDeviceName} at {value.IpAddress}");

            configuration.Settings.AlpacaDevice = selectedAlpacaDevice;

            SaveConfiguration();
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("OnNewAlpacaDeviceSelected", $"Exception: \r\n{ex}");
        }
    }

    private void ValidateAscomDevice(ref AscomDevice ascomDevice)
    {
        try
        {
            DeviceType deviceType = Enum.Parse<DeviceType>(ascomDevice.AscomDeviceType);
            // If we get here the device type is correctly formatted to the Enum type
        }
        catch
        {
            try
            {
                DeviceType deviceType = Enum.Parse<DeviceType>(ascomDevice.AscomDeviceType, true);
                // If we get here the device type is correct but is incorrectly cased compared to the Enum type so we update the object to the correct format
                if (configuration.Settings.StrictCasing)
                {
                    conformLogger.LogMessage("ValidateAscomDevice", MessageLevel.msgWarning, $"Returned device type value: '{ascomDevice.AscomDeviceType}' is not correctly cased. It should be: '{deviceType.ToString()}'.");
                }
                else
                {
                    // Tolerant mode - no warnings to be given
                }
                ascomDevice.AscomDeviceType = deviceType.ToString(); // Quietly update the stored device type
            }
            catch (Exception ex)
            {
                conformLogger.LogMessage("ValidateAscomDevice", $"Unable to parse the returned ASCOM device type: '{ascomDevice.AscomDeviceType}' - {ex.Message}");
            }
        }
    }

    private void OnAlpacaSearchClick()
    {
        StartDiscovery();
    }

    private async void XXXXXXOnSelectAlpacaDeviceClick()
    {
        if (selectedAlpacaDevice is null)
        {
            var result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "SelectAlpacaButton");

            var x = (int)(result.Right) + 30;
            var y = (int)(result.Top) - 40;

            ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Select Device", Detail = $"No device has been selected!", Duration = 4000 });
        }
        else
        {
            conformLogger.LogDebug("OnSelectDeviceClick", $"Alpaca device selected: {technologyType}");
            configuration.Settings.AlpacaDevice = selectedAlpacaDevice;
            configuration.Settings.DeviceType = Enum.Parse<DeviceType>(selectedAlpacaDevice.AscomDeviceType);
        }

        technologyType = DeviceTechnology.Alpaca;
        configuration.Settings.DeviceTechnology = technologyType;

        SaveConfiguration();
    }

    #endregion

    #region COM TAB event handlers

    void OnComDeviceChanged(ComDevice value)
    {
        selectedComDevice = value;
        if (value is null) value = new ComDevice("Unknown", "Unknown");
        conformLogger.LogDebug("OnComDeviceChanged", $"New COM Device selected: {value.ProgId}, description: {value.DisplayName}");

        selectedDeviceType = Enum.Parse<DeviceType>(selectedDeviceTypeString);
        configuration.Settings.DeviceType = selectedDeviceType;
        conformLogger.LogDebug("OnSelectDeviceClick", $"COM device selected: {technologyType}");
        configuration.Settings.ComDevice = selectedComDevice;

        technologyType = DeviceTechnology.COM;
        configuration.Settings.DeviceTechnology = technologyType;

        SaveConfiguration();

    }

    #endregion

    #region Alpaca discovery event handlers

    private void SetStatusAreaHeight()
    {
        if (statusBoxHeight < 20)
        {
            statusBoxHeight += 1;
        }
    }

    private void AlpacaDiscoveryCompleted(object caller, EventArgs args)
    {
        conformLogger.LogDebug("AlpacaDiscoveryCompleted", $"Discovery complete");
        alpacaDiscoveryProgress += $"Discovery complete!";
        SetStatusAreaHeight();
        ascomDevices = new();
        foreach (AscomDevice device in discovery.GetAscomDevices(Enum.Parse<DeviceType>(selectedDeviceTypeString).ToString()))
        {
            ascomDevices.Add(new AlpacaDeviceListItem($"{device.AscomDeviceName} ({device.IpAddress})", device));
            if ((device.AscomDeviceName == configuration.Settings.AlpacaDevice.AscomDeviceName) & (device.IpAddress == configuration.Settings.AlpacaDevice.IpAddress) & (configuration.Settings.DeviceTechnology == DeviceTechnology.Alpaca)) ascomDevice = device;
        }
        discoveryInProgress = false;
        InvokeAsync(StateHasChanged);
    }

    private void AlpacaDeviceDiscovered(object caller, EventArgs args)
    {
        List<AscomDevice> newDevices = discovery.GetAscomDevices(Enum.Parse<DeviceType>(selectedDeviceTypeString).ToString());

        foreach (AscomDevice device in newDevices)
        {
            string deviceKey = $"{device.AscomDeviceName} {device.IpAddress} {device.IpPort}";
            if (!discoveredAlpacaDevices.Contains<string>(deviceKey))
            {
                discoveredAlpacaDevices.Add(deviceKey);
                alpacaDiscoveryProgress += $"{deviceKey}\r\n";
                SetStatusAreaHeight();
            }


        }
        //conformLogger.LogDebug("AlpacaDeviceDiscovered", $"Found {newDevices.Count} devices.");

        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Support code

    private void UpdateComDevices()
    {
        comDeviceList.Clear();
        Dictionary<string, string> registeredDevices = ComDevices.GetRegisteredDrivers(Enum.Parse<DeviceType>(selectedDeviceTypeString).ToString(), conformLogger);
        foreach (KeyValuePair<string, string> kvp in registeredDevices)
        {
            conformLogger.LogMessage("UpdateComDevices", $"Found device: {kvp.Key} {kvp.Value}");
            ComDevice comDevice = new ComDevice($"{kvp.Value} ({kvp.Key})", kvp.Key);
            comDeviceList.Add(new ComDeviceListItem($"{kvp.Value} ({kvp.Key})", comDevice));
            if ((comDevice.ProgId == configuration.Settings.ComDevice.ProgId) & (comDevice.DisplayName == configuration.Settings.ComDevice.DisplayName) & (configuration.Settings.DeviceTechnology == DeviceTechnology.COM)) this.comDevice = comDevice;
        }

    }

    private void SaveConfiguration()
    {
        configuration.Save();
        StateHasChanged();
    }


    private async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    async void StartDiscovery()
    {
        discoveredAlpacaDevices.Clear();
        discoveryInProgress = true;
        alpacaDiscoveryProgress = $"Discovery started (Duration {configuration.Settings.AlpacaConfiguration.DiscoveryDuration:0.0} seconds)...\r\n";
        statusBoxHeight = 3; // Initual status area height
        Task t = Task.Run(() =>
            discovery.StartDiscovery(configuration.Settings.AlpacaConfiguration.NumberOfDiscoveryPolls,
            (int)(configuration.Settings.AlpacaConfiguration.DiscoveryPollInterval * 1000),
            configuration.Settings.AlpacaConfiguration.DiscoveryPort,
            configuration.Settings.AlpacaConfiguration.DiscoveryDuration,
            configuration.Settings.AlpacaConfiguration.DiscoveryResolveName,
            configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV4,
            configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV6)
        );

        //t.Wait();
    }

    #endregion

}
