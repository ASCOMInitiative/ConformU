@page "/DeviceSelection"
@using ASCOM.Standard.Discovery
@using System.Net
@using AlpacaDiscovery
@using System.Threading

@* Activity logger object*@
@inject ConformLogger conformLogger
@* Shared configuration object *@
@inject ConformConfiguration configuration
@* Radzen notification service to enable pop-up alerts *@
@inject NotificationService notificationService
@* JavaScript runtime reference *@
@inject IJSRuntime JS

<h1>Device Selection</h1>

@*Select device type drop-down*@
<div class="row">

    <h3 style="padding-right: 1em">Select device type</h3>

    <RadzenDropDown Style="width:300px"
                    AllowClear="false"
                    AllowFiltering="false"
                    Data=@validAscomdDeviceTypes
                    TValue="string"
                    @bind-Value=@selectedDeviceType
                    Change=@(args => OnDeviceTypeChange(args)) />
</div>

@* Select device tabs *@
<RadzenTabs Style="height: 1000px;margin-top:20px"
            RenderMode="TabRenderMode.Server"
            @bind-value=@selectedTabNumber
            Change=@(args => OnTabChange(args))>

    <Tabs>

        @* Alpaca device search tab *@
        <RadzenTabsItem Text="Alpaca Device">

            <div class="row">

                @* Alpaca device selection radio buttons *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; height:800px; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList Orientation="Orientation.Vertical"
                                           Data=@ascomDevices
                                           TValue="AscomDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="AscomDevice"
                                           @bind-Value=@selectedAlpacaDevice
                                           Change=@(args => OnAlpacaDeviceChanged(args)) />

                </RadzenCard>

                @* Alpaca discovery progress information *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; height:800px; margin-right: 20px">

                    <RadzenTextArea Style="line-height:1.3"
                                    Cols="300"
                                    Rows="40"
                                    @bind-Value=@alpacaDiscoveryStatus />

                </RadzenCard>

            </div>

            @* Alpaca search and device selection buttons *@
            <div class="row">

                <RadzenButton Style="margin-bottom: 20px; width: 150px"
                              Text="Search"
                              Click=@(args => OnAlpacaSearchClick()) />

                @* An ID is required for this button so that JavaScript can return the button's position in the viewport in order that any warning message can be positioned next to the button *@
                <RadzenButton id="SelectButton"
                              Style="margin-bottom: 20px; margin-left:20px; width: 150px"
                              Text="Select"
                              Click=@(args => OnSelectDeviceClick(ConformConstants.TECHNOLOGY_ALPACA)) />

            </div>

        </RadzenTabsItem>

        @* COM device search tab *@
        <RadzenTabsItem Text="Windows COM Driver"
                        Disabled=@osIsNotWindows
                        Visible=@osIsWindows>

            <div class="row">

                @* COM device selection radio buttons *@
                <RadzenCard Style="width:600px; margin-bottom: 20px; height:800px; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList @bind-Value=@selectedComDevice
                                           Orientation="Orientation.Vertical"
                                           Data=@comDeviceList
                                           TValue="ComDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="ComDevice"
                                           Change=@(args => OnComDeviceChanged(args)) />
                </RadzenCard>

            </div>

            @* COMdevice selection button *@
            <RadzenButton Style="margin-bottom: 20px; width: 150px"
                          Text="Select"
                          Click=@(args => OnSelectDeviceClick(ConformConstants.TECHNOLOGY_COM)) />

        </RadzenTabsItem>

    </Tabs>

</RadzenTabs>

@code
{
    List<string> validAscomdDeviceTypes = new() { "Telescope", "Camera", "CoverCalibrator", "Dome", "Focuser", "ObservingConditions", "Rotator", "Switch", "Video" };
    string selectedDeviceType;
    string alpacaDiscoveryStatus;
    AlpacaDiscovery discovery;
    bool osIsWindows;
    bool osIsNotWindows;
    int selectedTabNumber = 0; // Current tab number 0 = Alpaca, 1 = COM

    List<AlpacaDeviceListItem> ascomDevices = new();
    List<ComDeviceListItem> comDeviceList = new();

    AscomDevice selectedAlpacaDevice;
    ComDevice selectedComDevice;

    protected override void OnInitialized()
    {
        selectedDeviceType = configuration.Settings.CurrentDeviceType;
        discovery = new AlpacaDiscovery(conformLogger.TraceLogger);
        discovery.AlpacaDevicesUpdated += AlpacaDeviceDiscovered;
        discovery.DiscoveryCompleted += AlpacaDiscoveryCompleted;
        osIsWindows = OperatingSystem.IsWindows();
        osIsNotWindows = !osIsWindows;
        StartDiscovery();

    }

    void StartDiscovery()
    {
        alpacaDiscoveryStatus = "";
        discovery.StartDiscovery(1, 1000, 32227, 1.0, false, true, false);
    }

    void OnComDeviceChanged(ComDevice value)
    {
        if (value is null) value = new ComDevice("Unknown", "Unknown");
        conformLogger.LogDebug("OnComDeviceChanged", $"New COM Device selected: {value.ProgId}, description: {value.DisplayName}");
    }

    void OnAlpacaDeviceChanged(AscomDevice value)
    {
        if (value is null) value = new AscomDevice();
        conformLogger.LogDebug("OnDeviceChanged", $"New Device selected: {value.AscomDeviceName} at {value.IpAddress}");
    }

    void OnAlpacaSearchClick()
    {
        StartDiscovery();
    }

    private void AlpacaDiscoveryCompleted(object asd, EventArgs args)
    {
        conformLogger.LogDebug("AlpacaDiscoveryCompleted", $"Discovery complete");
        alpacaDiscoveryStatus += $"Discovery complete!";
        ascomDevices = new();
        foreach (AscomDevice device in discovery.GetAscomDevices(selectedDeviceType))
        {
            ascomDevices.Add(new AlpacaDeviceListItem($"{device.AscomDeviceName} ({device.IpAddress})", device));
        }
        InvokeAsync(StateHasChanged);
    }

    private void AlpacaDeviceDiscovered(object asd, EventArgs args)
    {
        List<AscomDevice> newDevices = discovery.GetAscomDevices("");
        //alpacaDiscoveryStatus = "";
        foreach (AscomDevice device in newDevices)
        {
            alpacaDiscoveryStatus += $"{device.IpAddress} {device.AscomDeviceName}\r\n";
        }
        conformLogger.LogDebug("AlpacaDeviceDiscovered", $"{newDevices.Count} devices.");

        InvokeAsync(StateHasChanged);
    }

    async void OnSelectDeviceClick(string technologyType)
    {
        switch (technologyType)
        {
            case ConformConstants.TECHNOLOGY_ALPACA:
                if (selectedAlpacaDevice is null)
                {
                    var result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "SelectButton");

                    var x = (int)(result.Right) + 30;
                    var y = (int)(result.Top) - 40;

                    ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Select Device", Detail = $"No device has been selected!", Duration = 4000 });
                }
                else
                {
                    conformLogger.LogDebug("OnSelectDeviceClick", $"Alpaca device selected: {technologyType}");
                    configuration.Settings.CurrentDeviceName = selectedAlpacaDevice.AscomDeviceName;
                    configuration.Settings.CurrentAlpacaDevice = selectedAlpacaDevice;
                    configuration.Settings.CurrentDeviceType = selectedAlpacaDevice.AscomDeviceType;
                }
                break;

            case ConformConstants.TECHNOLOGY_COM:
                conformLogger.LogDebug("OnSelectDeviceClick", $"COM device selected: {technologyType}");
                configuration.Settings.CurrentDeviceType = selectedDeviceType;
                break;
        }

        configuration.Settings.CurrentDeviceTechnology = technologyType;
        configuration.Save();
        StateHasChanged();
    }

    void OnDeviceTypeChange(object value)
    {
        configuration.Save();

        switch (selectedTabNumber)
        {
            case 0:
                StartDiscovery();
                break;

            case 1:
                UpdateComDevices();
                break;
        }

        StateHasChanged();

    }

    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }


    void OnTabChange(int tabIndex)
    {
        selectedTabNumber = tabIndex;
        conformLogger.LogMessage("OnTabChange", $"Selected new tab: {tabIndex}");

        if (tabIndex == 1)
        {
            UpdateComDevices();
        }
        StateHasChanged();

    }

    private void UpdateComDevices()
    {
        comDeviceList.Clear();
        Dictionary<string, string> registeredDevices = ComDevices.GetRegisteredDrivers(selectedDeviceType, conformLogger);
        foreach (KeyValuePair<string, string> kvp in registeredDevices)
        {
            conformLogger.LogMessage("UpdateComDevices", $"Found device: {kvp.Key} {kvp.Value}");
            ComDevice comDevice = new ComDevice(kvp.Value, kvp.Key);
            comDeviceList.Add(new ComDeviceListItem(kvp.Value, comDevice));
        }

    }

}
