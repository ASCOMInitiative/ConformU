@page "/DeviceSelection"
@using ASCOM.Alpaca.Discovery
@using System.Net
@*@using AlpacaDiscovery*@
@using System.Threading
@using static ConformU.Globals
@using ASCOM.Com.DriverAccess
@using ASCOM.Com
@using ASCOM.Common
@inject NavigationManager UriHelper


@* Activity logger object*@
@inject ConformLogger conformLogger
@* Shared configuration object *@
@inject ConformConfiguration configuration
@* Radzen notification service to enable pop-up alerts *@
@inject NotificationService notificationService
@* JavaScript runtime reference *@
@inject IJSRuntime JS

<h2>Device Selection</h2>

@*Select device type drop-down*@
<div class="row" style="margin-left: 0px">

    <h5 style="padding-right: 1em;margin-top:5px;">Select device type</h5>

    <RadzenDropDown Style="width:300px"
                    AllowClear="false"
                    AllowFiltering="false"
                    Data=@validAscomdDeviceTypes
                    TValue="string"
                    @bind-Value=@selectedDeviceTypeString
                    Change=@(args => OnDeviceTypeChange(args)) />
</div>

@* Select device tabs *@
<RadzenTabs Style="height: auto; margin-top: 20px"
            RenderMode="TabRenderMode.Server"
            @bind-value=@selectedTabNumber
            Change=@(args => OnTabChange(args))>

    <Tabs>

        @* Alpaca device search tab *@
        <RadzenTabsItem Text="Alpaca Devices">
            <RadzenCard Style="margin-bottom: 20px; min-height: 120px; margin-right: 20px; overflow: auto;">

                <div class="row">

                    @* Alpaca device selection radio buttons *@
                    <RadzenCard Id="Devices" Style="margin-bottom: 20px; min-height:155px;  height:fit-content; margin-right: 20px; overflow: auto;">
                        <h3 style="color: #479cc8; margin-bottom:-4px">Automatically Discovered Devices</h3>
                        <RadzenRadioButtonList @bind-Value=@ascomDevice
                                               Orientation="Orientation.Vertical"
                                               Data=@ascomDevices
                                               TValue="AscomDevice"
                                               TextProperty="DisplayName"
                                               ValueProperty="AscomDevice"
                                               Change=@(args => OnNewAlpacaDeviceSelected(args)) />

                    </RadzenCard>

                    @* Alpaca discovery progress information *@
                    <RadzenCard Id="StatusContainer" Style="margin-bottom: 20px; height: fit-content; overflow: auto;">
                        <h3 style="color: #479cc8; margin-bottom:10px">Discovery Status</h3>
                        <RadzenTextArea Style="line-height: 1.5"
                                        Id="DiscoveryStatus"
                                        Rows="1"
                                        Cols=@statusWidthCols
                                        ReadOnly="true"
                                        @bind-Value=@alpacaDiscoveryProgress />

                    </RadzenCard>

                </div>
                @* Alpaca rediscover button *@
                <div class="row">

                    <RadzenButton Style="width: 150px; margin-left: 20px; margin-right:20px"
                                  Text="Rediscover"
                                  Disabled=@(discoveryInProgress | !configuration.Settings.AlpacaConfiguration.DiscoveryEnabled | (selectedDeviceTypeString == DeviceTypes.Video.ToString()))
                                  Click=@(args => OnAlpacaSearchClick()) />
                    @if (!configuration.Settings.AlpacaConfiguration.DiscoveryEnabled)
                    {
                        <p style="margin-top:6px; margin-right: 20px">Discovery is disabled in settings</p>
                    }
                    @if (selectedDeviceTypeString == DeviceTypes.Video.ToString())
                    {
                        <p style="margin-top:6px">Alpaca Video devices are not supported</p>
                    }

                </div>

            </RadzenCard>

            @* Alpaca manual device configuration *@
            <RadzenCard Style="margin-bottom: 20px; min-height:120px;  height:fit-content; margin-right: 20px; overflow: auto;">

                <div class="row">

                    <RadzenCard Style="margin-bottom: 20px; height: fit-content; margin-right: 20px">
                        <h3 style="color: #479cc8">Manual Alpaca device configuration</h3>
                        <div class="row">
                            <RadzenTextBox @bind-Value=@manualIpAddress Style="margin-left: 20px" Disabled=@(selectedDeviceTypeString == DeviceTypes.Video.ToString()) />
                            <RadzenLabel Text="IP address" Style="margin-left: 20px" />
                        </div>
                        <div style="margin-top:20px" class="row">
                            <RadzenNumeric Style="margin-left: 20px" @bind-Value="manualPortNumber" TValue="int" Min="1" Disabled=@(selectedDeviceTypeString == DeviceTypes.Video.ToString()) />
                            <p style="margin-left: 20px;margin-top: 5px;">IP port number</p>
                        </div>
                        <div style="margin-top:20px" class="row">
                            <RadzenNumeric Style="margin-left: 20px" @bind-Value="manualAlpacaDeviceNumber" TValue="int" Min="0" Disabled=@(selectedDeviceTypeString == DeviceTypes.Video.ToString()) />
                            <p style="margin-left: 20px;margin-top: 5px; margin-right: 20px">Alpaca device number</p>
                        </div>
                    </RadzenCard>

                </div>

                <div class="row">

                    <RadzenButton Style="margin-top: 0px; width: 150px; margin-left: 20px; margin-right: 20px"
                                  Text="Select"
                                  Disabled="@(discoveryInProgress | selectedDeviceTypeString == DeviceTypes.Video.ToString())"
                                  Click=@(args => OnManualAlpacaDeviceSelect()) />
                    @if (selectedDeviceTypeString == DeviceTypes.Video.ToString())
                    {
                        <p style="margin-top:6px">Alpaca Video devices are not supported</p>
                    }

                </div>

            </RadzenCard>
        </RadzenTabsItem>

        @* COM device search tab *@
        <RadzenTabsItem Text="Windows COM Drivers"
                        Disabled=@osIsNotWindows
                        Visible=@osIsWindows>

            <div class="row">

                @* COM device selection radio buttons *@
                <RadzenCard Style="margin-bottom: 20px; height:fit-content; margin-right: 20px; overflow: auto;">

                    <RadzenRadioButtonList @bind-Value=@comDevice
                                           Orientation="Orientation.Vertical"
                                           Data=@comDeviceList
                                           TValue="ComDevice"
                                           TextProperty="DisplayName"
                                           ValueProperty="ComDevice"
                                           Change=@(args => OnComDeviceChanged(args)) />
                </RadzenCard>

            </div>

        </RadzenTabsItem>

    </Tabs>

</RadzenTabs>

@code {
    const string MANUAL_DEVICE_NAME = "Manually configured device";
    string manualIpAddress = "127.0.0.1";
    int manualPortNumber = 11111;
    int manualAlpacaDeviceNumber = 0;
    int statusWidthCols = 20;

    AscomDevice ascomDevice;
    ComDevice comDevice;
    bool discoveryInProgress = false;
    List<string> validAscomdDeviceTypes = new() { DeviceTypes.Telescope.ToString(), DeviceTypes.Camera.ToString(), DeviceTypes.CoverCalibrator.ToString(), DeviceTypes.Dome.ToString(), DeviceTypes.FilterWheel.ToString(), DeviceTypes.Focuser.ToString(), DeviceTypes.ObservingConditions.ToString(), DeviceTypes.Rotator.ToString(), DeviceTypes.SafetyMonitor.ToString(), DeviceTypes.Switch.ToString(), DeviceTypes.Video.ToString() };
    DeviceTypes selectedDeviceType; // DeviceType of the selected device
    string selectedDeviceTypeString; // String representation of the currently selected DeviceType
    string alpacaDiscoveryProgress; // Text describing events happening while Alpaca discovery is underway
    AlpacaDiscovery discovery; // Alpaca discovery component
    bool osIsWindows; // OS environment type
    bool osIsNotWindows;
    int selectedTabNumber = 0; // Current tab number 0 = Alpaca, 1 = COM
    DeviceTechnology technologyType = DeviceTechnology.Alpaca; // Is the user selecting an Alpaca or a COM device?

    List<AlpacaDeviceListItem> ascomDevices = new(); // List of discovered Alpaca devices for use in the Alpaca devices Radzen radio button list
    List<ComDeviceListItem> comDeviceList = new(); // List of COM devices for use in the Radzen COM devices radio button list

    AscomDevice selectedAlpacaDevice; // Details of the currently selected Alpaca device
    ComDevice selectedComDevice; // Details of the currently selected COM device

    List<string> discoveredAlpacaDevices = new();


    /// <summary>
    /// Resize the status text area so that it does not display a scroll bar
    /// </summary>
    /// <returns></returns>
    async Task ResizeStatusHeight()
    {
        try
        {
            var result = await JS.InvokeAsync<object>("eval", new object[]
            {
                // The text below defines a three line JavaScript anonymous function, which is run by the () parentheses at the end of the string.
                @"(function() {
                  DiscoveryStatus.style.height='auto';
                  DiscoveryStatus.style.height=(DiscoveryStatus.scrollHeight + 2)+'px';
                  return DiscoveryStatus.scrollHeight;
                  })()"
            });
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("DeviceSelect.ResizeStatusHeight", MessageLevel.Debug, $"Ignoring exception when resizing status height:\r\n{ex}");
        }
    }

    private async void ResizeStatusArea()
    {
        // Set the width of the text area so that no lines are broken
        string[] discoveryStatusLines = alpacaDiscoveryProgress.Split("\n");
        statusWidthCols = discoveryStatusLines.OrderByDescending(s => s.Length).First().Length + 3;

        // Set the height of the text area
        await ResizeStatusHeight();
    }


    #region Initialisation and Load

    protected override void OnInitialized()
    {
        // Initialise variables
        selectedDeviceType = configuration.Settings.DeviceType.GetValueOrDefault(DeviceTypes.Telescope);

        selectedDeviceTypeString = selectedDeviceType.ToString();
        discovery = new AlpacaDiscovery(configuration.Settings.AlpacaConfiguration.StrictCasing, configuration.Settings.TraceDiscovery ? conformLogger : null); // Create a discovery component with or without logging
        discovery.AlpacaDevicesUpdated += AlpacaDeviceDiscovered;
        discovery.DiscoveryCompleted += AlpacaDiscoveryCompleted;

        // Define OS environment variables
        osIsWindows = OperatingSystem.IsWindows();
        osIsNotWindows = !osIsWindows;

        // Populate the manual settings fields if appropriate
        if (configuration.Settings.AlpacaDevice.AscomDeviceName == MANUAL_DEVICE_NAME)
        {
            manualAlpacaDeviceNumber = configuration.Settings.AlpacaDevice.AlpacaDeviceNumber;
            manualIpAddress = configuration.Settings.AlpacaDevice.IpAddress;
            manualPortNumber = configuration.Settings.AlpacaDevice.IpPort;
        }

        // Start an Alpaca discovery to populate the Alpaca device list if configured to do so
        StartDiscovery();
    }

    #endregion

    #region Page component event Handlers

    void OnTabChange(int tabIndex)
    {
        selectedTabNumber = tabIndex;

        switch (tabIndex)
        {
            case 0:
                StartDiscovery();
                break;

            case 1:
                UpdateComDevices();
                break;
        }
        StateHasChanged();

    }

    void OnDeviceTypeChange(object value)
    {
        SaveConfiguration();

        switch (selectedTabNumber)
        {
            case 0:
                ascomDevices.Clear();
                StartDiscovery();
                break;

            case 1:
                UpdateComDevices();
                break;
        }
    }

    #endregion

    #region Alpaca TAB event handlers

    private void OnManualAlpacaDeviceSelect()
    {
        try
        {
            // Update the selected device variable or initialise if there is no device

            selectedDeviceType = Devices.StringToDeviceType(selectedDeviceTypeString);
            configuration.Settings.DeviceType = selectedDeviceType;

            technologyType = DeviceTechnology.Alpaca;
            configuration.Settings.DeviceTechnology = technologyType;

            selectedAlpacaDevice = new AscomDevice(MANUAL_DEVICE_NAME,
                selectedDeviceType,
                manualAlpacaDeviceNumber,
                "UniqueID",
                ASCOM.Common.Alpaca.ServiceType.Http,
                new IPEndPoint(IPAddress.Parse(manualIpAddress), manualPortNumber),
                manualIpAddress,
                1,
                "Unknown server name",
                "Unknown manufacturer",
                "Unknown manufacturer version",
                "Unknown location");

            configuration.Settings.AlpacaDevice = selectedAlpacaDevice;
            ascomDevice = null;
            SaveConfiguration();
            configuration.RaiseUiHasChangedEvent();
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("OnNewAlpacaDeviceSelected", MessageLevel.Error, $"Exception: \r\n{ex}");
        }

    }

    private void OnNewAlpacaDeviceSelected(AscomDevice value)
    {
        try
        {
            // Update the selected device variable or initialise if there is no device
            selectedAlpacaDevice = (value is not null) ? value : new AscomDevice();
            ValidateAscomDevice(ref value);

            selectedDeviceType = Devices.StringToDeviceType(selectedDeviceTypeString);
            configuration.Settings.DeviceType = selectedDeviceType;

            technologyType = DeviceTechnology.Alpaca;
            configuration.Settings.DeviceTechnology = technologyType;

            configuration.Settings.AlpacaDevice = selectedAlpacaDevice;

            SaveConfiguration();
            configuration.RaiseUiHasChangedEvent();

            if (configuration.Settings.GoHomeOnDeviceSelected) UriHelper.NavigateTo("/");
        }
        catch (Exception ex)
        {
            conformLogger.LogMessage("OnNewAlpacaDeviceSelected", MessageLevel.Error, $"Exception: \r\n{ex}");
        }
    }

    private void ValidateAscomDevice(ref AscomDevice ascomDevice)
    {
        try
        {
            DeviceTypes? deviceType = ascomDevice.AscomDeviceType;
            // If we get here the device type is correctly formatted to the Enum type
        }
        catch
        {
            try
            {
                DeviceTypes? deviceType = ascomDevice.AscomDeviceType;
                // If we get here the device type is correct but is incorrectly cased compared to the Enum type so we update the object to the correct format
                if (configuration.Settings.AlpacaConfiguration.StrictCasing)
                {
                    conformLogger.LogMessage("ValidateAscomDevice", MessageLevel.Issue, $" Returned device type value: '{ascomDevice.AscomDeviceType}' is not correctly cased. It should be: '{deviceType.ToString()}'.");
                }
                else
                {
                    // Tolerant mode - no warnings to be given
                }
                ascomDevice.AscomDeviceType = deviceType; // Quietly update the stored device type
            }
            catch (Exception ex)
            {
                conformLogger.LogMessage("ValidateAscomDevice", MessageLevel.Issue, $"Unable to parse the returned ASCOM device type: '{ascomDevice.AscomDeviceType}' - {ex.Message}");
            }
        }
    }

    private void OnAlpacaSearchClick()
    {
        StartDiscovery();
    }

    private async void XXXXXXOnSelectAlpacaDeviceClick()
    {
        if (selectedAlpacaDevice is null)
        {
            var result = await JS.InvokeAsync<BoundingClientRectangle>("GetBoundingClientRect", "SelectAlpacaButton");

            var x = (int)(result.Right) + 30;
            var y = (int)(result.Top) - 40;

            ShowNotification(new NotificationMessage { Style = $"position: fixed; left: {x}px; top:{y}px;", Severity = NotificationSeverity.Error, Summary = "Select Device", Detail = $"No device has been selected!", Duration = 4000 });
        }
        else
        {
            configuration.Settings.AlpacaDevice = selectedAlpacaDevice;
            configuration.Settings.DeviceType = selectedAlpacaDevice.AscomDeviceType;
        }

        technologyType = DeviceTechnology.Alpaca;
        configuration.Settings.DeviceTechnology = technologyType;

        SaveConfiguration();
    }

    #endregion

    #region COM TAB event handlers

    void OnComDeviceChanged(ComDevice value)
    {
        selectedComDevice = value;
        if (value is null) value = new ComDevice("Unknown", "Unknown");

        selectedDeviceType = Enum.Parse<DeviceTypes>(selectedDeviceTypeString);
        configuration.Settings.DeviceType = selectedDeviceType;
        configuration.Settings.ComDevice = selectedComDevice;

        technologyType = DeviceTechnology.COM;
        configuration.Settings.DeviceTechnology = technologyType;

        SaveConfiguration();
        configuration.RaiseUiHasChangedEvent();

        if (configuration.Settings.GoHomeOnDeviceSelected) UriHelper.NavigateTo("/");

    }

    #endregion

    #region Alpaca discovery event handlers

    private async void AlpacaDiscoveryCompleted(object caller, EventArgs args)
    {
        alpacaDiscoveryProgress += $"Discovery complete!";
        ResizeStatusArea();
        ascomDevices = new();
        foreach (AscomDevice device in discovery.GetAscomDevices(Enum.Parse<DeviceTypes>(selectedDeviceTypeString)))
        {
            ascomDevices.Add(new AlpacaDeviceListItem($"{device.AscomDeviceName} ({device.IpAddress})", device));
            if ((device.AscomDeviceName == configuration.Settings.AlpacaDevice.AscomDeviceName) & (device.IpAddress == configuration.Settings.AlpacaDevice.IpAddress) & (configuration.Settings.DeviceTechnology == DeviceTechnology.Alpaca)) ascomDevice = device;
        }
        discoveryInProgress = false;
        configuration.Settings.OperationInProgress = false;
        configuration.RaiseUiHasChangedEvent();

        ascomDevices.Sort((a, b) => a.DisplayName.CompareTo(b.DisplayName));

        await InvokeAsync(StateHasChanged);
    }

    private async void AlpacaDeviceDiscovered(object caller, EventArgs args)
    {
        List<AscomDevice> newDevices = discovery.GetAscomDevices(Enum.Parse<DeviceTypes>(selectedDeviceTypeString));

        foreach (AscomDevice device in newDevices)
        {
            string deviceKey = $"{device.AscomDeviceName} {device.IpAddress} {device.IpPort}";
            if (!discoveredAlpacaDevices.Contains<string>(deviceKey))
            {
                discoveredAlpacaDevices.Add(deviceKey);
                alpacaDiscoveryProgress += $"{deviceKey}\r\n";
                ResizeStatusArea();
            }
        }
        //conformLogger.LogDebug("AlpacaDeviceDiscovered", $"Found {newDevices.Count} devices.");

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Support code

    private void UpdateComDevices()
    {
        comDeviceList.Clear();
        if (configuration.Settings.TraceDiscovery) conformLogger.LogMessage("UpdateComDevices", MessageLevel.Debug, $"Getting registered {selectedDeviceTypeString} drivers...");

        // Get the registered devices using the ASOCM.Standards ProfileAccess component.
        List<ASCOMRegistration> registeredDevices = Profile.GetDrivers(Devices.StringToDeviceType(selectedDeviceTypeString));
        foreach (ASCOMRegistration ascomRegistration in registeredDevices)
        {
            if (configuration.Settings.TraceDiscovery) conformLogger.LogMessage("UpdateComDevices", MessageLevel.Debug, $"Found device: {ascomRegistration.Name} - {ascomRegistration.ProgID}");
            ComDevice comDevice = new ComDevice($"{ascomRegistration.Name} ({ascomRegistration.ProgID})", ascomRegistration.ProgID);
            comDeviceList.Add(new ComDeviceListItem($"{ascomRegistration.Name} ({ascomRegistration.ProgID})", comDevice));
            if ((comDevice.ProgId == configuration.Settings.ComDevice.ProgId) &
                (comDevice.DisplayName == configuration.Settings.ComDevice.DisplayName) &
                (configuration.Settings.DeviceTechnology == DeviceTechnology.COM))
            {
                if (configuration.Settings.TraceDiscovery) conformLogger.LogMessage("UpdateComDevices", MessageLevel.Debug, $"Selecting device : {ascomRegistration.ProgID} - {ascomRegistration.Name}");
                this.comDevice = comDevice;
            }
        }
        comDeviceList.Sort((a, b) => a.DisplayName.CompareTo(b.DisplayName));

    }

    private void SaveConfiguration()
    {
        configuration.Save();
        StateHasChanged();
    }

    private async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private void StartDiscovery()
    {
        alpacaDiscoveryProgress = "";

        if (configuration.Settings.AlpacaConfiguration.DiscoveryEnabled & (selectedDeviceTypeString != DeviceTypes.Video.ToString()))
        {

            configuration.Settings.OperationInProgress = true;
            configuration.RaiseUiHasChangedEvent();
            discoveredAlpacaDevices.Clear();
            discoveryInProgress = true;
            alpacaDiscoveryProgress = $"Discovery started (Duration {configuration.Settings.AlpacaConfiguration.DiscoveryDuration:0.0} seconds)...\r\n";
            Task t = Task.Run(() =>
                discovery.StartDiscovery(configuration.Settings.AlpacaConfiguration.NumberOfDiscoveryPolls,
                (int)(configuration.Settings.AlpacaConfiguration.DiscoveryPollInterval * 1000),
                configuration.Settings.AlpacaConfiguration.DiscoveryPort,
                configuration.Settings.AlpacaConfiguration.DiscoveryDuration,
                configuration.Settings.AlpacaConfiguration.DiscoveryResolveName,
                configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV4,
                configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV6,
                configuration.Settings.AlpacaConfiguration.AccessServiceType)
            );
            StateHasChanged();
        }
    }

    #endregion

}
