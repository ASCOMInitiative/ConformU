@page "/Settings"
@using ASCOM
@using ASCOM.Alpaca
@using ASCOM.Common.Alpaca
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@using static ConformU.Globals

@*Title and settings reset button*@
<div class="row">
    <h1>Settings</h1>

    <RadzenButton Click=@(args => OnResetButtonClick()) Text="Reset to Defaults" Style="margin-bottom: 20px; position: absolute; right: 30px;" />
</div>

@*Status message*@
<div class="row">
    <h3 style="margin-top: 20px">Configuration status:   @status</h3>
</div>

@*Configuration tabs*@
<RadzenTabs Change=@OnTabChange style="height: 820px;margin-top:20px; width:auto; height: auto" RenderMode="TabRenderMode.Client">
    <Tabs>

        @*Conform configuration*@
        <RadzenTabsItem Text="Conform">
            <div class="row" style="margin-top: 10px">
                <RadzenCard Style="margin-bottom: 20px; margin-right: 20px">
                    <h3 style="color: #479cc8; margin-bottom: 0;">Test Scope</h3>
                    <RadzenCheckBoxList @bind-Value=@conformanceTestScope TValue="int" Orientation="Orientation.Vertical" Change=@(args => OnConformTestScopeChange(args))>
                        <Items>
                            <RadzenCheckBoxListItem Text="Test Properties" Value="0" />
                            <RadzenCheckBoxListItem Text="Test Methods" Value="1" />
                            <RadzenCheckBoxListItem Text="Test SideOfPier Read" Value="2" />
                            <RadzenCheckBoxListItem Text="Test SideOfPier Write" Value="3" />
                            <RadzenCheckBoxListItem Text="Test Performance" Value="4" />
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenCard>

                <RadzenCard Style="margin-bottom:20px;margin-right: 20px">
                    <h3 style="color: #479cc8; margin-bottom: 0;">Operation</h3>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Style="margin-top:6px;" Name="CHKUPDATES" @bind-Value=@chkUpdates TValue="bool" Change=@(args =>
                                        OnCheckboxChange(args, CheckBoxConfigurationItem.UpdateCheck)) />
                        <RadzenLabel Text="Check for updates (not implemented)" Component="CHKUPDATES" Style="margin-top:6px; margin-left: 5px;margin-right:5px;" />
                        <RadzenTextBox @bind-Value="lastUpdateDate" Disabled=true />
                    </div>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKMETHODCALLS" @bind-Value=@chkDisplayCalls TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DisplayCalls)) />
                        <RadzenLabel Text="Display method calls" Component="CHKMETHODCALLS" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKDEBUG" @bind-Value=@chkDebug TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.Debug)) />
                        <RadzenLabel Text="Debug enabled" Component="CHKDEBUG" Style="margin-left: 5px;" />
                    </div>
                </RadzenCard>

                <RadzenCard Style="margin-bottom:20px">
                    <h3 style="color: #479cc8; margin-bottom: 0;">Additional Tracing</h3>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKTRACEDISCOVERY"
                                        @bind-Value=@chkTraceDiscovery
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceDiscovery)) />
                        <RadzenLabel Text="Trace discovery" Component="CHKTRACEDISCOVERY" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKTRACEALPACA"
                                        @bind-Value=@chkTraceAlpacaCalls
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceAlpacaCalls)) />
                        <RadzenLabel Text="Trace Alpaca calls" Component="CHKTRACEALPACA" Style="margin-left: 5px;" />
                    </div>
                </RadzenCard>

            </div>
        </RadzenTabsItem>

        @*Alpaca and COM configuration*@
        <RadzenTabsItem Text=@alpacaAndComText>
            <div class="row" style="margin-top: 10px">
                <RadzenCard Style="width:510px; margin-left: 10px; margin-bottom: 20px;  margin-right: 20px">
                    <h3 style="color: #479cc8; margin-bottom: 0;">Alpaca Discovery and Access</h3>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKDISCOVERYENABLED" @bind-Value=@alpacaDiscoveryEnabled TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DiscoveryEnabled)) />
                        <RadzenLabel Text="Enable Alpaca discovery" Component="CHKDISCOVERYENABLED" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top: 15px">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em"
                                       @bind-Value="alpacaNumberOfDiscoveryPolls"
                                       TValue="int"
                                       Min="1"
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.AlpacaNumberOfDiscoveryPolls)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Number of discovery polls (Default 1)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em "
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       Format="0.0"
                                       @bind-Value="alpacaDiscoveryPollInterval"
                                       Step="0.1"
                                       TValue="double"
                                       Min="0.1M"
                                       Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.AlpacaDiscoveryPollInterval)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Interval between polls (Seconds - default 1.0)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em "
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       @bind-Value="alpacaDiscoveryPort"
                                       TValue="int"
                                       Min="1"
                                       Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.AlpacaDiscoveryPort)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Alpaca discovery port (Default 32227)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em"
                                       Disabled=@(!alpacaDiscoveryEnabled)
                                       Format="0.0"
                                       @bind-Value="alpacaDiscoveryDuration"
                                       Step="0.1"
                                       TValue="double"
                                       Min="0.1M"
                                       Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.AlpacaDiscoveryDuration)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Discovery duration (Seconds - default 1.0)</p>
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenDropDown @bind-Value=@alpacaServiceType
                                        Disabled=@(!alpacaDiscoveryEnabled)
                                        Style="width:8em"
                                        Data="serviceTypeOptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ServiceType"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Name="DROP1"
                                        Change=@(args => OnServiceTypeChange(args)) />
                        <RadzenLabel Text="Service type (Default HTTP)" Component="DROP1" Style="margin-left: 20px;margin-top:5px" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKUSEIPV4"
                                        Disabled=@(!alpacaDiscoveryEnabled)
                                        @bind-Value=@alpacaDiscoveryUseIpV4
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV4)) />
                        <RadzenLabel Text="Use IPv4 (Default Yes)" Component="CHKUSEIPV4" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKUSEIPV6"
                                        Disabled=@(!alpacaDiscoveryEnabled)
                                        @bind-Value=@alpacaDiscoveryUseIpV6
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV6)) />
                        <RadzenLabel Text="Use IPv6 (Default No)" Component="CHKUSEIPV6" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKRESOLVEDNSNAMES"
                                        Disabled=@(!alpacaDiscoveryEnabled)
                                        @bind-Value=@alpacaDiscoveryResolveName
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryResolveName)) />
                        <RadzenLabel Text="Resolve DNS names (Default No)" Component="CHKRESOLVEDNSNAMES" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHKSTRICTCASING"
                                        @bind-Value=@strictCasing
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.StrictCasing)) />
                        <RadzenLabel Text="Use strict JSON casing (Only unset this for testing)" Component="CHKSTRICTCASING" Style="margin-left: 20px;" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenDropDown @bind-Value=@alpacaImageArrayTransferType
                                        Style="width:11em"
                                        Data="imageArrayTypeOptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ImageArrayTransferType"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Name="DROP2"
                                        Change=@(args => OnImageArrayTypeChange(args)) />
                        <RadzenLabel Text="Image array transfer type (Default JSON)" Component="DROP2" Style="margin-left: 20px;margin-top:5px" />
                    </div>

                </RadzenCard>

                @if (OperatingSystem.IsWindows())
                {
                    <div class="row" style="margin-left: 0px">
                        <RadzenCard Visible="@isWindowsOs" Style="margin-left: 10px; width: 300px; margin-bottom: 20px;">
                            <h3 style="color: #479cc8">COM Access Mechanic</h3>
                            <RadzenDropDown @bind-Value=@comAccessMechanic
                                        Style="width:245px"
                                        Data="comAccessMechanicoptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ComAccessMechanic"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Change=@(args => OnComAccessModeChange(args)) />

                        </RadzenCard>
                    </div>
                }
            </div>
        </RadzenTabsItem>

        @*Telescope configuration*@
        <RadzenTabsItem Text="Telescope">
            <div class="row">
                <RadzenCard Style="margin-left: 10px;padding-bottom:5px;margin-right: 10px;margin-bottom: 20px">
                    <h3 style="margin-top: 5px; color: #479cc8">Select which tests Conform should perform.</h3>

                    <div class="row" style="margin-top:0px;">
                        <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(true)) Text="Check all" Style="margin-left: 20px; " />
                        <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(false)) Text="Uncheck all" Style="margin-left: 20px; " />
                    </div>

                    <RadzenCheckBoxList @bind-Value=@telescopeTests
                                        Style="margin-top:10px;margin-bottom: 0px"
                                        TValue="string"
                                        Orientation="Orientation.Vertical"
                                        Change=@(args => OnTelescopeTestsChange(args,""))>
                        <Items>
                            @foreach (var item in configuration.Settings.TelescopeTests)
                            {
                                <RadzenCheckBoxListItem Text="@item.Key" Value="@item.Key" />
                            }
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenCard>

                <RadzenCard Style="margin-left: 10px">
                    <h3 style="margin-top: 5px; color: #479cc8">Further configuration.</h3>
                    <div class="row">

                        <RadzenCheckBox Name="TELEFIRSTUSETESTS"
                                        Style="margin-top:20px;margin-left:20px"
                                        @bind-Value=@telescopeFirstUseTests
                                        TValue="bool"
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TelescopeFirstUseTests)) />
                        <RadzenLabel Text="Enable first time use tests (Target RA/DEC throw exceptions if not set.)"
                                     Component="TELEFIRSTUSETESTS"
                                     Style="margin-left: 20px;margin-top:20px; margin-right: 20px" />
                    </div>

                    <div class="row">
                        <RadzenNumeric Name="TELESCOPESLEWTOLERANCE"
                                       Style="margin-top: 20px; width: 6em"
                                       Format="0.00"
                                       @bind-Value="@telescopeSlewTolerance"
                                       TValue="double"
                                       Min="0.0m"
                                       Step="0.1"
                                       Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.TelescopeSlewTolerance)) />
                        <RadzenLabel Text="Telescope slew accuracy tolerance (arc-seconds))"
                                     Component="TELESCOPESLEWTOLERANCE"
                                     Style="margin-left: 20px;margin-top:26px; margin-right: 20px" />
                    </div>
                </RadzenCard>
            </div>
        </RadzenTabsItem>

        @*Camera configuration*@
        <RadzenTabsItem Text="Camera">
            <h3 style="margin-top: 10px">Conform will normally test camera imaging at all supported bin values that the camera reports through MaxBinX and MaxBinY.</h3>

            <div style="margin-top:40px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinX" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraMaxBinX)) />
                <p style="margin-left: 20px;margin-top: 5px;">Max BinX for testing. (Zero tests all available bin values.)</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinY" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraMaxBinY)) />
                <p style="margin-left: 20px;margin-top: 5px;">Max BinY for testing. (Zero tests all available bin values.)</p>
            </div>

            <h3 style="margin-top: 20px;">
                By default, Conform will test the camera assuming that it has just been started and has not taken any images.
                Uncheck the checkbox below to suppress issues flagged by these first use checks.
            </h3>
            <div class="row">
                <RadzenCheckBox Name="CHKFIRSTUSETESTS"
                                Style="margin-top:20px;margin-left:190px"
                                @bind-Value=@cameraFirstUseTests
                                TValue="bool"
                                Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.CameraFirstUseTests)) />
                <RadzenLabel Text="Enable first time use tests"
                             Component="CHKFIRSTUSETESTS"
                             Style="margin-left: 20px;margin-top:20px;" />
            </div>

            <div class="row">
                <RadzenCheckBox Name="CHKTESTIMAGEARRAYVARIANT"
                                Style="margin-top:20px;margin-left:190px"
                                @bind-Value=@cameraTestImageArrayVariant
                                TValue="bool"
                                Change=@(args => OnBoolItemChange(args, BoolConfigurationItem.TestImageArrayVariant)) />
                <RadzenLabel Text="Test ImageArrayVariant property"
                             Component="CHKTESTIMAGEARRAYVARIANT"
                             Style="margin-left: 20px;margin-top:20px;" />
            </div>
        </RadzenTabsItem>

        @*Dome configuration*@
        <RadzenTabsItem Text="Dome">
            <h3 style="margin-top: 10px">These settings control how long Conform waits for actions to complete before reporting a timeout.</h3>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeShutterTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeShutterTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Shutter movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeAzimuthTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeAzimuthTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Azimuth movement completion timeout</p>
            </div>
            <div style="margin-top:40px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeAltitudeTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeAltitudeTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Altitude movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeStabilisationWaitTime" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeStabilisationWaitTime)) />
                <p style="margin-left: 20px;margin-top: 5px;">Movement stabilisation wait time</p>
            </div>

            <h3 style="margin-top: 2em">By default commands to open the dome shutter will be suppressed to protect observing equipment.</h3>
            <h3 style="margin-top: 0em">For a full conformance check, the dome must be permitted to open its shutter.</h3>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKOPENSHUTTER" @bind-Value=@domeOpenShutter TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DomeOpenShutter)) />
                <RadzenLabel Text="Weather safety - Allow dome to open during testing." Component="CHKOPENSHUTTER" Style="margin-left: 5px;" />
            </div>

            <div class="row">
                <RadzenNumeric Name="DOMESLEWTOLERANCE"
                               Style="margin-top:20px; width: 6em"
                               Format="0.00"
                               @bind-Value="@domeSlewTolerance"
                               TValue="double"
                               Min="0.0m"
                               Step="0.1"
                               Change=@(args => OnDoubleItemChange(args, NumericConfigurationItem.DomeSlewtolerance)) />
                <RadzenLabel Text="Dome slew accuracy tolerance (degrees))"
                             Component="DOMESLEWTOLERANCE"
                             Style="margin-left: 20px;margin-top:20px; margin-right: 26px" />
            </div>

        </RadzenTabsItem>

        @*ObservingConditions  configuration*@
        <RadzenTabsItem Text="ObservingConditions">
            <h3 style="margin-top: 10px">These settings control how long Conform waits for actions to complete before reporting a timeout.</h3>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="observingConditionsMaxRetries" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ObservingConditionsMaxRetries)) />
                <p style="margin-left: 20px;margin-top: 5px;">Number of attempts to read a property when an invalid operation is reported.</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="observingConditionsRetryTime" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ObservingConditionsRetryTime)) />
                <p style="margin-left: 20px;margin-top: 5px;">Wait time between invalid operation retries.</p>
            </div>

        </RadzenTabsItem>

        @*Switch configuration*@
        <RadzenTabsItem Text="Switch">
            <h3 style="margin-top: 10px">These settings control how much delay is added after reading or writing to a switch to enable it to settle.</h3>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchReadDelay" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchReadDelay)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch read delay (ms).</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchWriteDelay" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchWriteDelay)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch write delay (ms).</p>
            </div>

            <h3 style="margin-top:40px;">This setting controls how far Conform tests for working switches outside the configured range 1 ==> MaxSwitch. Tests will be conducted in the ranges (-XXX ==> 0) and (MaxSwitch + 1 ==> +XXX).</h3>

            <div style="margin-top:0px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchExtendedNumberTestRange" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchExtendedNumberTestRange)) />
                <p style="margin-left: 20px;margin-top: 5px;">Extended switch number test range.</p>
            </div>

            <h3 style="margin-top: 2em">Device Safety - By default, switch Set tests are disabled, check this box to enable switches to be set.</h3>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKSWITCHEXTENDEDTESTRANGE" @bind-Value=@switchEnableSet TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.SwitchEnableSet)) />
                <RadzenLabel Text="Allow switches to be set and changed." Component="CHKSWITCHEXTENDEDTESTRANGE" Style="margin-left: 5px;" />
            </div>

        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>

@code {
    double telescopeSlewTolerance;
    double domeSlewTolerance;
    bool alpacaDiscoveryEnabled = true;
    string alpacaAndComText;
    bool strictCasing;
    bool chkTraceDiscovery;
    bool chkTraceSettings;
    bool chkTraceAlpacaCalls;
    bool cameraTestImageArrayVariant;

    ImageArrayTransferType alpacaImageArrayTransferType;

    private List<KeyValuePair<string, ImageArrayTransferType>> imageArrayTypeOptions = new()
        {
            new KeyValuePair<string, ImageArrayTransferType>("JSON", ImageArrayTransferType.JSON),
            new KeyValuePair<string, ImageArrayTransferType>("Base64HandOff", ImageArrayTransferType.Base64HandOff),
            new KeyValuePair<string, ImageArrayTransferType>("ImageBytes", ImageArrayTransferType.ImageBytes),
            new KeyValuePair<string, ImageArrayTransferType>("Best available", ImageArrayTransferType.BestAvailable)
        };

    void OnImageArrayTypeChange(object imageArrayTransferTypeObject)
    {
        ImageArrayTransferType imageArrayTransferType = (ImageArrayTransferType)imageArrayTransferTypeObject;
        configuration.Settings.AlpacaConfiguration.ImageArrayTransferType = imageArrayTransferType;
        SaveConfiguration();
    }

    void OnServiceTypeChange(object serviceMode)
    {
        ServiceType serviceType = (ServiceType)serviceMode;
        configuration.Settings.AlpacaConfiguration.AccessServiceType = serviceType;
        SaveConfiguration();
    }

    private ServiceType alpacaServiceType;

    private bool isWindowsOs;

    private enum BoolConfigurationItem
    {
        TestImageArrayVariant
    }

    private enum NumericConfigurationItem
    {
        CameraMaxBinX,
        CameraMaxBinY,
        DomeShutterTimeout,
        DomeAzimuthTimeout,
        DomeAltitudeTimeout,
        DomeStabilisationWaitTime,
        ObservingConditionsRetryTime,
        ObservingConditionsMaxRetries,
        SwitchReadDelay,
        SwitchWriteDelay,
        SwitchExtendedNumberTestRange,
        AlpacaNumberOfDiscoveryPolls,
        AlpacaDiscoveryPollInterval,
        AlpacaDiscoveryPort,
        AlpacaDiscoveryDuration,
        TelescopeSlewTolerance,
        DomeSlewtolerance
    }

    private enum CheckBoxConfigurationItem
    {
        Debug,
        DisplayCalls,
        DomeOpenShutter,
        SwitchEnableSet,
        UpdateCheck,
        AlpacaDiscoveryResolveName,
        AlpacaDiscoveryUseIpV4,
        AlpacaDiscoveryUseIpV6,
        StrictCasing,
        TraceDiscovery,
        TraceAlpacaCalls,
        CameraFirstUseTests,
        DiscoveryEnabled,
        TelescopeFirstUseTests
    }

    // Camera test configuration
    private int cameraTestMaxBinX;
    private int cameraTestMaxBinY;
    bool cameraFirstUseTests = false;

    // Dome test configuration
    private int domeShutterTimeout;
    private int domeAzimuthTimeout;
    private int domeAltitudeTimeout;
    private int domeStabilisationWaitTime;
    private bool domeOpenShutter;

    // Telescope test configuration
    private IEnumerable<string> telescopeTests;
    private string status;
    bool telescopeFirstUseTests = false;

    // ObservingConditions test configuration
    private int observingConditionsRetryTime;
    private int observingConditionsMaxRetries;

    // Switch test configuration
    private bool switchEnableSet;
    private int switchReadDelay;
    private int switchWriteDelay;
    private int switchExtendedNumberTestRange;

    // Conform general configuration
    private IEnumerable<int> conformanceTestScope = new List<int>() { 0, 1, 2, 3 };
    private bool chkUpdates;
    private bool chkDisplayCalls;
    private bool chkDebug;
    private string lastUpdateDate = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

    // Alpaca configuration
    private int alpacaNumberOfDiscoveryPolls;
    private double alpacaDiscoveryPollInterval;
    private int alpacaDiscoveryPort;
    private double alpacaDiscoveryDuration;
    public bool alpacaDiscoveryResolveName;
    public bool alpacaDiscoveryUseIpV4;
    public bool alpacaDiscoveryUseIpV6;

    private ComAccessMechanic comAccessMechanic = ComAccessMechanic.Native;
    private List<KeyValuePair<string, ComAccessMechanic>> comAccessMechanicoptions = new()
        {
            new KeyValuePair<string, ComAccessMechanic>("Native", ComAccessMechanic.Native),
            new KeyValuePair<string, ComAccessMechanic>("Driver Access", ComAccessMechanic.DriverAccess)
        };

    private List<KeyValuePair<string, ServiceType>> serviceTypeOptions = new()
        {
            new KeyValuePair<string, ServiceType>("HTTP", ServiceType.Http),
            new KeyValuePair<string, ServiceType>("HTTPS", ServiceType.Https)
        };

    protected override void OnInitialized()
    {
        status = $"{configuration.Status} - Configuration file: {configuration.SettingsFileName}";
        SetConfiguration();

        isWindowsOs = OperatingSystem.IsWindows();

        if (isWindowsOs)
        {
            alpacaAndComText = "Alpaca and COM";
        }
        else
        {
            alpacaAndComText = "Alpaca";
        }
    }

    private void OnBoolItemChange(bool newValue, BoolConfigurationItem boolConfigurationItem)
    {
        switch (boolConfigurationItem)
        {
            case BoolConfigurationItem.TestImageArrayVariant:
                configuration.Settings.TestImageArrayVariant = newValue;
                break;

            default:
                throw new InvalidValueException($"OnDoubleItemChange - Unknown numeric configurtation item: {boolConfigurationItem}");
        }
        SaveConfiguration();
    }


    private void OnDoubleItemChange(double newValue, NumericConfigurationItem numericConfigurationItem)
    {
        switch (numericConfigurationItem)
        {
            case NumericConfigurationItem.AlpacaDiscoveryDuration:
                configuration.Settings.AlpacaConfiguration.DiscoveryDuration = newValue;
                break;

            case NumericConfigurationItem.AlpacaDiscoveryPollInterval:
                configuration.Settings.AlpacaConfiguration.DiscoveryPollInterval = newValue;
                break;

            case NumericConfigurationItem.TelescopeSlewTolerance:
                configuration.Settings.TelescopeSlewTolerance = newValue;
                break;

            case NumericConfigurationItem.DomeSlewtolerance:
                configuration.Settings.DomeSlewTolerance = newValue;
                break;

            default:
                throw new InvalidValueException($"OnDoubleItemChange - Unknown numeric configurtation item: {numericConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void OnIntegerItemChange(int newValue, NumericConfigurationItem numericConfigurationItem)
    {
        switch (numericConfigurationItem)
        {
            case NumericConfigurationItem.CameraMaxBinX:
                configuration.Settings.CameraMaxBinX = newValue;
                break;

            case NumericConfigurationItem.CameraMaxBinY:
                configuration.Settings.CameraMaxBinY = newValue;
                break;

            case NumericConfigurationItem.DomeAltitudeTimeout:
                configuration.Settings.DomeAltitudeTimeout = newValue;
                break;

            case NumericConfigurationItem.DomeAzimuthTimeout:
                configuration.Settings.DomeAzimuthTimeout = newValue;
                break;

            case NumericConfigurationItem.DomeStabilisationWaitTime:
                configuration.Settings.DomeStabilisationWaitTime = newValue;
                break;

            case NumericConfigurationItem.DomeShutterTimeout:
                configuration.Settings.DomeShutterTimeout = newValue;
                break;

            case NumericConfigurationItem.ObservingConditionsMaxRetries:
                configuration.Settings.ObservingConditionsMaxRetries = newValue;
                break;

            case NumericConfigurationItem.ObservingConditionsRetryTime:
                configuration.Settings.ObservingConditionsRetryTime = newValue;
                break;

            case NumericConfigurationItem.SwitchExtendedNumberTestRange:
                configuration.Settings.SwitchExtendedNumberTestRange = newValue;
                break;

            case NumericConfigurationItem.SwitchReadDelay:
                configuration.Settings.SwitchReadDelay = newValue;
                break;

            case NumericConfigurationItem.SwitchWriteDelay:
                configuration.Settings.SwitchWriteDelay = newValue;
                break;

            case NumericConfigurationItem.AlpacaDiscoveryPort:
                configuration.Settings.AlpacaConfiguration.DiscoveryPort = newValue;
                break;

            case NumericConfigurationItem.AlpacaNumberOfDiscoveryPolls:
                configuration.Settings.AlpacaConfiguration.NumberOfDiscoveryPolls = newValue;
                break;

            default:
                throw new InvalidValueException($"OnIntegerItemChange - Unknown numeric configurtation item: {numericConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void SaveConfiguration()
    {
        configuration.Save();
        status = configuration.Status;
        StateHasChanged();
    }

    void OnComAccessModeChange(object accessMode)
    {
        ComAccessMechanic comMechanic = (ComAccessMechanic)accessMode;
        configuration.Settings.ComConfiguration.ComACcessMechanic = comAccessMechanic;
        SaveConfiguration();
    }

    private void SetConfiguration()
    {
        List<int> newScope = new();

        // Set scope
        if (configuration.Settings.TestProperties) newScope.Add(0);
        if (configuration.Settings.TestMethods) newScope.Add(1);
        if (configuration.Settings.TestSideOfPierRead) newScope.Add(2);
        if (configuration.Settings.TestSideOfPierWrite) newScope.Add(3);
        if (configuration.Settings.TestPerformance) newScope.Add(4);
        conformanceTestScope = newScope;

        // Operation settings
        chkUpdates = configuration.Settings.UpdateCheck;
        chkDisplayCalls = configuration.Settings.DisplayMethodCalls;
        chkDebug = configuration.Settings.Debug;

        // Trace settings
        chkTraceDiscovery = configuration.Settings.TraceDiscovery;
        chkTraceSettings = configuration.Settings.TraceDiscovery;
        chkTraceAlpacaCalls = configuration.Settings.TraceAlpacaCalls;

        // COM Settings
        comAccessMechanic = configuration.Settings.ComConfiguration.ComACcessMechanic;

        // Telescope tests
        telescopeTests = new List<string>();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            if (item.Value) ((List<string>)telescopeTests).Add(item.Key);
        }
        telescopeFirstUseTests = configuration.Settings.TelescopeFirstUseTests;
        telescopeSlewTolerance = configuration.Settings.TelescopeSlewTolerance;

        // Camera tests
        cameraTestMaxBinX = configuration.Settings.CameraMaxBinX;
        cameraTestMaxBinY = configuration.Settings.CameraMaxBinY;
        cameraFirstUseTests = configuration.Settings.CameraFirstUseTests;
        cameraTestImageArrayVariant = configuration.Settings.TestImageArrayVariant;

        // Dome tests
        domeShutterTimeout = configuration.Settings.DomeShutterTimeout;
        domeAzimuthTimeout = configuration.Settings.DomeAzimuthTimeout;
        domeAltitudeTimeout = configuration.Settings.DomeAltitudeTimeout;
        domeStabilisationWaitTime = configuration.Settings.DomeStabilisationWaitTime;
        domeOpenShutter = configuration.Settings.DomeOpenShutter;
        domeSlewTolerance = configuration.Settings.DomeSlewTolerance;

        // ObservingConditions tests
        observingConditionsMaxRetries = configuration.Settings.ObservingConditionsMaxRetries;
        observingConditionsRetryTime = configuration.Settings.ObservingConditionsRetryTime;

        // Switch tests
        switchEnableSet = configuration.Settings.SwitchEnableSet;
        switchExtendedNumberTestRange = configuration.Settings.SwitchExtendedNumberTestRange;
        switchReadDelay = configuration.Settings.SwitchReadDelay;
        switchWriteDelay = configuration.Settings.SwitchWriteDelay;

        // Alpaca configuration
        alpacaDiscoveryEnabled = configuration.Settings.AlpacaConfiguration.DiscoveryEnabled;
        alpacaDiscoveryDuration = configuration.Settings.AlpacaConfiguration.DiscoveryDuration;
        alpacaDiscoveryPollInterval = configuration.Settings.AlpacaConfiguration.DiscoveryPollInterval;
        alpacaDiscoveryPort = configuration.Settings.AlpacaConfiguration.DiscoveryPort;
        alpacaNumberOfDiscoveryPolls = configuration.Settings.AlpacaConfiguration.NumberOfDiscoveryPolls;
        alpacaDiscoveryResolveName = configuration.Settings.AlpacaConfiguration.DiscoveryResolveName;
        alpacaDiscoveryUseIpV4 = configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV4;
        alpacaDiscoveryUseIpV6 = configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV6;
        alpacaServiceType = configuration.Settings.AlpacaConfiguration.AccessServiceType;
        strictCasing = configuration.Settings.AlpacaConfiguration.StrictCasing;
        alpacaImageArrayTransferType = configuration.Settings.AlpacaConfiguration.ImageArrayTransferType;
    }

    void OnConformTestScopeChange(IEnumerable<int> scope)
    {
        List<int> newScope = new();
        bool propertiesEnabled = scope.Contains(0);
        bool methodsEnabled = scope.Contains(1);
        bool sideofPierReadEnabled = scope.Contains(2);
        bool sideofPierWriteEnabled = scope.Contains(3);
        bool performanceEnabled = scope.Contains(4);

        if (sideofPierWriteEnabled)
        {
            newScope = new List<int>() { 0, 1, 2, 3 };
            configuration.Settings.TestProperties = true;
            configuration.Settings.TestMethods = true;
            configuration.Settings.TestSideOfPierRead = true;
            configuration.Settings.TestSideOfPierWrite = true;

        }
        else
        {
            if (sideofPierReadEnabled)
            {
                newScope = new List<int>() { 0, 1, 2 };
                configuration.Settings.TestProperties = true;
                configuration.Settings.TestMethods = true;
                configuration.Settings.TestSideOfPierRead = true;
                configuration.Settings.TestSideOfPierWrite = false;
            }
            else
            {
                if (methodsEnabled)
                {
                    newScope = new List<int>() { 0, 1 };
                    configuration.Settings.TestProperties = true;
                    configuration.Settings.TestMethods = true;
                    configuration.Settings.TestSideOfPierRead = false;
                    configuration.Settings.TestSideOfPierWrite = false;
                }
                else
                {
                    if (propertiesEnabled)
                    {
                        newScope = new List<int>() { 0 };
                        configuration.Settings.TestProperties = true;
                        configuration.Settings.TestMethods = false;
                        configuration.Settings.TestSideOfPierRead = false;
                        configuration.Settings.TestSideOfPierWrite = false;
                    }
                    else
                    {
                        newScope = new List<int>();
                        configuration.Settings.TestProperties = false;
                        configuration.Settings.TestMethods = false;
                        configuration.Settings.TestSideOfPierRead = false;
                        configuration.Settings.TestSideOfPierWrite = false;
                    }
                }
            }
        }
        if (performanceEnabled)
        {
            newScope.Add(4);
            configuration.Settings.TestPerformance = true;
        }
        else
        {
            configuration.Settings.TestPerformance = false;
        }

        scope = newScope;
        SaveConfiguration();
    }

    void OnResetButtonClick()
    {
        configuration.Reset();
        status = configuration.Status;
        SetConfiguration();
        StateHasChanged();
    }

    void OnCheckboxChange(bool args, CheckBoxConfigurationItem name)
    {
        switch (name)
        {
            case CheckBoxConfigurationItem.UpdateCheck:
                configuration.Settings.UpdateCheck = chkUpdates;
                break;

            case CheckBoxConfigurationItem.DisplayCalls:
                configuration.Settings.DisplayMethodCalls = chkDisplayCalls; ;
                break;

            case CheckBoxConfigurationItem.Debug:
                configuration.Settings.Debug = chkDebug;
                break;

            case CheckBoxConfigurationItem.DomeOpenShutter:
                configuration.Settings.DomeOpenShutter = domeOpenShutter;
                break;

            case CheckBoxConfigurationItem.SwitchEnableSet:
                configuration.Settings.SwitchEnableSet = switchEnableSet;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryResolveName:
                configuration.Settings.AlpacaConfiguration.DiscoveryResolveName = alpacaDiscoveryResolveName;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV4:
                configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV4 = alpacaDiscoveryUseIpV4;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV6:
                configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV6 = alpacaDiscoveryUseIpV6;
                break;

            case CheckBoxConfigurationItem.StrictCasing:
                configuration.Settings.AlpacaConfiguration.StrictCasing = strictCasing;
                break;

            case CheckBoxConfigurationItem.TraceDiscovery:
                configuration.Settings.TraceDiscovery = chkTraceDiscovery;
                break;

            case CheckBoxConfigurationItem.TraceAlpacaCalls:
                configuration.Settings.TraceAlpacaCalls = chkTraceAlpacaCalls;
                break;

            case CheckBoxConfigurationItem.CameraFirstUseTests:
                configuration.Settings.CameraFirstUseTests = cameraFirstUseTests;
                break;

            case CheckBoxConfigurationItem.DiscoveryEnabled:
                configuration.Settings.AlpacaConfiguration.DiscoveryEnabled = alpacaDiscoveryEnabled;
                break;

            case CheckBoxConfigurationItem.TelescopeFirstUseTests:
                configuration.Settings.TelescopeFirstUseTests = telescopeFirstUseTests;
                break;

            default:
                throw new InvalidValueException($"OnCheckboxChange - Unknown checkbox name: {name}");
        }

        SaveConfiguration();
    }

    void OnTabChange(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

    #region Telescope TAB

    private void OnSetTelescopeTestsButtonClick(bool state)
    {
        Dictionary<string, bool> changedTests = new();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            changedTests.Add(item.Key, state);
        }
        configuration.Settings.TelescopeTests = changedTests;

        SaveConfiguration();
        SetConfiguration();
        StateHasChanged();
    }

    void OnTelescopeTestsChange(IEnumerable<string> value, string asd)
    {
        Dictionary<string, bool> newTelescopetestValues = new();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            newTelescopetestValues[item.Key] = false;
        }

        foreach (string i in value)
        {
            newTelescopetestValues[i] = true;
        }
        configuration.Settings.TelescopeTests = newTelescopetestValues;
        SaveConfiguration();
    }

    #endregion

}
