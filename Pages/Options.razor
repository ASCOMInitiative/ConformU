@page "/Settings"
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@using static ConformU.ConformConstants

@*Title and settings reset button*@
<div class="row">
    <h1>Settings</h1>
    <RadzenButton Click=@(args => OnResetButtonClick()) Text="Reset to Defaults" Icon="account_circle" Style="margin-bottom: 20px; width: 220px; position: absolute; right: 30px;" />
</div>

@*Status message*@
<div class="row">
    <h3>Configuration status:   @status</h3>
</div>

@*Configuration tabs*@
<RadzenTabs Change=@OnChange style="height: 820px;margin-top:20px" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="General">
            <div class="row">
                <RadzenCard Style="width:300px; margin-bottom: 20px; height:250px; margin-right: 20px">
                    <RadzenCheckBoxList @bind-Value=@currentScope TValue="int" Orientation="Orientation.Vertical" Change=@(args => OnScopeChange(args))>
                        <Items>
                            <RadzenCheckBoxListItem Text="Test Properties" Value="0" />
                            <RadzenCheckBoxListItem Text="Test Methods" Value="1" />
                            <RadzenCheckBoxListItem Text="Test SideOfPier Read" Value="2" />
                            <RadzenCheckBoxListItem Text="Test SideOfPier Write" Value="3" />
                            <RadzenCheckBoxListItem Text="Test Performance" Value="4" />
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenCard>

                <RadzenCard Style="width:410px; margin-bottom:20px;height:250px;">
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Style="margin-top:6px;" Name="CHK1" @bind-Value=@chkUpdates TValue="bool" Change=@(args => OnCheckboxChange(args, "Updates")) />
                        <RadzenLabel Text="Check for updates" Component="CHK1" Style="margin-top:6px; margin-left: 5px;margin-right:5px;" />
                        <RadzenTextBox @bind-Value="lastUpdateDate" Disabled=true />
                    </div>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK2" @bind-Value=@chkDisplayCalls TValue="bool" Change=@(args => OnCheckboxChange(args, "DisplayCalls")) /> <RadzenLabel Text="Display method calls" Component="CHK2" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK3" @bind-Value=@chkDebug TValue="bool" Change=@(args => OnCheckboxChange(args, "Debug")) /> <RadzenLabel Text="Debug enabled" Component="CHK3" Style="margin-left: 5px;" />
                    </div>
                </RadzenCard>
            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Telescope">
            <div class="row">
                <h3 style="margin-top: 5px;">Select the tests which Conform should perform.</h3>
                <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(true)) Text="Check all tests" Style="margin-left: 20px; " />
                <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(false)) Text="Uncheck all tests" Style="margin-left: 20px; " />
            </div>

            <RadzenCheckBoxList @bind-Value=@telescopeTests
                                Style="margin-top:20px"
                                TValue="string"
                                Orientation="Orientation.Vertical"
                                Change=@(args => OnTelescopeTestsChange(args,""))>
                <Items>
                    @foreach (var item in configuration.Settings.TelescopeTests)
                    {
                        <RadzenCheckBoxListItem Text="@item.Key" Value="@item.Key" />
                    }
                </Items>
            </RadzenCheckBoxList>

        </RadzenTabsItem>

        <RadzenTabsItem Text="Camera">
            <h3>Conform will normally test camera imaging at all supported bin values that the camera reports through MaxBinX and MaxBinY.</h3>
            <h3>The settings below can be used to limit testing to specified maximum values.</h3>

            <div style="margin-top:40px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinX" TValue="int" Min="0" Change=@(args => OnMaxBinXChange(args)) />
                <h3 style="margin-left: 20px;margin-top: 5px;">Max BinX for testing</h3>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinY" TValue="int" Min="0" Change=@(args => OnMaxBinYChange(args)) />
                <h3 style="margin-left: 20px;margin-top: 5px;">Max BinY for testing</h3>
            </div>

            <h3 style="margin-top: 2em">To use the maximum bin values supplied by the camera, set the values above to zero.</h3>
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>

@*Page code*@
@code {

    int cameraTestMaxBinX;
    int cameraTestMaxBinY;

    IEnumerable<string> telescopeTests;
    string status;

    IEnumerable<int> currentScope = new List<int>() { 0, 1, 2, 3 };
    bool chkUpdates;
    bool chkDisplayCalls;
    bool chkDebug;
    DeviceType deviceType;
    string lastUpdateDate = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

    protected override void OnInitialized()
    {
        status = configuration.Status;
        SetConfiguration();
        conformLogger.LogDebug("OnInitialized", "Running");

        telescopeTests = new List<string>();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            if (item.Value) ((List<string>)telescopeTests).Add(item.Key);
        }

        SetTelescopeTests();
        SetCameraTests();
    }

    private void OnSetTelescopeTestsButtonClick(bool state)
    {
        Dictionary<string, bool> changedTests = new();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            changedTests.Add(item.Key, state);
        }
        configuration.Settings.TelescopeTests = changedTests;

        configuration.Save();
        SetTelescopeTests();
    }

    private void OnMaxBinXChange(int newValue)
    {
        configuration.Settings.CameraTestMaxBinX = newValue;
        configuration.Save();
    }
    private void OnMaxBinYChange(int newValue)
    {
        configuration.Settings.CameraTestMaxBinY = newValue;
        configuration.Save();
    }

    private void SetCameraTests()
    {
        cameraTestMaxBinX = configuration.Settings.CameraTestMaxBinX;
        cameraTestMaxBinY = configuration.Settings.CameraTestMaxBinY;
    }

    private void SetTelescopeTests()
    {
        telescopeTests = new List<string>();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            if (item.Value) ((List<string>)telescopeTests).Add(item.Key);
        }
    }

    private void SetConfiguration()
    {
        List<int> newScope = new();

        // Set scope
        if (configuration.Settings.TestProperties) newScope.Add(0);
        if (configuration.Settings.TestMethods) newScope.Add(1);
        if (configuration.Settings.TestSideOfPierRead) newScope.Add(2);
        if (configuration.Settings.TestSideOfPierWrite) newScope.Add(3);
        if (configuration.Settings.TestPerformance) newScope.Add(4);
        currentScope = newScope;

        // Set other general settings
        chkUpdates = configuration.Settings.UpdateCheck;
        chkDisplayCalls = configuration.Settings.DisplayMethodCalls;
        chkDebug = configuration.Settings.Debug;

        deviceType = configuration.Settings.DeviceType;

        // Reset device test settings
        SetTelescopeTests();
        SetCameraTests();
    }

    void OnScopeChange(IEnumerable<int> scope)
    {
        List<int> newScope = new();
        bool propertiesEnabled = scope.Contains(0);
        bool methodsEnabled = scope.Contains(1);
        bool sideofPierReadEnabled = scope.Contains(2);
        bool sideofPierWriteEnabled = scope.Contains(3);
        bool performanceEnabled = scope.Contains(4);

        conformLogger.LogDebug("OnStageChange", $"Properties: {propertiesEnabled}, Methods: {methodsEnabled}, SideOfPierRead: {sideofPierReadEnabled}, SideOfPierWrite {sideofPierWriteEnabled}");


        if (sideofPierWriteEnabled)
        {
            newScope = new List<int>() { 0, 1, 2, 3 };
            configuration.Settings.TestProperties = true;
            configuration.Settings.TestMethods = true;
            configuration.Settings.TestSideOfPierRead = true;
            configuration.Settings.TestSideOfPierWrite = true;

        }
        else
        {
            if (sideofPierReadEnabled)
            {
                newScope = new List<int>() { 0, 1, 2 };
                configuration.Settings.TestProperties = true;
                configuration.Settings.TestMethods = true;
                configuration.Settings.TestSideOfPierRead = true;
                configuration.Settings.TestSideOfPierWrite = false;
            }
            else
            {
                if (methodsEnabled)
                {
                    newScope = new List<int>() { 0, 1 };
                    configuration.Settings.TestProperties = true;
                    configuration.Settings.TestMethods = true;
                    configuration.Settings.TestSideOfPierRead = false;
                    configuration.Settings.TestSideOfPierWrite = false;
                }
                else
                {
                    if (propertiesEnabled)
                    {
                        newScope = new List<int>() { 0 };
                        configuration.Settings.TestProperties = true;
                        configuration.Settings.TestMethods = false;
                        configuration.Settings.TestSideOfPierRead = false;
                        configuration.Settings.TestSideOfPierWrite = false;
                    }
                    else
                    {
                        newScope = new List<int>();
                        configuration.Settings.TestProperties = false;
                        configuration.Settings.TestMethods = false;
                        configuration.Settings.TestSideOfPierRead = false;
                        configuration.Settings.TestSideOfPierWrite = false;
                    }
                    ;
                }
            }
        }
        if (performanceEnabled)
        {
            newScope.Add(4);
            configuration.Settings.TestPerformance = true;
        }
        else
        {
            configuration.Settings.TestPerformance = false;
        }

        scope = newScope;
        configuration.Save();
        status = configuration.Status;

        //StateHasChanged();
    }

    void OnResetButtonClick()
    {
        configuration.Reset();
        status = configuration.Status;
        SetConfiguration();
        StateHasChanged();
    }

    void OnCheckboxChange(bool args, string name)
    {
        conformLogger.LogDebug("OnCheckboxChange", $"{name} = {args}");

        switch (name)
        {
            case "Updates":
                configuration.Settings.UpdateCheck = chkUpdates;
                break;
            case "DisplayCalls":
                configuration.Settings.DisplayMethodCalls = chkDisplayCalls; ;
                break;
            case "Debug":
                configuration.Settings.Debug = chkDebug;
                break;

        }

        configuration.Save();
        status = configuration.Status;

        //StateHasChanged();
    }

    void OnChange(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

    #region Telescope TAB


    void OnTelescopeTestsChange(IEnumerable<string> value, string asd)
    {
        conformLogger.LogMessage("OnTelescopeTestsChange", $"Start of enabled test list");

        Dictionary<string, bool> newTelescopetestValues = new();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            newTelescopetestValues[item.Key] = false;
        }


        foreach (string i in value)
        {
            conformLogger.LogMessage("OnTelescopeTestsChange", $"Setting value: {i} true");
            newTelescopetestValues[i] = true;
        }
        configuration.Settings.TelescopeTests = newTelescopetestValues;
        conformLogger.LogMessage("OnTelescopeTestsChange", $"End of enabled test list");
        configuration.Save();
    }

    #endregion



}
