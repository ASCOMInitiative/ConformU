@page "/Settings"
@using ASCOM
@inject ConformLogger conformLogger
@inject ConformConfiguration configuration
@using static ConformU.Globals

@*Title and settings reset button*@
<div class="row">
    <h1>Settings</h1>
    <RadzenButton Click=@(args => OnResetButtonClick()) Text="Reset to Defaults" Icon="account_circle" Style="margin-bottom: 20px; width: 220px; position: absolute; right: 30px;" />
</div>

@*Status message*@
<div class="row">
    <h3>Configuration status:   @status</h3>
</div>

@*Configuration tabs*@
<RadzenTabs Change=@OnTabChange style="height: 820px;margin-top:20px; width:auto; height: auto" RenderMode="TabRenderMode.Client">
    <Tabs>

        <RadzenTabsItem Text="Conform">
            <div class="row" style="margin-top:@topMargin;">
                <RadzenCard Style="width:300px; margin-bottom: 20px; height:270px; margin-right: 20px">
                    <h3 style="margin-bottom:0;">Test Scope</h3>
                    <RadzenCheckBoxList @bind-Value=@conformanceTestScope TValue="int" Orientation="Orientation.Vertical" Change=@(args => OnConformTestScopeChange(args))>
                        <Items>
                            <RadzenCheckBoxListItem Text="Test Properties" Value="0" />
                            <RadzenCheckBoxListItem Text="Test Methods" Value="1" />
                            <RadzenCheckBoxListItem Text="Test SideOfPier Read" Value="2" />
                            <RadzenCheckBoxListItem Text="Test SideOfPier Write" Value="3" />
                            <RadzenCheckBoxListItem Text="Test Performance" Value="4" />
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenCard>

                <RadzenCard Style="width:410px; margin-bottom:20px;height:270px; margin-right: 20px">
                    <h3 style="margin-bottom:0;">Operation</h3>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Style="margin-top:6px;" Name="CHK1" @bind-Value=@chkUpdates TValue="bool" Change=@(args =>
                            OnCheckboxChange(args, CheckBoxConfigurationItem.UpdateCheck)) />
                            <RadzenLabel Text="Check for updates" Component="CHK1" Style="margin-top:6px; margin-left: 5px;margin-right:5px;" />
                            <RadzenTextBox @bind-Value="lastUpdateDate" Disabled=true />
                    </div>
                    <div class="row" style="margin-top:12px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK2" @bind-Value=@chkDisplayCalls TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DisplayCalls)) /> <RadzenLabel Text="Display method calls" Component="CHK2" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK3" @bind-Value=@chkDebug TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.Debug)) /> <RadzenLabel Text="Debug enabled" Component="CHK3" Style="margin-left: 5px;" />
                    </div>
                </RadzenCard>

                <RadzenCard Style="width:300px; margin-bottom:20px;height:270px;">
                    <h3 style="margin-bottom:0;">Additional Tracing</h3>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK4"
                                        @bind-Value=@chkTraceDiscovery 
                                        TValue="bool" 
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceDiscovery)) /> 
                        <RadzenLabel Text="Trace discovery" Component="CHK4" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK5" 
                                        @bind-Value=@chkTraceSettings 
                                        TValue="bool" 
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceSettings)) /> 
                        <RadzenLabel Text="Log settings values" Component="CHK5" Style="margin-left: 5px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK6" 
                                        @bind-Value=@chkTraceAlpacaCalls 
                                        TValue="bool" 
                                        Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.TraceAlpacaCalls)) /> 
                        <RadzenLabel Text="Trace Alpaca calls" Component="CHK6" Style="margin-left: 5px;" />
                    </div>
                </RadzenCard>

            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text=@alpacaAndComText>
            <div class="row" style="margin-top:@topMargin;">
                <RadzenCard Style="width:560px; margin-bottom: 20px;  margin-right: 20px">
                    <h3 style="margin-bottom:0;">Alpaca Configuration</h3>
                    <div class="row" style="margin-top: 15px">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em" @bind-Value="alpacaNumberOfDiscoveryPolls" TValue="int" Min="1" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.AlpacaNumberOfDiscoveryPolls)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Number of discovery polls (Default 1)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em " Format="0.0" @bind-Value="alpacaDiscoveryPollInterval" Step="0.1" TValue="double" Min="0.1M" Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.AlpacaDiscoveryPollInterval)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Interval between polls (Seconds - default 1.0)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em " @bind-Value="alpacaDiscoveryPort" TValue="int" Min="1" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.AlpacaDiscoveryPort)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Alpaca discovery port (Default 32227)</p>
                    </div>
                    <div class="row">
                        <RadzenNumeric Style="margin-left: 20px; width: 8em" Format="0.0" @bind-Value="alpacaDiscoveryDuration" Step="0.1" TValue="double" Min="0.1M" Change=@(args => OnDoubleItemChange(args,NumericConfigurationItem.AlpacaDiscoveryDuration)) />
                        <p style="margin-left: 20px;margin-top: 5px;">Discovery duration (Seconds - default 1.0)</p>
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenDropDown @bind-Value=@alpacaServiceType
                                        Style="width:8em"
                                        Data="serviceTypeOptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ServiceType"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Name="DROP1"
                                        Change=@(args => OnServiceTypeChange(args)) />
                        <RadzenLabel Text="Service type (Default HTTP)" Component="DROP1" Style="margin-left: 20px;margin-top:5px" />
                    </div>

                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK5" @bind-Value=@alpacaDiscoveryUseIpV4 TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV4)) />
                        <RadzenLabel Text="Use IPv4 (Default Yes)" Component="CHK5" Style="margin-left: 20px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK6" @bind-Value=@alpacaDiscoveryUseIpV6 TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV6)) />
                        <RadzenLabel Text="Use IPv6 (Default No)" Component="CHK6" Style="margin-left: 20px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK4" @bind-Value=@alpacaDiscoveryResolveName TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.AlpacaDiscoveryResolveName)) />
                        <RadzenLabel Text="Resolve DNS names (Default No)" Component="CHK4" Style="margin-left: 20px;" />
                    </div>
                    <div class="row" style="margin-top:14px; margin-left:4px;">
                        <RadzenCheckBox Name="CHK5" @bind-Value=@strictCasing TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.StrictCasing)) />
                        <RadzenLabel Text="Use strict JSON casing (Only unset this for testing)" Component="CHK5" Style="margin-left: 20px;" />
                    </div>


                </RadzenCard>

            </div>

            @if (OperatingSystem.IsWindows())
            {
                <div class="row">
                    <RadzenCard Visible="@isWindowsOs" Style="width:300px; margin-bottom:20px;">
                        <h3>COM Access Mechanic</h3>
                        <RadzenDropDown @bind-Value=@comAccessMechanic
                                        Style="width:245px"
                                        Data="comAccessMechanicoptions"
                                        TextProperty="Key"
                                        ValueProperty="Value"
                                        TValue="ComAccessMechanic"
                                        AllowClear="false"
                                        Multiple="false"
                                        MaxSelectedLabels="1"
                                        Change=@(args => OnComAccessModeChange(args)) />

                    </RadzenCard>
                </div>
            }
        </RadzenTabsItem>

        <RadzenTabsItem Text="Telescope">
            <div class="row" style="margin-top:5px;">
                <h3 style="margin-top: 5px;">Select the tests which Conform should perform.</h3>
                <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(true)) Text="Check all tests" Style="margin-left: 20px; " />
                <RadzenButton Click=@(args => OnSetTelescopeTestsButtonClick(false)) Text="Uncheck all tests" Style="margin-left: 20px; " />
            </div>

            <RadzenCheckBoxList @bind-Value=@telescopeTests
                                Style="margin-top:20px"
                                TValue="string"
                                Orientation="Orientation.Vertical"
                                Change=@(args => OnTelescopeTestsChange(args,""))>
                <Items>
                    @foreach (var item in configuration.Settings.TelescopeTests)
                    {
                        <RadzenCheckBoxListItem Text="@item.Key" Value="@item.Key" />
                    }
                </Items>
            </RadzenCheckBoxList>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Camera">
            <h3 style="margin-top:@topMargin;">Conform will normally test camera imaging at all supported bin values that the camera reports through MaxBinX and MaxBinY.</h3>
            <h3>The settings below can be used to limit testing to specified maximum values.</h3>

            <div style="margin-top:40px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinX" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraMaxBinX)) />
                <p style="margin-left: 20px;margin-top: 5px;">Max BinX for testing</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="cameraTestMaxBinY" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.CameraMaxBinY)) />
                <p style="margin-left: 20px;margin-top: 5px;">Max BinY for testing</p>
            </div>

            <h3 style="margin-top: 2em">To use the maximum bin values supplied by the camera, set the values above to zero.</h3>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Dome">
            <h3 style="margin-top:@topMargin;">These settings control how long Conform waits for actions to complete before reporting a timeout.</h3>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeShutterTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeShutterTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Shutter movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeAzimuthTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeAzimuthTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Azimuth movement completion timeout</p>
            </div>
            <div style="margin-top:40px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeAltitudeTimeout" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeAltitudeTimeout)) />
                <p style="margin-left: 20px;margin-top: 5px;">Altitude movement completion timeout</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="domeStabilisationWaitTime" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.DomeStabilisationWaitTime)) />
                <p style="margin-left: 20px;margin-top: 5px;">Movement stabilisation wait time</p>
            </div>

            <h3 style="margin-top: 2em">By default commands to open the dome shutter will be suppressed to protect observing equipment.</h3>
            <h3 style="margin-top: 0em">For a full conformance check, the dome must be permitted to open its shutter.</h3>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKOPENSHUTTER" @bind-Value=@domeOpenShutter TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.DomeOpenShutter)) />
                <RadzenLabel Text="Weather safety - Allow dome to open during testing." Component="CHKOPENSHUTTER" Style="margin-left: 5px;" />
            </div>

        </RadzenTabsItem>

        <RadzenTabsItem Text="ObservingConditions">
            <h3 style="margin-top:@topMargin;">These settings control how long Conform waits for actions to complete before reporting a timeout.</h3>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="observingConditionsMaxRetries" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ObservingConditionsMaxRetries)) />
                <p style="margin-left: 20px;margin-top: 5px;">Number of attempts to read a property when an invalid operation is reported.</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="observingConditionsRetryTime" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.ObservingConditionsRetryTime)) />
                <p style="margin-left: 20px;margin-top: 5px;">Wait time between invalid operation retries.</p>
            </div>

        </RadzenTabsItem>

        <RadzenTabsItem Text="Switch">
            <h3 style="margin-top:@topMargin;">These settings control how much delay is added after reading or writing to a switch to enable it to settle.</h3>

            <div style="margin-top:20px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchReadDelay" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchReadDelay)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch read delay (ms).</p>
            </div>
            <div class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchWriteDelay" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchWriteDelay)) />
                <p style="margin-left: 20px;margin-top: 5px;">Switch write delay (ms).</p>
            </div>

            <h3 style="margin-top:40px;">This setting controls how far Conform tests for working switches outside the configured range 1 ==> MaxSwitch. Tests will be conducted in the ranges (-XXX ==> 0) and (MaxSwitch + 1 ==> +XXX).</h3>

            <div style="margin-top:0px" class="row">
                <RadzenNumeric Style="margin-left: 20px" @bind-Value="switchExtendedNumberTestRange" TValue="int" Min="0" Change=@(args => OnIntegerItemChange(args,NumericConfigurationItem.SwitchExtendedNumberTestRange)) />
                <p style="margin-left: 20px;margin-top: 5px;">Extended switch number test range.</p>
            </div>

            <h3 style="margin-top: 2em">Device Safety - By default, switch Set tests are disabled, check this box to enable switches to be set.</h3>
            <div class="row" style="margin-top:14px; margin-left:4px;">
                <RadzenCheckBox Name="CHKSWITCHEXTENDEDTESTRANGE" @bind-Value=@switchEnableSet TValue="bool" Change=@(args => OnCheckboxChange(args, CheckBoxConfigurationItem.SwitchEnableSet)) />
                <RadzenLabel Text="Allow switches to be set and changed." Component="CHKSWITCHEXTENDEDTESTRANGE" Style="margin-left: 5px;" />
            </div>

        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>

@*Page code*@
@code {
    string alpacaAndComText;
    bool strictCasing;
    bool chkTraceDiscovery;
    bool chkTraceSettings;
    bool chkTraceAlpacaCalls;

    void OnServiceTypeChange(object serviceMode)
    {
        ServiceType serviceType = (ServiceType)serviceMode;
        configuration.Settings.AlpacaConfiguration.AccessServiceType = serviceType;
        SaveConfiguration();
    }

    private ServiceType alpacaServiceType;

    const string topMargin = "10px";
    private bool isWindowsOs;
    private enum NumericConfigurationItem
    {
        CameraMaxBinX,
        CameraMaxBinY,
        DomeShutterTimeout,
        DomeAzimuthTimeout,
        DomeAltitudeTimeout,
        DomeStabilisationWaitTime,
        ObservingConditionsRetryTime,
        ObservingConditionsMaxRetries,
        SwitchReadDelay,
        SwitchWriteDelay,
        SwitchExtendedNumberTestRange,
        AlpacaNumberOfDiscoveryPolls,
        AlpacaDiscoveryPollInterval,
        AlpacaDiscoveryPort,
        AlpacaDiscoveryDuration
    }

    private enum CheckBoxConfigurationItem
    {
        Debug,
        DisplayCalls,
        DomeOpenShutter,
        SwitchEnableSet,
        UpdateCheck,
        AlpacaDiscoveryResolveName,
        AlpacaDiscoveryUseIpV4,
        AlpacaDiscoveryUseIpV6,
        StrictCasing,
        TraceDiscovery,
        TraceSettings,
        TraceAlpacaCalls
    }

    // Camera test configuration
    private int cameraTestMaxBinX;
    private int cameraTestMaxBinY;

    // Dome test configuration
    private int domeShutterTimeout;
    private int domeAzimuthTimeout;
    private int domeAltitudeTimeout;
    private int domeStabilisationWaitTime;
    private bool domeOpenShutter;

    // Telescope test configuration
    private IEnumerable<string> telescopeTests;
    private string status;

    // ObservingConditions test configuration
    private int observingConditionsRetryTime;
    private int observingConditionsMaxRetries;

    // Switch test configuration
    private bool switchEnableSet;
    private int switchReadDelay;
    private int switchWriteDelay;
    private int switchExtendedNumberTestRange;

    // Conform general configuration
    private IEnumerable<int> conformanceTestScope = new List<int>() { 0, 1, 2, 3 };
    private bool chkUpdates;
    private bool chkDisplayCalls;
    private bool chkDebug;
    private string lastUpdateDate = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

    // Alpaca configuration
    private int alpacaNumberOfDiscoveryPolls;
    private double alpacaDiscoveryPollInterval;
    private int alpacaDiscoveryPort;
    private double alpacaDiscoveryDuration;
    public bool alpacaDiscoveryResolveName;
    public bool alpacaDiscoveryUseIpV4;
    public bool alpacaDiscoveryUseIpV6;

    private ComAccessMechanic comAccessMechanic = ComAccessMechanic.Native;
    private List<KeyValuePair<string, ComAccessMechanic>> comAccessMechanicoptions = new()
    {
        new KeyValuePair<string, ComAccessMechanic>("Native", ComAccessMechanic.Native),
        new KeyValuePair<string, ComAccessMechanic>("Driver Access", ComAccessMechanic.DriverAccess)
    };

    private List<KeyValuePair<string, ServiceType>> serviceTypeOptions = new()
    {
        new KeyValuePair<string, ServiceType>("HTTP", ServiceType.Http),
        new KeyValuePair<string, ServiceType>("HTTPS", ServiceType.Https)
    };

    protected override void OnInitialized()
    {
        status = configuration.Status;
        SetConfiguration();

        isWindowsOs = OperatingSystem.IsWindows();

        if (isWindowsOs)
        {
            alpacaAndComText = "Alpaca and COM";
        }
        else
        {
            alpacaAndComText = "Alpaca";
        }
    }

    private void OnDoubleItemChange(double newValue, NumericConfigurationItem numericConfigurationItem)
    {
        switch (numericConfigurationItem)
        {
            case NumericConfigurationItem.AlpacaDiscoveryDuration:
                configuration.Settings.AlpacaConfiguration.DiscoveryDuration = newValue;
                break;

            case NumericConfigurationItem.AlpacaDiscoveryPollInterval:
                configuration.Settings.AlpacaConfiguration.DiscoveryPollInterval = newValue;
                break;

            default:
                throw new InvalidValueException($"OnDoubleItemChange - Unknown numeric configurtation item: {numericConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void OnIntegerItemChange(int newValue, NumericConfigurationItem numericConfigurationItem)
    {
        switch (numericConfigurationItem)
        {
            case NumericConfigurationItem.CameraMaxBinX:
                configuration.Settings.CameraMaxBinX = newValue;
                break;

            case NumericConfigurationItem.CameraMaxBinY:
                configuration.Settings.CameraMaxBinY = newValue;
                break;

            case NumericConfigurationItem.DomeAltitudeTimeout:
                configuration.Settings.DomeAltitudeTimeout = newValue;
                break;

            case NumericConfigurationItem.DomeAzimuthTimeout:
                configuration.Settings.DomeAzimuthTimeout = newValue;
                break;

            case NumericConfigurationItem.DomeStabilisationWaitTime:
                configuration.Settings.DomeStabilisationWaitTime = newValue;
                break;

            case NumericConfigurationItem.DomeShutterTimeout:
                configuration.Settings.DomeShutterTimeout = newValue;
                break;

            case NumericConfigurationItem.ObservingConditionsMaxRetries:
                configuration.Settings.ObservingConditionsMaxRetries = newValue;
                break;

            case NumericConfigurationItem.ObservingConditionsRetryTime:
                configuration.Settings.ObservingConditionsRetryTime = newValue;
                break;

            case NumericConfigurationItem.SwitchExtendedNumberTestRange:
                configuration.Settings.SwitchExtendedNumberTestRange = newValue;
                break;

            case NumericConfigurationItem.SwitchReadDelay:
                configuration.Settings.SwitchReadDelay = newValue;
                break;

            case NumericConfigurationItem.SwitchWriteDelay:
                configuration.Settings.SwitchWriteDelay = newValue;
                break;

            case NumericConfigurationItem.AlpacaDiscoveryPort:
                configuration.Settings.AlpacaConfiguration.DiscoveryPort = newValue;
                break;

            case NumericConfigurationItem.AlpacaNumberOfDiscoveryPolls:
                configuration.Settings.AlpacaConfiguration.NumberOfDiscoveryPolls = newValue;
                break;

            default:
                throw new InvalidValueException($"OnIntegerItemChange - Unknown numeric configurtation item: {numericConfigurationItem}");
        }
        SaveConfiguration();
    }

    private void SaveConfiguration()
    {
        configuration.Save();
        status = configuration.Status;
        StateHasChanged();
    }

    void OnComAccessModeChange(object accessMode)
    {
        ComAccessMechanic comMechanic = (ComAccessMechanic)accessMode;
        configuration.Settings.ComConfiguration.ComACcessMechanic = comAccessMechanic;
        //configuration.Save();
        SaveConfiguration();
    }

    private void SetConfiguration()
    {
        List<int> newScope = new();

        // Set scope
        if (configuration.Settings.TestProperties) newScope.Add(0);
        if (configuration.Settings.TestMethods) newScope.Add(1);
        if (configuration.Settings.TestSideOfPierRead) newScope.Add(2);
        if (configuration.Settings.TestSideOfPierWrite) newScope.Add(3);
        if (configuration.Settings.TestPerformance) newScope.Add(4);
        conformanceTestScope = newScope;

        // Operation settings
        chkUpdates = configuration.Settings.UpdateCheck;
        chkDisplayCalls = configuration.Settings.DisplayMethodCalls;
        chkDebug = configuration.Settings.Debug;

        // Trace settings
        chkTraceDiscovery = configuration.Settings.TraceDiscovery;
        chkTraceSettings = configuration.Settings.TraceDiscovery;
        chkTraceAlpacaCalls= configuration.Settings.TraceAlpacaCalls;

        // COM Settings
        comAccessMechanic = configuration.Settings.ComConfiguration.ComACcessMechanic;

        // Telescope tests
        telescopeTests = new List<string>();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            if (item.Value) ((List<string>)telescopeTests).Add(item.Key);
        }

        // Camera tests
        cameraTestMaxBinX = configuration.Settings.CameraMaxBinX;
        cameraTestMaxBinY = configuration.Settings.CameraMaxBinY;

        // Dome tests
        domeShutterTimeout = configuration.Settings.DomeShutterTimeout;
        domeAzimuthTimeout = configuration.Settings.DomeAzimuthTimeout;
        domeAltitudeTimeout = configuration.Settings.DomeAltitudeTimeout;
        domeStabilisationWaitTime = configuration.Settings.DomeStabilisationWaitTime;
        domeOpenShutter = configuration.Settings.DomeOpenShutter;

        // ObservingConditions tests
        observingConditionsMaxRetries = configuration.Settings.ObservingConditionsMaxRetries;
        observingConditionsRetryTime = configuration.Settings.ObservingConditionsRetryTime;

        // Switch tests
        switchEnableSet = configuration.Settings.SwitchEnableSet;
        switchExtendedNumberTestRange = configuration.Settings.SwitchExtendedNumberTestRange;
        switchReadDelay = configuration.Settings.SwitchReadDelay;
        switchWriteDelay = configuration.Settings.SwitchWriteDelay;

        // Alpaca configuration
        alpacaDiscoveryDuration = configuration.Settings.AlpacaConfiguration.DiscoveryDuration;
        alpacaDiscoveryPollInterval = configuration.Settings.AlpacaConfiguration.DiscoveryPollInterval;
        alpacaDiscoveryPort = configuration.Settings.AlpacaConfiguration.DiscoveryPort;
        alpacaNumberOfDiscoveryPolls = configuration.Settings.AlpacaConfiguration.NumberOfDiscoveryPolls;
        alpacaDiscoveryResolveName = configuration.Settings.AlpacaConfiguration.DiscoveryResolveName;
        alpacaDiscoveryUseIpV4 = configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV4;
        alpacaDiscoveryUseIpV6 = configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV6;
        alpacaServiceType = configuration.Settings.AlpacaConfiguration.AccessServiceType;
        strictCasing = configuration.Settings.StrictCasing;
    }

    void OnConformTestScopeChange(IEnumerable<int> scope)
    {
        List<int> newScope = new();
        bool propertiesEnabled = scope.Contains(0);
        bool methodsEnabled = scope.Contains(1);
        bool sideofPierReadEnabled = scope.Contains(2);
        bool sideofPierWriteEnabled = scope.Contains(3);
        bool performanceEnabled = scope.Contains(4);

        if (sideofPierWriteEnabled)
        {
            newScope = new List<int>() { 0, 1, 2, 3 };
            configuration.Settings.TestProperties = true;
            configuration.Settings.TestMethods = true;
            configuration.Settings.TestSideOfPierRead = true;
            configuration.Settings.TestSideOfPierWrite = true;

        }
        else
        {
            if (sideofPierReadEnabled)
            {
                newScope = new List<int>() { 0, 1, 2 };
                configuration.Settings.TestProperties = true;
                configuration.Settings.TestMethods = true;
                configuration.Settings.TestSideOfPierRead = true;
                configuration.Settings.TestSideOfPierWrite = false;
            }
            else
            {
                if (methodsEnabled)
                {
                    newScope = new List<int>() { 0, 1 };
                    configuration.Settings.TestProperties = true;
                    configuration.Settings.TestMethods = true;
                    configuration.Settings.TestSideOfPierRead = false;
                    configuration.Settings.TestSideOfPierWrite = false;
                }
                else
                {
                    if (propertiesEnabled)
                    {
                        newScope = new List<int>() { 0 };
                        configuration.Settings.TestProperties = true;
                        configuration.Settings.TestMethods = false;
                        configuration.Settings.TestSideOfPierRead = false;
                        configuration.Settings.TestSideOfPierWrite = false;
                    }
                    else
                    {
                        newScope = new List<int>();
                        configuration.Settings.TestProperties = false;
                        configuration.Settings.TestMethods = false;
                        configuration.Settings.TestSideOfPierRead = false;
                        configuration.Settings.TestSideOfPierWrite = false;
                    }
                    ;
                }
            }
        }
        if (performanceEnabled)
        {
            newScope.Add(4);
            configuration.Settings.TestPerformance = true;
        }
        else
        {
            configuration.Settings.TestPerformance = false;
        }

        scope = newScope;
        SaveConfiguration();
    }

    void OnResetButtonClick()
    {
        configuration.Reset();
        status = configuration.Status;
        SetConfiguration();
        StateHasChanged();
    }

    void OnCheckboxChange(bool args, CheckBoxConfigurationItem name)
    {
        switch (name)
        {
            case CheckBoxConfigurationItem.UpdateCheck:
                configuration.Settings.UpdateCheck = chkUpdates;
                break;

            case CheckBoxConfigurationItem.DisplayCalls:
                configuration.Settings.DisplayMethodCalls = chkDisplayCalls; ;
                break;

            case CheckBoxConfigurationItem.Debug:
                configuration.Settings.Debug = chkDebug;
                break;

            case CheckBoxConfigurationItem.DomeOpenShutter:
                configuration.Settings.DomeOpenShutter = domeOpenShutter;
                break;

            case CheckBoxConfigurationItem.SwitchEnableSet:
                configuration.Settings.SwitchEnableSet = switchEnableSet;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryResolveName:
                configuration.Settings.AlpacaConfiguration.DiscoveryResolveName = alpacaDiscoveryResolveName;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV4:
                configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV4 = alpacaDiscoveryUseIpV4;
                break;

            case CheckBoxConfigurationItem.AlpacaDiscoveryUseIpV6:
                configuration.Settings.AlpacaConfiguration.DiscoveryUseIpV6 = alpacaDiscoveryUseIpV6;
                break;

            case CheckBoxConfigurationItem.StrictCasing:
                configuration.Settings.StrictCasing = strictCasing;
                break;

            case CheckBoxConfigurationItem.TraceDiscovery:
                configuration.Settings.TraceDiscovery = chkTraceDiscovery;
                break;

            case CheckBoxConfigurationItem.TraceSettings:
                configuration.Settings.TraceSettings = chkTraceSettings;
                break;

            case CheckBoxConfigurationItem.TraceAlpacaCalls:
                configuration.Settings.TraceAlpacaCalls = chkTraceAlpacaCalls;
                break;

            default:
                throw new InvalidValueException($"OnCheckboxChange - Unknown checkbox name: {name}");
        }

        SaveConfiguration();
    }

    void OnTabChange(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

    #region Telescope TAB

    private void OnSetTelescopeTestsButtonClick(bool state)
    {
        Dictionary<string, bool> changedTests = new();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            changedTests.Add(item.Key, state);
        }
        configuration.Settings.TelescopeTests = changedTests;

        //configuration.Save();
        SaveConfiguration();
        SetConfiguration();
        StateHasChanged();
    }

    void OnTelescopeTestsChange(IEnumerable<string> value, string asd)
    {
        conformLogger.LogMessage("OnTelescopeTestsChange", $"Start of enabled test list");

        Dictionary<string, bool> newTelescopetestValues = new();
        foreach (KeyValuePair<string, bool> item in configuration.Settings.TelescopeTests)
        {
            newTelescopetestValues[item.Key] = false;
        }

        foreach (string i in value)
        {
            conformLogger.LogMessage("OnTelescopeTestsChange", $"Setting value: {i} true");
            newTelescopetestValues[i] = true;
        }
        configuration.Settings.TelescopeTests = newTelescopetestValues;
        conformLogger.LogMessage("OnTelescopeTestsChange", $"End of enabled test list");
        //configuration.Save();
        SaveConfiguration();
    }

    #endregion



}
