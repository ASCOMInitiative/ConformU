@using BlazorPro.BlazorSize
@using Conform
@inject IResizeListener listener
@implements IDisposable
@page "/"
@inject ILogger<App> logger
@inject ConformLogger conformLogger
@inject ConformConfiguration settings
@inject IJSRuntime JS

<div>
    <h1>Welcome to Conform Universal!</h1>
    <div>
        <RadzenButton Click=@(args => StartTest("Starting test")) Text="Start" Icon="account_circle" Style="margin-bottom: 20px; width: 150px" />
        <RadzenButton Click=@(args => StopTest("Stopping test")) Text="Stop" Icon="account_circle" Style="margin-bottom: 20px; width: 150px" />
    </div>

    <h4>Conform Log</h4>
    <RadzenTextArea Style="line-height:1.3" Name="ScreenLog" @bind-Value=@screenLog Rows="@Rows" Cols="250" ReadOnly=true />
</div>
@code {

    int Rows = 10;
    string screenLog;
    int messageCount = 0;
    int initialisationCount = 0;
    object screenLoglockObject = new object();

    DeviceConformanceTester tester;

    void StartTest(string buttonName)
    {

        settings.Validate();
        settings.Reset();
        LogMsgDebug("WarningMessageDisplayed", settings.Settings.WarningMessageDisplayed.ToString());
        LogMsgDebug("UpdateDate", settings.Settings.UpdateDate.ToString());
        LogMsgDebug("DisplayMethodCalls", settings.Settings.DisplayMethodCalls.ToString());
        LogMsgDebug("Telescope", settings.Settings.DeviceTelescope.ToString());
        LogMsgDebug("CurrentDeviceType", settings.Settings.CurrentDeviceType);

        Console.WriteLine($"{DateTime.Now.ToString("HH:mm:ss.fff")} StartTest Start - Count: {initialisationCount}");

        LogMsgDebug("StartTest", $"Creating TASK");
        Task conformanceTest = new Task(() =>
        {
            tester = new DeviceConformanceTester(settings);
            tester.OutputChanged += TesterChanged;
        });
        LogMsgDebug("StartTest", $"Starting TASK");
        conformanceTest.Start();
        LogMsgDebug("StartTest", $"TASK started");

    }
    void StopTest(string buttonName)
    {
        LogMsgDebug("StopClick", $"STOPPING TESTER");

        if (tester is not null)
        {
            tester.Dispose();
            tester = null;
        }
        GC.Collect();
    }

    /// <summary>
    /// Log a message to the screen and trace log
    /// </summary>
    /// <param name="id"></param>
    /// <param name="message"></param>
    void LogMsgDebug(string id, string message)
    {
        logger.LogInformation($"Logger - {message}");
        conformLogger.LogDebug(id, message);
        screenLog += $"{(id).PadRight(30)} {message}\r\n"; // Add the new log message to the screen display
    }


    /// <summary>
    /// Event handler for messages returned from the tester
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    private void TesterChanged(object source, MessageEventArgs e)
    {
        lock (screenLoglockObject)
        {
            messageCount += 1;
            LogMsgDebug(e.Id, $"Call count: {messageCount}, Message: {e.Message}"); // Log the message
        }
        InvokeAsync(StateHasChanged); // Display the updated log on the screen
    }

    #region Log textarea - resize support

    BrowserWindowSize browser = new BrowserWindowSize();

    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
        }
    }

    // This method will be called when the window resizes.
    // It is ONLY called when the user stops dragging the window's edge. (It is already throttled to protect your app from perf. nightmares)
    void WindowResized(object _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;

        // Calculate the number of rows
        Rows = Convert.ToInt32(((double)browser.Height - 200) / 20.0) + (browser.Height / 300) - 1;

        // Log the new window size and number of rows
        LogMsgDebug("WindowResized", $"Height: {browser.Height}, Rows: {Rows}");

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }

    #endregion

    #region Dispose support

    void IDisposable.Dispose()
    {
        // Always use IDisposable in your component to unsubscribe from the event.
        // Be a good citizen and leave things how you found them.
        // This way event handlers aren't called when nobody is listening.
        listener.OnResized -= WindowResized;
    }

    #endregion

}
